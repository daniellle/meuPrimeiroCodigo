"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-03T02:09:41.7434086-07:00
var assert = require("assert");
var DefaultEqualityComparator_1 = require("./DefaultEqualityComparator");
var Decorators_1 = require("../Decorators");
var Stubs_1 = require("./Stubs");
var MurmurHash_1 = require("./MurmurHash");
/** {@link Set} implementation with closed hashing (open addressing). */
// NOTE:  JavaScript's Set interface has on significant different diffrence from Java's:
// 		  e.g. the return type of add() differs!
//        For this reason I've commented tweaked the implements clause
var INITAL_CAPACITY = 16; // must be power of 2
var LOAD_FACTOR = 0.75;
var Array2DHashSet = /** @class */ (function () {
    function Array2DHashSet(comparatorOrSet, initialCapacity) {
        if (initialCapacity === void 0) { initialCapacity = INITAL_CAPACITY; }
        /** How many elements in set */
        this.n = 0;
        this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR); // when to expand
        if (comparatorOrSet instanceof Array2DHashSet) {
            this.comparator = comparatorOrSet.comparator;
            this.buckets = comparatorOrSet.buckets.slice(0);
            for (var i = 0; i < this.buckets.length; i++) {
                var bucket = this.buckets[i];
                if (bucket) {
                    this.buckets[i] = bucket.slice(0);
                }
            }
            this.n = comparatorOrSet.n;
            this.threshold = comparatorOrSet.threshold;
        }
        else {
            this.comparator = comparatorOrSet || DefaultEqualityComparator_1.DefaultEqualityComparator.INSTANCE;
            this.buckets = this.createBuckets(initialCapacity);
        }
    }
    /**
     * Add {@code o} to set if not there; return existing value if already
     * there. This method performs the same operation as {@link #add} aside from
     * the return value.
     */
    Array2DHashSet.prototype.getOrAdd = function (o) {
        if (this.n > this.threshold)
            this.expand();
        return this.getOrAddImpl(o);
    };
    Array2DHashSet.prototype.getOrAddImpl = function (o) {
        var b = this.getBucket(o);
        var bucket = this.buckets[b];
        // NEW BUCKET
        if (!bucket) {
            bucket = [o];
            this.buckets[b] = bucket;
            this.n++;
            return o;
        }
        // LOOK FOR IT IN BUCKET
        for (var i = 0; i < bucket.length; i++) {
            var existing = bucket[i];
            if (this.comparator.equals(existing, o)) {
                return existing; // found existing, quit
            }
        }
        // FULL BUCKET, expand and add to end
        bucket.push(o);
        this.n++;
        return o;
    };
    Array2DHashSet.prototype.get = function (o) {
        if (o == null)
            return o;
        var b = this.getBucket(o);
        var bucket = this.buckets[b];
        if (!bucket) {
            // no bucket
            return undefined;
        }
        try {
            for (var bucket_1 = __values(bucket), bucket_1_1 = bucket_1.next(); !bucket_1_1.done; bucket_1_1 = bucket_1.next()) {
                var e = bucket_1_1.value;
                if (this.comparator.equals(e, o)) {
                    return e;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (bucket_1_1 && !bucket_1_1.done && (_a = bucket_1.return)) _a.call(bucket_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return undefined;
        var e_1, _a;
    };
    Array2DHashSet.prototype.getBucket = function (o) {
        var hash = this.comparator.hashCode(o);
        var b = hash & (this.buckets.length - 1); // assumes len is power of 2
        return b;
    };
    Array2DHashSet.prototype.hashCode = function () {
        var hash = MurmurHash_1.MurmurHash.initialize();
        try {
            for (var _a = __values(this.buckets), _b = _a.next(); !_b.done; _b = _a.next()) {
                var bucket = _b.value;
                if (bucket == null)
                    continue;
                try {
                    for (var bucket_2 = __values(bucket), bucket_2_1 = bucket_2.next(); !bucket_2_1.done; bucket_2_1 = bucket_2.next()) {
                        var o = bucket_2_1.value;
                        if (o == null)
                            break;
                        hash = MurmurHash_1.MurmurHash.update(hash, this.comparator.hashCode(o));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (bucket_2_1 && !bucket_2_1.done && (_c = bucket_2.return)) _c.call(bucket_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        hash = MurmurHash_1.MurmurHash.finish(hash, this.size);
        return hash;
        var e_3, _d, e_2, _c;
    };
    Array2DHashSet.prototype.equals = function (o) {
        if (o === this)
            return true;
        if (!(o instanceof Array2DHashSet))
            return false;
        if (o.size !== this.size)
            return false;
        var same = this.containsAll(o);
        return same;
    };
    Array2DHashSet.prototype.expand = function () {
        var old = this.buckets;
        var newCapacity = this.buckets.length * 2;
        var newTable = this.createBuckets(newCapacity);
        this.buckets = newTable;
        this.threshold = Math.floor(newCapacity * LOAD_FACTOR);
        //		System.out.println("new size="+newCapacity+", thres="+threshold);
        // rehash all existing entries
        var oldSize = this.size;
        try {
            for (var old_1 = __values(old), old_1_1 = old_1.next(); !old_1_1.done; old_1_1 = old_1.next()) {
                var bucket = old_1_1.value;
                if (!bucket) {
                    continue;
                }
                try {
                    for (var bucket_3 = __values(bucket), bucket_3_1 = bucket_3.next(); !bucket_3_1.done; bucket_3_1 = bucket_3.next()) {
                        var o = bucket_3_1.value;
                        var b = this.getBucket(o);
                        var newBucket = this.buckets[b];
                        if (!newBucket) {
                            newBucket = [];
                            this.buckets[b] = newBucket;
                        }
                        newBucket.push(o);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (bucket_3_1 && !bucket_3_1.done && (_a = bucket_3.return)) _a.call(bucket_3);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (old_1_1 && !old_1_1.done && (_b = old_1.return)) _b.call(old_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        assert(this.n === oldSize);
        var e_5, _b, e_4, _a;
    };
    Array2DHashSet.prototype.add = function (t) {
        var existing = this.getOrAdd(t);
        return existing === t;
    };
    Object.defineProperty(Array2DHashSet.prototype, "size", {
        get: function () {
            return this.n;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Array2DHashSet.prototype, "isEmpty", {
        get: function () {
            return this.n === 0;
        },
        enumerable: true,
        configurable: true
    });
    Array2DHashSet.prototype.contains = function (o) {
        return this.containsFast(this.asElementType(o));
    };
    Array2DHashSet.prototype.containsFast = function (obj) {
        if (obj == null) {
            return false;
        }
        return this.get(obj) != null;
    };
    Array2DHashSet.prototype.iterator = function () {
        return new SetIterator(this.toArray(), this);
    };
    Array2DHashSet.prototype.toArray = function (a) {
        // Check if the array argument was provided
        if (!a || a.length < this.size) {
            a = new Array(this.size);
        }
        // Copy elements from the nested arrays into the destination array
        var i = 0; // Position within destination array
        try {
            for (var _a = __values(this.buckets), _b = _a.next(); !_b.done; _b = _a.next()) {
                var bucket = _b.value;
                if (bucket == null) {
                    continue;
                }
                try {
                    for (var bucket_4 = __values(bucket), bucket_4_1 = bucket_4.next(); !bucket_4_1.done; bucket_4_1 = bucket_4.next()) {
                        var o = bucket_4_1.value;
                        if (o == null) {
                            break;
                        }
                        a[i++] = o;
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (bucket_4_1 && !bucket_4_1.done && (_c = bucket_4.return)) _c.call(bucket_4);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return a;
        var e_7, _d, e_6, _c;
    };
    Array2DHashSet.prototype.remove = function (o) {
        return this.removeFast(this.asElementType(o));
    };
    Array2DHashSet.prototype.removeFast = function (obj) {
        if (obj == null) {
            return false;
        }
        var b = this.getBucket(obj);
        var bucket = this.buckets[b];
        if (!bucket) {
            // no bucket
            return false;
        }
        for (var i = 0; i < bucket.length; i++) {
            var e = bucket[i];
            if (this.comparator.equals(e, obj)) {
                // shift all elements to the right down one
                bucket.copyWithin(i, i + 1);
                bucket.length--;
                this.n--;
                return true;
            }
        }
        return false;
    };
    Array2DHashSet.prototype.containsAll = function (collection) {
        if (collection instanceof Array2DHashSet) {
            var s = collection;
            try {
                for (var _a = __values(s.buckets), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var bucket = _b.value;
                    if (bucket == null)
                        continue;
                    try {
                        for (var bucket_5 = __values(bucket), bucket_5_1 = bucket_5.next(); !bucket_5_1.done; bucket_5_1 = bucket_5.next()) {
                            var o = bucket_5_1.value;
                            if (o == null)
                                break;
                            if (!this.containsFast(this.asElementType(o)))
                                return false;
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (bucket_5_1 && !bucket_5_1.done && (_c = bucket_5.return)) _c.call(bucket_5);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        else {
            try {
                for (var _e = __values(Stubs_1.asIterable(collection)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var o = _f.value;
                    if (!this.containsFast(this.asElementType(o)))
                        return false;
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_g = _e.return)) _g.call(_e);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        return true;
        var e_9, _d, e_8, _c, e_10, _g;
    };
    Array2DHashSet.prototype.addAll = function (c) {
        var changed = false;
        try {
            for (var _a = __values(Stubs_1.asIterable(c)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var o = _b.value;
                var existing = this.getOrAdd(o);
                if (existing !== o)
                    changed = true;
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_11) throw e_11.error; }
        }
        return changed;
        var e_11, _c;
    };
    Array2DHashSet.prototype.retainAll = function (c) {
        var newsize = 0;
        try {
            for (var _a = __values(this.buckets), _b = _a.next(); !_b.done; _b = _a.next()) {
                var bucket = _b.value;
                if (bucket == null) {
                    continue;
                }
                var i = void 0;
                var j = void 0;
                for (i = 0, j = 0; i < bucket.length; i++) {
                    if (bucket[i] == null) {
                        break;
                    }
                    if (!c.contains(bucket[i])) {
                        // removed
                        continue;
                    }
                    // keep
                    if (i !== j) {
                        bucket[j] = bucket[i];
                    }
                    j++;
                    newsize++;
                }
                newsize += j;
                bucket.length = j;
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_12) throw e_12.error; }
        }
        var changed = newsize != this.n;
        this.n = newsize;
        return changed;
        var e_12, _c;
    };
    Array2DHashSet.prototype.removeAll = function (c) {
        var changed = false;
        try {
            for (var _a = __values(Stubs_1.asIterable(c)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var o = _b.value;
                if (this.removeFast(this.asElementType(o)))
                    changed = true;
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_13) throw e_13.error; }
        }
        return changed;
        var e_13, _c;
    };
    Array2DHashSet.prototype.clear = function () {
        this.buckets = this.createBuckets(INITAL_CAPACITY);
        this.n = 0;
        this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR);
    };
    Array2DHashSet.prototype.toString = function () {
        if (this.size === 0)
            return "{}";
        var buf = '{';
        var first = true;
        try {
            for (var _a = __values(this.buckets), _b = _a.next(); !_b.done; _b = _a.next()) {
                var bucket = _b.value;
                if (bucket == null)
                    continue;
                try {
                    for (var bucket_6 = __values(bucket), bucket_6_1 = bucket_6.next(); !bucket_6_1.done; bucket_6_1 = bucket_6.next()) {
                        var o = bucket_6_1.value;
                        if (o == null)
                            break;
                        if (first)
                            first = false;
                        else
                            buf += ", ";
                        buf += o.toString();
                    }
                }
                catch (e_14_1) { e_14 = { error: e_14_1 }; }
                finally {
                    try {
                        if (bucket_6_1 && !bucket_6_1.done && (_c = bucket_6.return)) _c.call(bucket_6);
                    }
                    finally { if (e_14) throw e_14.error; }
                }
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_15) throw e_15.error; }
        }
        buf += '}';
        return buf;
        var e_15, _d, e_14, _c;
    };
    Array2DHashSet.prototype.toTableString = function () {
        var buf = "";
        try {
            for (var _a = __values(this.buckets), _b = _a.next(); !_b.done; _b = _a.next()) {
                var bucket = _b.value;
                if (bucket == null) {
                    buf += "null\n";
                    continue;
                }
                buf += '[';
                var first = true;
                try {
                    for (var bucket_7 = __values(bucket), bucket_7_1 = bucket_7.next(); !bucket_7_1.done; bucket_7_1 = bucket_7.next()) {
                        var o = bucket_7_1.value;
                        if (first)
                            first = false;
                        else
                            buf += " ";
                        if (o == null)
                            buf += "_";
                        else
                            buf += o.toString();
                    }
                }
                catch (e_16_1) { e_16 = { error: e_16_1 }; }
                finally {
                    try {
                        if (bucket_7_1 && !bucket_7_1.done && (_c = bucket_7.return)) _c.call(bucket_7);
                    }
                    finally { if (e_16) throw e_16.error; }
                }
                buf += "]\n";
            }
        }
        catch (e_17_1) { e_17 = { error: e_17_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_17) throw e_17.error; }
        }
        return buf;
        var e_17, _d, e_16, _c;
    };
    /**
     * Return {@code o} as an instance of the element type {@code T}. If
     * {@code o} is non-null but known to not be an instance of {@code T}, this
     * method returns {@code null}. The base implementation does not perform any
     * type checks; override this method to provide strong type checks for the
     * {@link #contains} and {@link #remove} methods to ensure the arguments to
     * the {@link EqualityComparator} for the set always have the expected
     * types.
     *
     * @param o the object to try and cast to the element type of the set
     * @return {@code o} if it could be an instance of {@code T}, otherwise
     * {@code null}.
     */
    Array2DHashSet.prototype.asElementType = function (o) {
        return o;
    };
    /**
     * Return an array of {@code T[]} with length {@code capacity}.
     *
     * @param capacity the length of the array to return
     * @return the newly constructed array
     */
    Array2DHashSet.prototype.createBuckets = function (capacity) {
        return new Array(capacity);
    };
    __decorate([
        Decorators_1.NotNull
    ], Array2DHashSet.prototype, "comparator", void 0);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "add", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "size", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "isEmpty", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "contains", null);
    __decorate([
        __param(0, Decorators_1.Nullable)
    ], Array2DHashSet.prototype, "containsFast", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "iterator", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "toArray", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "remove", null);
    __decorate([
        __param(0, Decorators_1.Nullable)
    ], Array2DHashSet.prototype, "removeFast", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "containsAll", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "addAll", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "retainAll", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "removeAll", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "clear", null);
    __decorate([
        Decorators_1.Override
    ], Array2DHashSet.prototype, "toString", null);
    __decorate([
        Decorators_1.SuppressWarnings("unchecked")
    ], Array2DHashSet.prototype, "asElementType", null);
    __decorate([
        Decorators_1.SuppressWarnings("unchecked")
    ], Array2DHashSet.prototype, "createBuckets", null);
    return Array2DHashSet;
}());
exports.Array2DHashSet = Array2DHashSet;
var SetIterator = /** @class */ (function () {
    function SetIterator(data, set) {
        this.data = data;
        this.set = set;
        this.nextIndex = 0;
        this.removed = true;
    }
    SetIterator.prototype.hasNext = function () {
        return this.nextIndex < this.data.length;
    };
    SetIterator.prototype.next = function () {
        if (this.nextIndex >= this.data.length)
            throw new RangeError("Attempted to iterate past end.");
        this.removed = false;
        return this.data[this.nextIndex++];
    };
    // Note: this is an untested extension to the JavaScript iterator interface
    SetIterator.prototype.remove = function () {
        if (this.removed) {
            throw new Error("This entry has already been removed");
        }
        this.set.remove(this.data[this.nextIndex - 1]);
        this.removed = true;
    };
    return SetIterator;
}());
//# sourceMappingURL=Array2DHashSet.js.map