import { DvText } from '../datavalues/DvText';
import { UidBasedId } from '../support/identification/UidBasedId';
import { Archetyped } from './Archetyped';
import { FeederAudit } from './FeederAudit';
import { Link } from './Link';
import { Pathable } from './Pathable';
/**
 * Root class of all information model classes that can be archetyped.
 * Most classes in the openEHR reference model inherit from the LOCATABLE class,
 * which defines the idea of locatability in an archetyped structure.
 * LOCATABLE defines a runtime name and an rchetype_node_id.
 */
export declare abstract class Locatable extends Pathable {
    /**
     * Runtime name of this fragment, used to build runtime paths.
     * This is the term provided via a clinical application or batch process to name this EHR construct:
     * its retention in the EHR faithfully preserves the original label by which this entry was known to end users.
     */
    name: DvText;
    /**
     * Optional globally unique object identifier for root points of archetyped structures.
     */
    uid: UidBasedId;
    /**
     * Links to other archetyped structures (data whose root object inherits from ARCHETYPED, such as ENTRY, SECTION and so on).
     * Links may be to structures in other compositions.
     */
    links: Link[];
    /**
     * Details of archetyping used on this node.
     */
    archetypeDetails: Archetyped;
    /**
     * Audit trail from non-openEHR system of original commit of information forming the content
     * of this node, or from a conversion gateway which has synthesised this node.
     */
    feederAudit: FeederAudit;
    /**
     * Design-time archetype id of this node taken from its generating archetype; used to build archetype paths.
     * Always in the form of an at code, e.g. at0005 .
     * This value enables a "standardised" name for this node to be generated, by referring to the generating archetype local ontology.
     * At an archetype root point, the value of this attribute is always the stringified
     * form of the archetype_id found in the archetype_details object.
     */
    archetypeNodeId: string;
    constructor();
    isArchetypeRoot(): boolean;
}
