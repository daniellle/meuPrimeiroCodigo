"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Typed_json_1 = require("../../../typed-json/Typed-json");
var ObjectId_1 = require("./ObjectId");
/**
 * Identifier for archetypes. Ideally these would identify globally unique archetypes.
 * Lexical form:
 * rm_originator '-' rm_name '-' rm_entity '.' concept_name { '-' specialisation }* '.v' number
 */
var ArchetypeId = /** @class */ (function (_super) {
    tslib_1.__extends(ArchetypeId, _super);
    function ArchetypeId(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    ArchetypeId_1 = ArchetypeId;
    /**
     * Organisation originating the reference model on which this archetype is based, e.g. openehr , cen , hl7 .
     * @returns {string}
     */
    ArchetypeId.prototype.getRmOriginator = function () {
        return this.value.replace(ArchetypeId_1.PATTERN, '$2');
    };
    /**
     * Name of the reference model, e.g. rim, ehr_rm, en13606 .
     * @returns {string}
     */
    ArchetypeId.prototype.getRmName = function () {
        return this.value.replace(ArchetypeId_1.PATTERN, '$3');
    };
    /**
     * Name of the ontological level within the reference model to which this archetype is targeted,
     * e.g. for openEHR, folder , composition , section , entry .
     * @returns {string}
     */
    ArchetypeId.prototype.getRmEntity = function () {
        return this.value.replace(ArchetypeId_1.PATTERN, '$4');
    };
    ArchetypeId.prototype.getDomainConcept = function () {
        return this.value.replace(ArchetypeId_1.PATTERN, '$5');
    };
    /**
     * Name of specialisation of concept, if this archetype is a specialisation of another archetype, e.g. cholesterol .
     * @returns {string}
     */
    ArchetypeId.prototype.getSpecialisation = function () {
        return this.value.replace(ArchetypeId_1.PATTERN, '$6');
    };
    ArchetypeId.prototype.getVersionId = function () {
        return this.value.replace(ArchetypeId_1.PATTERN, '$7');
    };
    ArchetypeId.PATTERN = /(?:(.*)::)?(.*)-(.*)-(.*)\.(.*)(?:-(.*))?\.v(.*)/;
    ArchetypeId = ArchetypeId_1 = tslib_1.__decorate([
        Typed_json_1.JsonObject({ name: 'ArchetypeId' }),
        tslib_1.__metadata("design:paramtypes", [String])
    ], ArchetypeId);
    return ArchetypeId;
    var ArchetypeId_1;
}(ObjectId_1.ObjectId));
exports.ArchetypeId = ArchetypeId;
//# sourceMappingURL=ArchetypeId.js.map