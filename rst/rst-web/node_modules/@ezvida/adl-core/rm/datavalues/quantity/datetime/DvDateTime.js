"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var moment = require("moment");
var typed_json_1 = require("../../../../typed-json");
var DvDuration_1 = require("./DvDuration");
var DvTemporal_1 = require("./DvTemporal");
/**
 * Represents an absolute point in time, specified to the second. Semantics defined by ISO 8601.
 * Used for recording a precise point in real world time, and for approximate time stamps,
 * e.g. the origin of a HISTORY in an OBSERVATION which is only partially known
 */
var DvDateTime = /** @class */ (function (_super) {
    tslib_1.__extends(DvDateTime, _super);
    function DvDateTime(init) {
        var _this = _super.call(this) || this;
        _this.value = null;
        if (init) {
            Object.assign(_this, init);
        }
        return _this;
    }
    /**
     * Numeric value of the date/time as seconds since the calendar origin date/time 0001-01-01T00:00:00Z.
     * @returns {number}
     */
    DvDateTime.prototype.getMagnitude = function () {
        return moment(this.value).diff(moment('0001-01-01T00:00:00Z'), 'seconds');
    };
    /**
     * Difference of two quantities.
     */
    DvDateTime.prototype.diff = function (other) {
        return new DvDuration_1.DvDuration({
            value: moment.duration(this.getMagnitude() - other.getMagnitude()).toISOString()
        });
    };
    DvDateTime.prototype.toDate = function () {
        return moment(this.value).toDate();
    };
    tslib_1.__decorate([
        typed_json_1.JsonMember,
        tslib_1.__metadata("design:type", String)
    ], DvDateTime.prototype, "value", void 0);
    DvDateTime = tslib_1.__decorate([
        typed_json_1.JsonObject({ name: 'DvDateTime' }),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DvDateTime);
    return DvDateTime;
}(DvTemporal_1.DvTemporal));
exports.DvDateTime = DvDateTime;
//# sourceMappingURL=DvDateTime.js.map