"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var moment = require("moment");
var typed_json_1 = require("../../../../typed-json");
var DvDuration_1 = require("./DvDuration");
var DvTemporal_1 = require("./DvTemporal");
/**
 * Represents an absolute point in time, as measured on the Gregorian calendar, and specified only to the day.
 * Semantics defined by ISO 8601. Used for recording dates in real world time.
 * The partial form is used for approximate birth dates, dates of death, etc.
 */
var DvDate = /** @class */ (function (_super) {
    tslib_1.__extends(DvDate, _super);
    function DvDate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Numeric value of the date as days since the calendar origin date 0001-01-01.
     * @returns {number}
     */
    DvDate.prototype.getMagnitude = function () {
        return moment(this.value).diff(moment('0001-01-01T00:00:00Z'), 'days');
    };
    /**
     * Difference of two quantities.
     * @param {DvDate} other
     * @returns {DvDuration}
     */
    DvDate.prototype.diff = function (other) {
        return new DvDuration_1.DvDuration({
            value: moment.duration(this.getMagnitude() - other.getMagnitude()).toISOString()
        });
    };
    DvDate.prototype.toDate = function () {
        return moment(this.value).toDate();
    };
    tslib_1.__decorate([
        typed_json_1.JsonMember,
        tslib_1.__metadata("design:type", String)
    ], DvDate.prototype, "value", void 0);
    DvDate = tslib_1.__decorate([
        typed_json_1.JsonObject({ name: 'DvDate' })
    ], DvDate);
    return DvDate;
}(DvTemporal_1.DvTemporal));
exports.DvDate = DvDate;
//# sourceMappingURL=DvDate.js.map