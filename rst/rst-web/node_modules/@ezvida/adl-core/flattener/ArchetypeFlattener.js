"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var ArchetypeSlot_1 = require("../am/ArchetypeSlot");
var CAttribute_1 = require("../am/CAttribute");
var CComplexObject_1 = require("../am/CComplexObject");
var AdlException_1 = require("../parser/AdlException");
var AdlUtils_1 = require("../util/AdlUtils");
var RmPath_1 = require("./RmPath");
var TerminologyFlattener_1 = require("./TerminologyFlattener");
var TypeGuard_1 = require("../rminfo/TypeGuard");
var ArchetypeFlattener = /** @class */ (function () {
    function ArchetypeFlattener() {
        this.findAttribute = function (attributes, attributeName) {
            return attributes.find(function (attribute) {
                return attribute.rmAttributeName && attribute.rmAttributeName === attributeName;
            });
        };
    }
    /**
     * Flattens a specialized source archetype
     *
     * @param flatParent   Parent archetype. Must already be flattened. Can be null if differentialArchetype is not specialized
     * @param differential Differential (source) archetype
     * @return Specialized archetype in flattened form
     */
    ArchetypeFlattener.prototype.flatten = function (flatParent, differential) {
        if (!(flatParent == null || !flatParent.isDifferential)) {
            throw new Error('flatParent: Flat parent must be a flat archetype or null');
        }
        if (!differential.isDifferential) {
            throw new Error('differential: Can only flatten a differential archetype');
        }
        var result = AdlUtils_1.AdlUtils.createFlatArchetypeClone(differential);
        if (differential.parentArchetypeId != null) {
            if (flatParent == null || !flatParent.archetypeId.startsWith(differential.parentArchetypeId)) {
                throw new AdlException_1.AdlException("Wrong or missing parent archetype: expected\n        " + differential.parentArchetypeId + ", got " + flatParent.parentArchetypeId);
            }
            this.merge(flatParent, result);
        }
        return result;
    };
    /**
     * Merges a specialized archetype with its parent. Merge will be done in-place on the specialized parameter.
     *
     * @param flatParent  Flat parent archetype
     * @param specialized Specialized archetype
     */
    ArchetypeFlattener.prototype.merge = function (flatParent, specialized) {
        this.expandAttributeNodes(specialized.definition);
        this.flattenCObject(RmPath_1.RmPath.ROOT, null, flatParent.definition, specialized.definition);
        new TerminologyFlattener_1.TerminologyFlattener(flatParent.terminology, specialized.terminology).flatten();
        //TODO: mergeAnnotations
    };
    ArchetypeFlattener.prototype.flattenCComplexObject = function (path, flatParent, specialized) {
        this.flattenCComplexObjectAttributes(path, flatParent, specialized);
        this.flattenCComplexObjectTuples(flatParent, specialized);
    };
    ArchetypeFlattener.prototype.flattenCComplexObjectTuples = function (flatParent, specialized) {
        var tupleAttributes = [];
        try {
            for (var _a = tslib_1.__values(specialized.attributeTuples), _b = _a.next(); !_b.done; _b = _a.next()) {
                var attr = _b.value;
                tupleAttributes.push(attr.members.map(function (m) { return m.rmAttributeName; }));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _d = tslib_1.__values(flatParent.attributeTuples), _e = _d.next(); !_e.done; _e = _d.next()) {
                var attributeTuple = _e.value;
                try {
                    // skip tuples that are alread specialized
                    for (var tupleAttributes_1 = tslib_1.__values(tupleAttributes), tupleAttributes_1_1 = tupleAttributes_1.next(); !tupleAttributes_1_1.done; tupleAttributes_1_1 = tupleAttributes_1.next()) {
                        var tuple = tupleAttributes_1_1.value;
                        if (_.isEqual(tuple.sort(), attributeTuple.members.map(function (m) { return m.rmAttributeName; }).sort())) {
                            break;
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (tupleAttributes_1_1 && !tupleAttributes_1_1.done && (_f = tupleAttributes_1.return)) _f.call(tupleAttributes_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                // add from parent
                specialized.attributeTuples.push(_.cloneDeep(attributeTuple));
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_g = _d.return)) _g.call(_d);
            }
            finally { if (e_3) throw e_3.error; }
        }
        var e_1, _c, e_3, _g, e_2, _f;
    };
    ArchetypeFlattener.prototype.flattenCComplexObjectAttributes = function (path, flatParent, specialized) {
        var originalSpecializedAttributes = tslib_1.__spread(specialized.attributes);
        this.addCComplexObjectSpecializedAttributes(path, flatParent, specialized);
        this.addParentAttributesThatWereNotSpecialized(flatParent, specialized, originalSpecializedAttributes);
        specialized.attributes.sort(cAttributeComparator(flatParent));
    };
    ArchetypeFlattener.prototype.addCComplexObjectSpecializedAttributes = function (path, flatParent, specialized) {
        try {
            for (var _a = tslib_1.__values(specialized.attributes), _b = _a.next(); !_b.done; _b = _a.next()) {
                var specializedAttribute = _b.value;
                var parentAttribute = this.findAttribute(flatParent.attributes, specializedAttribute.rmAttributeName);
                var attributePath = path.resolve(specializedAttribute.rmAttributeName, null);
                if (parentAttribute != null) {
                    this.flattenCAttribute(attributePath, parentAttribute, specializedAttribute);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        var e_4, _c;
    };
    ArchetypeFlattener.prototype.addParentAttributesThatWereNotSpecialized = function (flatParent, specialized, originalSpecializedAttributes) {
        try {
            for (var _a = tslib_1.__values(flatParent.attributes), _b = _a.next(); !_b.done; _b = _a.next()) {
                var parentAttribute = _b.value;
                var specializedAttribute = this.findAttribute(originalSpecializedAttributes, parentAttribute.rmAttributeName);
                if (specializedAttribute == null) {
                    specialized.attributes.push(_.cloneDeep(parentAttribute));
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_5) throw e_5.error; }
        }
        var e_5, _c;
    };
    ArchetypeFlattener.prototype.flattenCArchetypeSlot = function (parent, specialized) {
        if ((specialized.includes = specialized.includes || []).length === 0) {
            try {
                for (var _a = tslib_1.__values(parent.includes), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var assertion = _b.value;
                    specialized.includes.push(_.cloneDeep(assertion));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if ((specialized.excludes = specialized.excludes || []).length === 0) {
            try {
                for (var _d = tslib_1.__values(parent.excludes), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var assertion = _e.value;
                    specialized.excludes.push(_.cloneDeep(assertion));
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        var e_6, _c, e_7, _f;
    };
    ArchetypeFlattener.prototype.expandSpecializedAttribute = function (sourceObject, specializedAttribute) {
        if (specializedAttribute.differentialPath == null) {
            throw new Error('IllegalArgumentException');
        }
        var differentialPath = RmPath_1.RmPath.VALUE_OF(specializedAttribute.differentialPath);
        var targetAttribute = _.cloneDeep(specializedAttribute);
        targetAttribute.differentialPath = null;
        targetAttribute.rmAttributeName = differentialPath.attribute;
        return this.expandAttribute(sourceObject, differentialPath.parent.segments(), targetAttribute);
    };
    ArchetypeFlattener.prototype.expandAttribute = function (sourceObject, intermediateSegments, targetAttribute) {
        if (intermediateSegments.length === 0) {
            sourceObject.attributes.push(targetAttribute);
            return targetAttribute;
        }
        var segment = intermediateSegments[0];
        var existing = this.findAttribute(sourceObject.attributes, segment.attribute);
        if (existing != null) {
            var newSource = null;
            if (segment.nodeId == null && existing.children.length > 0) {
                newSource = existing.children[0];
            }
            else {
                try {
                    for (var _a = tslib_1.__values(existing.children), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var cObject = _b.value;
                        if (cObject.nodeId != null && cObject.nodeId === segment.nodeId) {
                            newSource = cObject;
                            break;
                        }
                    }
                }
                catch (e_8_1) { e_8 = { error: e_8_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_8) throw e_8.error; }
                }
                if (newSource == null) {
                    newSource = new CComplexObject_1.CComplexObject();
                    newSource.nodeId = segment.nodeId;
                    existing.children.push(newSource);
                }
            }
            this.expandAttribute(newSource, intermediateSegments.slice(1), targetAttribute);
            return existing;
        }
        else {
            var newAttribute = new CAttribute_1.CAttribute();
            newAttribute.rmAttributeName = segment.attribute;
            var newSource = new CComplexObject_1.CComplexObject();
            newSource.nodeId = segment.nodeId;
            newAttribute.children.push(newSource);
            sourceObject.attributes.push(newAttribute);
            this.expandAttribute(newSource, intermediateSegments.slice(1), targetAttribute);
            return newAttribute;
        }
        var e_8, _c;
    };
    // expands differential paths into actual nodes
    ArchetypeFlattener.prototype.expandAttributeNodes = function (sourceObject) {
        var differentialAttributes = [];
        try {
            for (var _a = tslib_1.__values(sourceObject.attributes), _b = _a.next(); !_b.done; _b = _a.next()) {
                var cAttribute = _b.value;
                if (cAttribute.differentialPath != null) {
                    differentialAttributes.push(cAttribute);
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_9) throw e_9.error; }
        }
        var _loop_1 = function (specializedAttribute) {
            this_1.expandSpecializedAttribute(sourceObject, specializedAttribute);
            //remove specializedAttribute from source
            sourceObject.attributes = sourceObject.attributes.filter(function (att) {
                return att !== specializedAttribute;
            });
        };
        var this_1 = this;
        try {
            for (var differentialAttributes_1 = tslib_1.__values(differentialAttributes), differentialAttributes_1_1 = differentialAttributes_1.next(); !differentialAttributes_1_1.done; differentialAttributes_1_1 = differentialAttributes_1.next()) {
                var specializedAttribute = differentialAttributes_1_1.value;
                _loop_1(specializedAttribute);
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (differentialAttributes_1_1 && !differentialAttributes_1_1.done && (_d = differentialAttributes_1.return)) _d.call(differentialAttributes_1);
            }
            finally { if (e_10) throw e_10.error; }
        }
        try {
            for (var _e = tslib_1.__values(sourceObject.attributes), _f = _e.next(); !_f.done; _f = _e.next()) {
                var cAttribute = _f.value;
                try {
                    for (var _g = tslib_1.__values(cAttribute.children), _h = _g.next(); !_h.done; _h = _g.next()) {
                        var cObject = _h.value;
                        if (TypeGuard_1.isCCOmplexObject(cObject)) {
                            this.expandAttributeNodes(cObject);
                        }
                    }
                }
                catch (e_11_1) { e_11 = { error: e_11_1 }; }
                finally {
                    try {
                        if (_h && !_h.done && (_j = _g.return)) _j.call(_g);
                    }
                    finally { if (e_11) throw e_11.error; }
                }
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_k = _e.return)) _k.call(_e);
            }
            finally { if (e_12) throw e_12.error; }
        }
        var e_9, _c, e_10, _d, e_12, _k, e_11, _j;
    };
    ArchetypeFlattener.prototype.mergeAttribute = function (parent, result) {
        result.existence = result.existence || parent.existence;
        result.cardinality = result.cardinality || parent.cardinality;
    };
    ArchetypeFlattener.prototype.flattenCAttribute = function (path, parent, specialized) {
        this.mergeAttribute(parent, specialized);
        var conses = tslib_1.__spread(parent.children);
        var specializedConses = new Set(specialized.children);
        this.addSpecializedChildren(conses, specialized.children);
        var parentConsesToRemove = new Set();
        try {
            for (var conses_1 = tslib_1.__values(conses), conses_1_1 = conses_1.next(); !conses_1_1.done; conses_1_1 = conses_1.next()) {
                var specializedCons = conses_1_1.value;
                if (!specializedConses.has(specializedCons)) {
                    continue;
                }
                if (specializedCons.nodeId != null) {
                    var parentCons = this.findParentConstraintOfSpecializedNode(parent, specializedCons.nodeId);
                    if (parentCons != null) {
                        if (TypeGuard_1.isCArchetypeRoot(specializedCons)) {
                            // do not replace slot parent
                        }
                        else {
                            var childPath = path.constrain((parentCons || specializedCons).nodeId);
                            this.flattenCObject(childPath, specialized, parentCons, specializedCons);
                            parentConsesToRemove.add(parentCons);
                        }
                    }
                }
                else if (specializedCons.rmTypeName != null) {
                    var parentCons = this.findParentConstraintWithRmType(parent, specializedCons.rmTypeName);
                    if (parentCons != null) {
                        var childPath = path.constrain((parentCons || specializedCons).nodeId);
                        this.flattenCObject(childPath, specialized, parentCons, specializedCons);
                        parentConsesToRemove.add(parentCons);
                    }
                }
                else if (parent.children.length === 1) {
                    var parentCons = parent.children[0];
                    parentConsesToRemove.add(parentCons);
                }
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (conses_1_1 && !conses_1_1.done && (_a = conses_1.return)) _a.call(conses_1);
            }
            finally { if (e_13) throw e_13.error; }
        }
        conses = conses
            .map(function (cons) {
            if (specializedConses.has(cons)) {
                return cons;
            }
            if (parentConsesToRemove.has(cons)) {
                return null;
            }
            else {
                return _.cloneDeep(cons);
            }
        }).filter(function (value) { return value; });
        /*    for (const [index, cons] of conses.entries()) {
              if (specializedConses.has(cons)) {
                continue;
              }
              if (parentConsesToRemove.has(cons)) {
                conses.splice(index, 1);
              } else {
                conses[index] = _.cloneDeep(cons);
              }
    
            }*/
        specialized.children = [];
        (_b = specialized.children).push.apply(_b, tslib_1.__spread(conses));
        var e_13, _a, _b;
    };
    ArchetypeFlattener.prototype.atCodeMatchesOrSpecializes = function (atCode, sameOrParentCode) {
        return atCode == null || sameOrParentCode == null || (atCode === sameOrParentCode) || atCode.startsWith(sameOrParentCode + ".");
    };
    ArchetypeFlattener.prototype.findParentConstraintOfSpecializedNodeIndex = function (parentConses, nodeId) {
        try {
            for (var _a = tslib_1.__values(parentConses.entries()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), index = _c[0], candidate = _c[1];
                if (this.atCodeMatchesOrSpecializes(nodeId, candidate.nodeId)) {
                    return index;
                }
            }
        }
        catch (e_14_1) { e_14 = { error: e_14_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_14) throw e_14.error; }
        }
        return -1;
        var e_14, _d;
    };
    ArchetypeFlattener.prototype.findParentConstraintWithRmType = function (parent, rmType) {
        try {
            for (var _a = tslib_1.__values(parent.children), _b = _a.next(); !_b.done; _b = _a.next()) {
                var object = _b.value;
                if (object.rmTypeName === rmType) {
                    return object;
                }
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_15) throw e_15.error; }
        }
        return null;
        var e_15, _c;
    };
    ArchetypeFlattener.prototype.findParentConstraintOfSpecializedNode = function (parent, nodeId) {
        var parentConses = parent.children;
        var index = this.findParentConstraintOfSpecializedNodeIndex(parentConses, nodeId);
        return index >= 0 ? parentConses[index] : null;
    };
    ArchetypeFlattener.prototype.unspecializeNodeId = function (nodeId) {
        var lastPeriod = nodeId.lastIndexOf('.');
        if (lastPeriod < 0) {
            return nodeId;
        }
        return nodeId.substring(0, lastPeriod);
    };
    ArchetypeFlattener.prototype.addSpecializedChildren = function (conses, children) {
        var moveOnParent = new Map();
        var moveOnAfter = new Map();
        try {
            for (var children_1 = tslib_1.__values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                var child = children_1_1.value;
                if (child.nodeId != null) {
                    if (child.siblingOrder != null) {
                        var anchorIndex = this.findParentConstraintOfSpecializedNodeIndex(conses, child.siblingOrder.siblingNodeId);
                        if (anchorIndex < 0) {
                            throw new AdlException_1.AdlException("Node " + child.nodeId + " has an nonexisting sibling order node: " + child.siblingOrder.siblingNodeId);
                        }
                        if (child.siblingOrder.isBefore) {
                            conses.splice(anchorIndex, 0, child);
                        }
                        else {
                            var values = Object.assign([], moveOnAfter.get(child.siblingOrder.siblingNodeId));
                            conses.splice(anchorIndex + 1 + values.length, 0, child);
                            moveOnAfter.set(child.siblingOrder.siblingNodeId, tslib_1.__spread(values, [child]));
                        }
                    }
                    else {
                        var anchorIndex = this.findParentConstraintOfSpecializedNodeIndex(conses, child.nodeId);
                        if (anchorIndex >= 0) {
                            var parentNodeId = this.unspecializeNodeId(child.nodeId);
                            var values = Object.assign([], moveOnParent.get(child.nodeId));
                            conses.splice(anchorIndex + 1 + values.length, 0, child);
                            moveOnParent.set(parentNodeId, tslib_1.__spread(values, [child]));
                        }
                        else {
                            conses.push(child);
                        }
                    }
                }
                else {
                    conses.push(child);
                }
            }
        }
        catch (e_16_1) { e_16 = { error: e_16_1 }; }
        finally {
            try {
                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
            }
            finally { if (e_16) throw e_16.error; }
        }
        var e_16, _a;
    };
    ArchetypeFlattener.prototype.flattenCObject = function (path, _container, parent, specialized) {
        specialized.nodeId = specialized.nodeId || parent.nodeId;
        specialized.rmTypeName = specialized.rmTypeName || parent.rmTypeName;
        if (specialized.nodeId != null && specialized.nodeId === parent.nodeId) {
            specialized.occurrences = specialized.occurrences || parent.occurrences;
        }
        if (specialized instanceof ArchetypeSlot_1.ArchetypeSlot || specialized.rmType === 'ArchetypeSlot') {
            this.flattenCArchetypeSlot(parent, specialized);
        }
        if ((specialized instanceof CComplexObject_1.CComplexObject || specialized.rmType === 'CComplexObject' || specialized.rmType === 'CArchetypeRoot')
            && (parent instanceof CComplexObject_1.CComplexObject || parent.rmType === 'CComplexObject' || parent.rmType === 'CArchetypeRoot')) {
            this.flattenCComplexObject(path, parent, specialized);
        }
    };
    return ArchetypeFlattener;
}());
exports.ArchetypeFlattener = ArchetypeFlattener;
var cAttributeComparator = function (flatParent) {
    var parentAttributeSortOrder = new Map();
    var attributes = flatParent.attributes;
    try {
        for (var _a = tslib_1.__values(attributes.entries()), _b = _a.next(); !_b.done; _b = _a.next()) {
            var _c = tslib_1.__read(_b.value, 2), i = _c[0], attribute = _c[1];
            parentAttributeSortOrder.set(attribute.rmAttributeName, i);
        }
    }
    catch (e_17_1) { e_17 = { error: e_17_1 }; }
    finally {
        try {
            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
        }
        finally { if (e_17) throw e_17.error; }
    }
    return function (o1, o2) {
        var firstIndex = parentAttributeSortOrder.get(o1.rmAttributeName);
        var secondIndex = parentAttributeSortOrder.get(o2.rmAttributeName);
        if (firstIndex == null && secondIndex == null) {
            return 0;
        }
        if (firstIndex == null) {
            return 1;
        }
        if (secondIndex == null) {
            return -1;
        }
        return (firstIndex < secondIndex) ? -1 : ((firstIndex === secondIndex) ? 0 : 1);
    };
    var e_17, _d;
};
//# sourceMappingURL=ArchetypeFlattener.js.map