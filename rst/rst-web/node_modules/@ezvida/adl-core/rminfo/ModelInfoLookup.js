"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var Activity_1 = require("../rm/Activity");
var CodePhrase_1 = require("../rm/CodePhrase");
var Action_1 = require("../rm/composition/Action");
var AdminEntry_1 = require("../rm/composition/AdminEntry");
var Composition_1 = require("../rm/composition/Composition");
var Evaluation_1 = require("../rm/composition/Evaluation");
var EventContext_1 = require("../rm/composition/EventContext");
var Instruction_1 = require("../rm/composition/Instruction");
var Observation_1 = require("../rm/composition/Observation");
var Section_1 = require("../rm/composition/Section");
var Cluster_1 = require("../rm/datastructures/Cluster");
var Element_1 = require("../rm/datastructures/Element");
var Event_1 = require("../rm/datastructures/Event");
var History_1 = require("../rm/datastructures/History");
var IntervalEvent_1 = require("../rm/datastructures/IntervalEvent");
var ItemList_1 = require("../rm/datastructures/ItemList");
var ItemSingle_1 = require("../rm/datastructures/ItemSingle");
var ItemTable_1 = require("../rm/datastructures/ItemTable");
var ItemTree_1 = require("../rm/datastructures/ItemTree");
var PointEvent_1 = require("../rm/datastructures/PointEvent");
var DvBoolean_1 = require("../rm/datavalues/DvBoolean");
var DvCodedText_1 = require("../rm/datavalues/DvCodedText");
var DvEhrUri_1 = require("../rm/datavalues/DvEhrUri");
var DvIdentifier_1 = require("../rm/datavalues/DvIdentifier");
var DvText_1 = require("../rm/datavalues/DvText");
var DvUri_1 = require("../rm/datavalues/DvUri");
var DvMultimedia_1 = require("../rm/datavalues/encapsulated/DvMultimedia");
var DvParsable_1 = require("../rm/datavalues/encapsulated/DvParsable");
var DvDate_1 = require("../rm/datavalues/quantity/datetime/DvDate");
var DvDateTime_1 = require("../rm/datavalues/quantity/datetime/DvDateTime");
var DvDuration_1 = require("../rm/datavalues/quantity/datetime/DvDuration");
var DvTime_1 = require("../rm/datavalues/quantity/datetime/DvTime");
var DvAmount_1 = require("../rm/datavalues/quantity/DvAmount");
var DvCount_1 = require("../rm/datavalues/quantity/DvCount");
var DvInterval_1 = require("../rm/datavalues/quantity/DvInterval");
var DvOrdinal_1 = require("../rm/datavalues/quantity/DvOrdinal");
var DvProportion_1 = require("../rm/datavalues/quantity/DvProportion");
var DvQuantity_1 = require("../rm/datavalues/quantity/DvQuantity");
var AuditDetails_1 = require("../rm/generic/AuditDetails");
var RevisionHistoryItem_1 = require("../rm/generic/RevisionHistoryItem");
var RMTypeInfo_1 = require("./RMTypeInfo");
var ModelInfoLookup = /** @class */ (function () {
    function ModelInfoLookup() {
        this.rmTypeNamesToClasses = {};
        this.classes = [
            DvText_1.DvText,
            AuditDetails_1.AuditDetails,
            DvTime_1.DvTime,
            RevisionHistoryItem_1.RevisionHistoryItem,
            DvParsable_1.DvParsable,
            DvCount_1.DvCount,
            DvDateTime_1.DvDateTime,
            DvDuration_1.DvDuration,
            Cluster_1.Cluster,
            Section_1.Section,
            Activity_1.Activity,
            Instruction_1.Instruction,
            DvAmount_1.DvAmount,
            CodePhrase_1.CodePhrase,
            ItemSingle_1.ItemSingle,
            DvProportion_1.DvProportion,
            DvQuantity_1.DvQuantity,
            DvOrdinal_1.DvOrdinal,
            DvMultimedia_1.DvMultimedia,
            ItemTree_1.ItemTree,
            Element_1.Element,
            DvDate_1.DvDate,
            ItemList_1.ItemList,
            History_1.History,
            Observation_1.Observation,
            DvCodedText_1.DvCodedText,
            DvUri_1.DvUri,
            DvBoolean_1.DvBoolean,
            ItemTable_1.ItemTable,
            DvInterval_1.DvInterval,
            Composition_1.Composition,
            EventContext_1.EventContext,
            DvEhrUri_1.DvEhrUri,
            DvIdentifier_1.DvIdentifier,
            Event_1.Event,
            IntervalEvent_1.IntervalEvent,
            Evaluation_1.Evaluation,
            Action_1.Action,
            AdminEntry_1.AdminEntry,
            PointEvent_1.PointEvent
        ];
        try {
            for (var _a = tslib_1.__values(this.classes), _b = _a.next(); !_b.done; _b = _a.next()) {
                var clazz = _b.value;
                var rmTypeName = _.snakeCase(clazz.name).toUpperCase();
                this.rmTypeNamesToClasses[rmTypeName] = new RMTypeInfo_1.RMTypeInfo(rmTypeName, clazz);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _c;
    }
    ModelInfoLookup.prototype.getClass = function (rmTypeName) {
        var rmInfo = this.rmTypeNamesToClasses[rmTypeName];
        return rmInfo ? rmInfo.clazz : null;
    };
    ModelInfoLookup.prototype.getClassToBeCreated = function (rmTypeName) {
        if (rmTypeName === 'EVENT') {
            //this is an abstract class and cannot be created. Create point event instead
            return PointEvent_1.PointEvent;
        }
        //DV_INTERVAL<*>
        if (rmTypeName.startsWith('DV_INTERVAL')) {
            return DvInterval_1.DvInterval;
        }
        return this.getClass(rmTypeName);
    };
    ModelInfoLookup.prototype.getAttributeInfo = function (clazz, rmAttributeName) {
        var propertyKey = _.camelCase(rmAttributeName);
        var classMetaData = Reflect.getPrototypeOf(clazz)[ModelInfoLookup.METADATA_FIELD_KEY];
        if (!classMetaData) {
            return null;
        }
        return classMetaData.dataMembers[propertyKey];
    };
    ModelInfoLookup.prototype.isMultipleValued = function (object, rmAttributeName) {
        var attributeInfo = this.getAttributeInfo(object, rmAttributeName);
        return attributeInfo && attributeInfo.elements;
    };
    ModelInfoLookup.METADATA_FIELD_KEY = '__typedJsonJsonObjectMetadataInformation__';
    return ModelInfoLookup;
}());
exports.ModelInfoLookup = ModelInfoLookup;
//# sourceMappingURL=ModelInfoLookup.js.map