"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jsonpath_1 = require("jsonpath");
var CObject_1 = require("../am/CObject");
var AmQuery = /** @class */ (function () {
    function AmQuery(achertype) {
        this.ROOT = '$';
        this.ATTRIBUTE = '.attributes';
        this.CHILDREN = '.children';
        this.PATTERN = /\/([a-z_\w]?(?:\w*))(?:\[((?:at|ac|id)\d+(?:.\d+)*)\])*/g;
        this.object = achertype;
    }
    AmQuery.FIND = function (achertype, amPath, agressive) {
        return new AmQuery(achertype).find(amPath, agressive);
    };
    AmQuery.prototype.find = function (amPath, agressive) {
        var relativePath = amPath;
        if (this.isCObject(this.object)) {
            relativePath = amPath.replace(this.object.aPath, '');
            amPath.replace(this.object.aPath, '');
        }
        else {
            this.ROOT = this.ROOT + ".definition";
        }
        var result = jsonpath_1.query(this.object, this.transform(relativePath, agressive));
        if (result != null) {
            return result[0];
        }
        return null;
    };
    AmQuery.prototype.isCObject = function (arg) {
        return arg instanceof CObject_1.CObject || arg.rmTypeName !== undefined
            || arg.rmType !== undefined;
    };
    AmQuery.prototype.transform = function (amPath, agressive) {
        var syntax = this.ROOT;
        var match = this.PATTERN.exec(amPath);
        if (match == null) {
            throw new Error("Bad aql path: " + amPath);
        }
        if (match[0] === '/') {
            return this.ROOT;
        }
        while (match != null) {
            var attribute = match[1];
            var nodeId = match[2];
            var attributeCriteria = this.ATTRIBUTE + "[?(@.rmAttributeName==='" + attribute + "')]";
            var nodeCriteria = nodeId != null ? this.CHILDREN + "[?(@.nodeId==='" + nodeId + "' || @.nodeId.startsWith('" + nodeId + ".'))]" : agressive ? '.children[0]' : '';
            syntax += "" + attributeCriteria + nodeCriteria;
            match = this.PATTERN.exec(amPath);
        }
        return syntax;
    };
    return AmQuery;
}());
exports.AmQuery = AmQuery;
//# sourceMappingURL=AmQuery.js.map