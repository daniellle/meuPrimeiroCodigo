import { ParserRuleContext } from 'antlr4ts';
import { ErrorNode, TerminalNode } from 'antlr4ts/tree';
import { Archetype } from '../../am';
import { AdlListener } from '../../grammar/AdlListener';
import { AdlParser, AnnotationsContext, DefinitionContext, DescriptionContext, HeaderContext, HeaderTagContext, LanguageContext, SpecializeContext, TerminologyContext } from '../../grammar/AdlParser';
export declare class ParserListener implements AdlListener {
    archetype: Archetype;
    visitTerminal?: (node: TerminalNode) => void;
    visitErrorNode?: (node: ErrorNode) => void;
    enterEveryRule?: (ctx: ParserRuleContext) => void;
    exitEveryRule?: (ctx: ParserRuleContext) => void;
    private parser;
    constructor(parser: AdlParser);
    enterAdl(): void;
    enterSpecialize(ctx: SpecializeContext): void;
    exitHeaderTag(ctx: HeaderTagContext): void;
    enterHeader(ctx: HeaderContext): void;
    enterLanguage(ctx: LanguageContext): void;
    enterDescription(ctx: DescriptionContext): void;
    enterDefinition(ctx: DefinitionContext): void;
    enterTerminology(ctx: TerminologyContext): void;
    enterAnnotations(ctx: AnnotationsContext): void;
    private parseTerminology(ctx);
    private parseTranslation(ctx);
    private toStringMap(ctx);
    private parseStringDictionaryItems(target, ctx);
    private parseResourceDescriptionItems(ctx);
    private parseLanguageDetail(ctx);
    private parseCodeDefinitionSets(target, tContext);
    private parseArchetypeTerms(target, tContext);
    private parseTermBindings(target, tContext);
    private parseTermBindingItems(target, mapContext);
    private parseCodePhraseListString(tCodePhraseList);
    private parseCodePhraseString(context);
    private parseValueSetSets(target, tContext);
    private parseAnnotations(context);
    private parseResourceAnnotationNodeItems(target, context);
}
