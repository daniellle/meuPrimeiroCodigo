"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var immutable_1 = require("immutable");
var _1 = require("../../");
var am_1 = require("../../am");
var ArchetypeTerminology_1 = require("../../am/ArchetypeTerminology");
var ResourceDescription_1 = require("../../am/ResourceDescription");
var ValueSetItem_1 = require("../../am/ValueSetItem");
var AdlParser_1 = require("../../grammar/AdlParser");
var ResourceAnnotationNodeItems_1 = require("../../rm/ResourceAnnotationNodeItems");
var ResourceAnnotationNodes_1 = require("../../rm/ResourceAnnotationNodes");
var ResourceAnnotations_1 = require("../../rm/ResourceAnnotations");
var ResourceDescriptionItem_1 = require("../../rm/ResourceDescriptionItem");
var TranslationDetails_1 = require("../../rm/TranslationDetails");
var AdlTreeParserException_1 = require("../AdlTreeParserException");
var AdlTreeConstraintParser_1 = require("./AdlTreeConstraintParser");
var AdlTreeParserUtils_1 = require("./AdlTreeParserUtils");
var OdinObject_1 = require("./OdinObject");
var ParserListener = /** @class */ (function () {
    function ParserListener(parser) {
        this.parser = parser;
    }
    ParserListener.prototype.enterAdl = function () {
        this.archetype = new am_1.Archetype();
        this.archetype.isDifferential = true;
    };
    ParserListener.prototype.enterSpecialize = function (ctx) {
        this.archetype.parentArchetypeId = AdlTreeParserUtils_1.collectNonNullText(ctx.archetypeId());
    };
    ParserListener.prototype.exitHeaderTag = function (ctx) {
        this.archetype.isTemplate = !!ctx.TEMPLATE();
        this.archetype.isOverlay = !!ctx.TEMPLATE_OVERLAY();
    };
    ParserListener.prototype.enterHeader = function (ctx) {
        var _this = this;
        this.archetype.archetypeId = AdlTreeParserUtils_1.collectNonNullText(ctx.archetypeId());
        if (ctx.archetypePropertyList() == null) {
            return;
        }
        var propertiesContext = ctx.archetypePropertyList().archetypeProperty();
        propertiesContext.forEach(function (propertyContext) {
            var propertyName = AdlTreeParserUtils_1.collectNonNullText(propertyContext.identifier());
            var propertyValue = AdlTreeParserUtils_1.collectText(propertyContext.archetypePropertyValue());
            switch (propertyName) {
                case 'adl_version':
                    _this.archetype.adlVersion = propertyValue;
                    break;
                case 'rm_release':
                    _this.archetype.rmRelease = propertyValue;
                    break;
                case 'generated':
                    _this.archetype.isGenerated = true;
                    break;
                case 'uid':
                    _this.archetype.uid = propertyValue;
                    break;
                case 'controlled':
                    _this.archetype.isControlled = true;
                    break;
                case 'uncontrolled':
                    _this.archetype.isControlled = false;
                    break;
                default:
                    break;
            }
        });
    };
    ParserListener.prototype.enterLanguage = function (ctx) {
        var _this = this;
        var cLanguage = OdinObject_1.OdinObject.PARSER(ctx.odinObjectValue());
        var cOriginalLanguage = cLanguage.getValue('original_language').odinCodePhraseValueList();
        this.archetype.originalLanguage = AdlTreeParserUtils_1.parseCodePhraseListSingleItem(cOriginalLanguage);
        var cTranslations = cLanguage.tryGet('translations');
        if (cTranslations != null && cTranslations.odinMapValue() != null) {
            var translations_1 = immutable_1.Map().asMutable();
            cTranslations.odinMapValue().odinMapValueEntry().forEach(function (cEntry) {
                translations_1.merge(_this.parseTranslation(cEntry.odinValue()));
            });
            this.archetype.translations = translations_1.toObject();
        }
    };
    ParserListener.prototype.enterDescription = function (ctx) {
        var description = ctx.odinObjectValue();
        var result = new ResourceDescription_1.ResourceDescription();
        result.copyright = AdlTreeParserUtils_1.collectString(AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'copyright'));
        result.lifecycleState = AdlTreeParserUtils_1.collectString(AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'lifecycle_state'));
        result.originalAuthor = this.toStringMap(AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'original_author'));
        var property = AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'details');
        if (property != null) {
            result.details = this.parseResourceDescriptionItems(property.odinMapValue());
        }
        var otherContributors = AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'other_contributors');
        if (otherContributors != null) {
            result.otherContributors = AdlTreeParserUtils_1.collectStringList(otherContributors.openStringList());
        }
        result.originalNamespace = AdlTreeParserUtils_1.collectString(AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'original_namespace'));
        result.originalPublisher = AdlTreeParserUtils_1.collectString(AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'original_publisher'));
        result.licence = AdlTreeParserUtils_1.collectString(AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'licence'));
        result.custodianNamespace = AdlTreeParserUtils_1.collectString(AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'custodian_namespace'));
        result.custodianOrganisation = AdlTreeParserUtils_1.collectString(AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'custodian_organisation'));
        result.references = [];
        result.conversionDetails = [];
        result.ipAcknowledgements = [];
        this.parseStringDictionaryItems(result.references, AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'references'));
        this.parseStringDictionaryItems(result.conversionDetails, AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'conversion_details'));
        this.parseStringDictionaryItems(result.ipAcknowledgements, AdlTreeParserUtils_1.getAdlPropertyOrNull(description, 'ip_acknowledgements'));
        this.archetype.description = result;
    };
    ParserListener.prototype.enterDefinition = function (ctx) {
        this.archetype.definition = new AdlTreeConstraintParser_1.AdlTreeConstraintParser(this.archetype).parseComplexObject(ctx.complexObjectConstraint());
    };
    ParserListener.prototype.enterTerminology = function (ctx) {
        this.archetype.terminology = this.parseTerminology(ctx);
    };
    ParserListener.prototype.enterAnnotations = function (ctx) {
        this.archetype.annotations = this.parseAnnotations(ctx);
    };
    ParserListener.prototype.parseTerminology = function (ctx) {
        var _this = this;
        var result = new ArchetypeTerminology_1.ArchetypeTerminology();
        var tProperties = ctx.odinObjectValue().odinObjectProperty();
        tProperties.forEach(function (tProperty) {
            var name = AdlTreeParserUtils_1.collectNonNullText(tProperty.identifier());
            switch (name) {
                case 'term_definitions':
                    result.termDefinitions = [];
                    _this.parseCodeDefinitionSets(result.termDefinitions, tProperty.odinValue().odinMapValue());
                    break;
                case 'term_bindings':
                    result.termBindings = [];
                    _this.parseTermBindings(result.termBindings, tProperty.odinValue().odinMapValue());
                    break;
                case 'terminology_extracts':
                    result.terminologyExtracts = [];
                    _this.parseCodeDefinitionSets(result.terminologyExtracts, tProperty.odinValue().odinMapValue());
                    break;
                case 'value_sets':
                    result.valueSets = [];
                    _this.parseValueSetSets(result.valueSets, tProperty.odinValue().odinMapValue());
                    break;
                default:
                    break;
            }
        });
        return result;
    };
    ParserListener.prototype.parseTranslation = function (ctx) {
        var dTranslation = OdinObject_1.OdinObject.PARSER(ctx.odinObjectValue());
        var result = new TranslationDetails_1.TranslationDetails();
        var dLanguage = dTranslation.getValue('language').odinCodePhraseValueList();
        var code = AdlTreeParserUtils_1.collectNonNullText(dLanguage.odinCodePhraseValue()[0]._code);
        result.language = AdlTreeParserUtils_1.collectNonNullText(dTranslation.getValue('language').odinCodePhraseValueList());
        result.accreditation = dTranslation.tryGetString('accreditation');
        result.author = this.toStringMap(dTranslation.tryGet('author'));
        return immutable_1.Map.of(code, result);
    };
    ParserListener.prototype.toStringMap = function (ctx) {
        if (ctx == null) {
            return immutable_1.Map().toJS();
        }
        var result = immutable_1.Map().asMutable();
        if (ctx instanceof AdlParser_1.OdinValueContext) {
            return this.toStringMap(ctx.odinMapValue());
        }
        else if (ctx instanceof AdlParser_1.OdinMapValueContext) {
            ctx.odinMapValueEntry().forEach(function (cEntry) {
                var key = AdlTreeParserUtils_1.collectText(cEntry.STRING());
                var value;
                if (cEntry.odinValue().openStringList() != null) {
                    value = AdlTreeParserUtils_1.collectString(cEntry.odinValue().openStringList());
                }
                if (cEntry.odinValue().url() != null) {
                    value = AdlTreeParserUtils_1.collectText(cEntry.odinValue().url());
                }
                result.set(key, value);
            });
        }
        return result.toObject();
    };
    ParserListener.prototype.parseStringDictionaryItems = function (target, ctx) {
        if (!target || !ctx) {
            return;
        }
        if (ctx instanceof AdlParser_1.OdinValueContext) {
            this.parseStringDictionaryItems(target, ctx.odinMapValue());
            this.parseStringDictionaryItems(target, ctx.odinObjectValue());
        }
        else if (ctx instanceof AdlParser_1.OdinMapValueContext) {
            var entries = ctx.odinMapValueEntry();
            entries.forEach(function (entry) {
                target.push(new _1.StringDictionaryItem({
                    id: AdlTreeParserUtils_1.collectText(entry.STRING()),
                    value: AdlTreeParserUtils_1.collectString(entry.odinValue())
                }));
            });
        }
        else if (ctx instanceof AdlParser_1.OdinObjectValueContext) {
            var entries = ctx.odinObjectProperty();
            entries.forEach(function (entry) {
                target.push(new _1.StringDictionaryItem({
                    id: AdlTreeParserUtils_1.collectText(entry.identifier()),
                    value: AdlTreeParserUtils_1.collectString(entry.odinValue())
                }));
            });
        }
    };
    ParserListener.prototype.parseResourceDescriptionItems = function (ctx) {
        var _this = this;
        var entries = ctx.odinMapValueEntry();
        var target = [];
        entries.forEach(function (entry) {
            var itemContext = entry.odinValue().odinObjectValue();
            var item = new ResourceDescriptionItem_1.ResourceDescriptionItem();
            var key = AdlTreeParserUtils_1.unescapeString(entry._key.text);
            itemContext.odinObjectProperty().forEach(function (propertyContext) {
                var propertyName = AdlTreeParserUtils_1.collectNonNullText(propertyContext.identifier());
                var adlValue = propertyContext.odinValue();
                if (adlValue.odinCodePhraseValueList() != null) {
                    item[propertyName] = AdlTreeParserUtils_1.collectText(adlValue.odinCodePhraseValueList());
                }
                else if (adlValue.odinMapValue() != null) {
                    var values = [];
                    _this.parseStringDictionaryItems(values, adlValue.odinMapValue());
                    item[propertyName] = values;
                }
                else if (propertyName === 'keywords') {
                    item[propertyName] = AdlTreeParserUtils_1.collectStringList(adlValue.openStringList());
                }
                else {
                    item[propertyName] = AdlTreeParserUtils_1.collectString(adlValue.openStringList());
                }
            });
            target.push(item);
        });
        return target;
    };
    ParserListener.prototype.parseLanguageDetail = function (ctx) {
        var phrases = ctx.odinCodePhraseValue();
        if (phrases.length !== 1) {
            throw new AdlTreeParserException_1.AdlTreeParserException(AdlTreeParserUtils_1.tokenOf(ctx), 'Expected exactly one LanguageDetails in list');
        }
        return {
            language: AdlTreeParserUtils_1.collectNonNullText(phrases[0]),
            code: AdlTreeParserUtils_1.collectNonNullText(phrases[0]._code)
        };
    };
    ParserListener.prototype.parseCodeDefinitionSets = function (target, tContext) {
        if (tContext == null) {
            return;
        }
        var entries = tContext.odinMapValueEntry();
        try {
            for (var entries_1 = tslib_1.__values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                var entry = entries_1_1.value;
                var cds = new am_1.CodeDefinitionSet();
                cds.language = AdlTreeParserUtils_1.collectNonNullText(entry.STRING());
                cds.items = [];
                this.parseArchetypeTerms(cds.items, entry.odinValue().odinMapValue());
                target.push(cds);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    };
    ParserListener.prototype.parseArchetypeTerms = function (target, tContext) {
        if (tContext == null) {
            return;
        }
        var entries = tContext.odinMapValueEntry();
        try {
            for (var entries_2 = tslib_1.__values(entries), entries_2_1 = entries_2.next(); !entries_2_1.done; entries_2_1 = entries_2.next()) {
                var entry = entries_2_1.value;
                var at = new am_1.ArchetypeTerm();
                at.code = AdlTreeParserUtils_1.collectNonNullText(entry.STRING());
                at.items = [];
                this.parseStringDictionaryItems(at.items, entry.odinValue().odinObjectValue());
                this.parseStringDictionaryItems(at.items, entry.odinValue().odinMapValue());
                target.push(at);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (entries_2_1 && !entries_2_1.done && (_a = entries_2.return)) _a.call(entries_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var e_2, _a;
    };
    ParserListener.prototype.parseTermBindings = function (target, tContext) {
        try {
            for (var _a = tslib_1.__values(tContext.odinMapValueEntry()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var cEntry = _b.value;
                var tbs = new am_1.TermBindingSet();
                tbs.terminology = AdlTreeParserUtils_1.collectText(cEntry.STRING());
                var value = cEntry.odinValue();
                tbs.items = [];
                this.parseTermBindingItems(tbs.items, value);
                target.push(tbs);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        var e_3, _c;
    };
    ParserListener.prototype.parseTermBindingItems = function (target, mapContext) {
        if (mapContext == null || mapContext.odinMapValue() == null) {
            return;
        }
        try {
            for (var _a = tslib_1.__values(mapContext.odinMapValue().odinMapValueEntry()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var cEntry = _b.value;
                var tbi = new am_1.TermBindingItem();
                tbi.code = AdlTreeParserUtils_1.collectText(cEntry.STRING());
                if (cEntry.odinValue().odinCodePhraseValueList() != null) {
                    tbi.value = this.parseCodePhraseListString(cEntry.odinValue().odinCodePhraseValueList()).join(', ');
                }
                else if (cEntry.odinValue().openStringList() != null) {
                    tbi.value = AdlTreeParserUtils_1.collectString(cEntry.odinValue().openStringList());
                }
                else if (cEntry.odinValue().url() != null) {
                    tbi.value = AdlTreeParserUtils_1.collectText(cEntry.odinValue().url());
                }
                target.push(tbi);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        var e_4, _c;
    };
    ParserListener.prototype.parseCodePhraseListString = function (tCodePhraseList) {
        var result = [];
        if (tCodePhraseList.odinCodePhraseValue() != null) {
            try {
                for (var _a = tslib_1.__values(tCodePhraseList.odinCodePhraseValue()), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var adlCodePhraseValueContext = _b.value;
                    result.push(this.parseCodePhraseString(adlCodePhraseValueContext));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        return result;
        var e_5, _c;
    };
    ParserListener.prototype.parseCodePhraseString = function (context) {
        return AdlTreeParserUtils_1.collectNonNullText(context._tid) + "::" + AdlTreeParserUtils_1.collectNonNullText(context._code);
    };
    ParserListener.prototype.parseValueSetSets = function (target, tContext) {
        try {
            for (var _a = tslib_1.__values(tContext.odinMapValueEntry()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var cEntry = _b.value;
                var vsi = new ValueSetItem_1.ValueSetItem();
                vsi.id = AdlTreeParserUtils_1.collectText(cEntry.STRING());
                var adlValue = cEntry.odinValue();
                var dValue = OdinObject_1.OdinObject.PARSER(adlValue.odinObjectValue());
                var cMembers = dValue.getValue('members');
                vsi.members = [];
                (_c = vsi.members).push.apply(_c, tslib_1.__spread(AdlTreeParserUtils_1.collectStringList(cMembers.openStringList())));
                target.push(vsi);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_6) throw e_6.error; }
        }
        var e_6, _d, _c;
    };
    ParserListener.prototype.parseAnnotations = function (context) {
        var result = new ResourceAnnotations_1.ResourceAnnotations();
        var dAnnotations = OdinObject_1.OdinObject.PARSER(context.odinObjectValue());
        var cLanguages = dAnnotations.tryGet('items');
        if (cLanguages == null || cLanguages.odinMapValue() == null) {
            return result;
        }
        result.items = [];
        try {
            for (var _a = tslib_1.__values(cLanguages.odinMapValue().odinMapValueEntry()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var cLanguageEntry = _b.value;
                var nodes = new ResourceAnnotationNodes_1.ResourceAnnotationNodes();
                nodes.language = AdlTreeParserUtils_1.collectText(cLanguageEntry._key);
                var cItems = cLanguageEntry._value;
                nodes.items = [];
                this.parseResourceAnnotationNodeItems(nodes.items, cItems);
                result.items.push(nodes);
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return result;
        var e_7, _c;
    };
    ParserListener.prototype.parseResourceAnnotationNodeItems = function (target, context) {
        if (context == null || context.odinMapValue() == null) {
            return;
        }
        try {
            for (var _a = tslib_1.__values(context.odinMapValue().odinMapValueEntry()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var cEntry = _b.value;
                var item = new ResourceAnnotationNodeItems_1.ResourceAnnotationNodeItems();
                item.path = AdlTreeParserUtils_1.collectText(cEntry._key);
                item.items = [];
                this.parseStringDictionaryItems(item.items, cEntry._value);
                target.push(item);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_8) throw e_8.error; }
        }
        var e_8, _c;
    };
    return ParserListener;
}());
exports.ParserListener = ParserListener;
//# sourceMappingURL=ParserListener.js.map