"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = require("immutable");
var AdlTreeParserException_1 = require("../AdlTreeParserException");
var AdlTreeParserUtils_1 = require("./AdlTreeParserUtils");
var OdinObject = /** @class */ (function () {
    function OdinObject(startToken, properties) {
        this.startToken = startToken;
        this.properties = properties;
    }
    OdinObject.PARSER = function (context) {
        if (context == null) {
            return new OdinObject(null, immutable_1.Map());
        }
        var adlObjectProperties = context.odinObjectProperty();
        var properties = adlObjectProperties.map(function (adlObjectProperty) {
            var name = adlObjectProperty.identifier().text;
            return [name, adlObjectProperty.odinValue()];
        });
        return new OdinObject(context.start, immutable_1.Map(properties));
    };
    OdinObject.prototype.getValue = function (property) {
        var result = this.properties.get(property);
        if (result == null) {
            throw new AdlTreeParserException_1.AdlTreeParserException(this.startToken, "Adl object does not contain required property:  + " + property);
        }
        return result;
    };
    OdinObject.prototype.tryGet = function (property) {
        return this.properties.get(property);
    };
    OdinObject.prototype.tryGetString = function (property) {
        var prop = this.tryGet(property);
        if (prop == null) {
            return null;
        }
        return AdlTreeParserUtils_1.collectString(prop.openStringList());
    };
    OdinObject.prototype.tryGetFloat = function (property) {
        var prop = this.tryGet(property);
        if (prop == null) {
            return null;
        }
        var str = AdlTreeParserUtils_1.collectText(prop.number());
        if (str == null) {
            return null;
        }
        return Number.parseFloat(str);
    };
    OdinObject.prototype.tryGetInteger = function (property) {
        var prop = this.tryGet(property);
        if (prop == null) {
            return null;
        }
        var str = AdlTreeParserUtils_1.collectText(prop.number());
        if (str == null) {
            return null;
        }
        return Number.parseInt(str);
    };
    return OdinObject;
}());
exports.OdinObject = OdinObject;
//# sourceMappingURL=OdinObject.js.map