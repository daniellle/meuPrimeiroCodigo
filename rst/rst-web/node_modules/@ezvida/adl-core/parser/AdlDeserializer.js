"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var antlr4ts_1 = require("antlr4ts");
var tree_1 = require("antlr4ts/tree");
var AdlLexer_1 = require("../grammar/AdlLexer");
var AdlParser_1 = require("../grammar/AdlParser");
var AccumulatingErrorListener_1 = require("./AccumulatingErrorListener");
var AdlParserException_1 = require("./AdlParserException");
var ParserListener_1 = require("./tree/ParserListener");
var AdlDeserializer;
(function (AdlDeserializer) {
    function deserialize(data) {
        //Create the lexer and parser
        var inputStream = new antlr4ts_1.ANTLRInputStream(data);
        var lexer = new AdlLexer_1.AdlLexer(inputStream);
        var tokenStream = new antlr4ts_1.CommonTokenStream(lexer);
        var parser = new AdlParser_1.AdlParser(tokenStream);
        parser.buildParseTree = true;
        parser.removeErrorListeners();
        var errorListener = new AccumulatingErrorListener_1.AccumulatingErrorListener();
        parser.addErrorListener(errorListener);
        var tree = parser.adl();
        var printer = new ParserListener_1.ParserListener(parser);
        if (errorListener.errors.length > 0) {
            throw new AdlParserException_1.AdlParserException(errorListener.errors.join('\n\r'));
        }
        tree_1.ParseTreeWalker.DEFAULT.walk(printer, tree);
        return printer.archetype;
    }
    AdlDeserializer.deserialize = deserialize;
})(AdlDeserializer = exports.AdlDeserializer || (exports.AdlDeserializer = {}));
//# sourceMappingURL=AdlDeserializer.js.map