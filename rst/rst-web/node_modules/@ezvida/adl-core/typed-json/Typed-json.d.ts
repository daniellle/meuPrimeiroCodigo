/*!
TypedJSON v0.2.0 - https://github.com/JohnWhiteTB/TypedJSON

Typed JSON parsing and serializing that preserves type information. Parse JSON into actual class instances. Recommended (but not required)
to be used with reflect-metadata (global installation): https://github.com/rbuckton/ReflectDecorators.

The MIT License (MIT)
Copyright (c) 2016 John White

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
import { ITypedJsonSerializerCustomizer } from './customizer/ITypedJsonSerializerCustomizer';
import { ITypedJsonDeSerializerCustomizer } from './customizer/ITypedJsonDeSerializerCustomizer';
export declare type Constructor<T> = {
    new (): T;
};
interface ISerializerSettings {
    /**
     * Property key to recognize as type-hints. Default is "__type".
     */
    typeHintPropertyKey?: string;
    /**
     * When set, enable emitting and recognizing type-hints. Default is true
     */
    enableTypeHints?: boolean;
    /**
     * Maximum number of objects allowed when deserializing from JSON. Default is no limit.
     */
    maxObjects?: number;
    /**
     * Serializate all properties on @JsonObject
     */
    serializeAll?: boolean;
    /**
     * JsonMember tags to be included in serializing
     */
    includeTags?: string[];
    /**
     * If primitive try to convert. Eg. string to number
     */
    lenient?: boolean;
    /**
     * A function that transforms the JSON after serializing. Called recursively for every object.
     */
    replacer?(key: string, value: any): any;
    /**
     * A function that transforms the JSON before deserializing. Called recursively for every object.
     */
    reviver?(key: any, value: any): any;
}
export declare class JsonMemberMetadata<T> {
    /** If set, a default value will be emitted for uninitialized members. */
    emitDefaultValue: boolean;
    /** Member name as it appears in the serialized JSON. */
    name: string;
    /** Property or field key of the json member. */
    key: string;
    /** Constuctor (type) reference of the member. */
    type: Constructor<T>;
    /** If set, indicates that the member must be present when deserializing. */
    isRequired: boolean;
    /** If the json member is an array, sets options of array elements. */
    elements: JsonMemberMetadata<any>;
    /** Serialization/deserialization order. */
    order: number;
    tags: string | string[];
    forceEnableTypeHinting: boolean;
}
export declare class JsonObjectMetadata<T> {
    private _className;
    private _dataMembers;
    private _knownTypes;
    private _knownTypeCache;
    /**
     * Gets the name of a class as it appears in a serialized JSON string.
     * @param type The JsonObject class.
     * @param inherited Whether to use inherited metadata information from base classes (if own metadata does not exist).
     */
    static getJsonObjectName(type: Constructor<any>, inherited?: boolean): string;
    /**
     * Gets JsonObject metadata information from a class or its prototype.
     * @param target The target class.
     * @param inherited Whether to use inherited metadata information from base classes (if own metadata does not exist).
     * @see https://jsfiddle.net/m6ckc89v/ for demos related to the special inheritance case when 'inherited' is set.
     */
    static getFromType<S>(target: {
        new (): S;
    }, inherited?: boolean): JsonObjectMetadata<S>;
    /**
     * Gets JsonObject metadata information from a class or its prototype.
     * @param target The target prototype.
     * @param inherited Whether to use inherited metadata information from base classes (if own metadata does not exist).
     * @see https://jsfiddle.net/m6ckc89v/ for demos related to the special inheritance case when 'inherited' is set.
     */
    static getFromType(target: any, inherited?: boolean): JsonObjectMetadata<any>;
    /**
     * Gets JsonObject metadata information from a class instance.
     * @param target The target instance.
     * @param inherited Whether to use inherited metadata information from base classes (if own metadata does not exist).
     * @see https://jsfiddle.net/m6ckc89v/ for demos related to the special inheritance case when 'inherited' is set.
     */
    static getFromInstance<S>(target: S, inherited?: boolean): JsonObjectMetadata<S>;
    /**
     * Gets the known type name of a JsonObject class for type hint.
     * @param target The target class.
     */
    static getKnownTypeNameFromType<S>(target: Constructor<S>): string;
    /**
     * Gets the known type name of a JsonObject instance for type hint.
     * @param target The target instance.
     */
    static getKnownTypeNameFromInstance<S>(target: S): string;
    /** Gets the metadata of all JsonMembers of the JsonObject as key-value pairs. */
    readonly dataMembers: {
        [key: string]: JsonMemberMetadata<any>;
    };
    /** Gets or sets the constructor function for the JsonObject. */
    classType: Constructor<T>;
    /** Gets or sets the name of the JsonObject as it appears in the serialized JSON. */
    className: string;
    /** Gets a key-value collection of the currently known types for this JsonObject. */
    readonly knownTypes: {
        [key: string]: Constructor<any>;
    };
    isExplicitlyMarked: boolean;
    initializer: (json: any) => T;
    serializer: (object: T) => any;
    constructor();
    /**
     * Sets a known type.
     * @param type The known type.
     */
    setKnownType(type: Constructor<any>): void;
    /**
     * Adds a JsonMember to the JsonObject.
     * @param member The JsonMember metadata.
     * @throws Error if a JsonMember with the same name already exists.
     */
    addMember<U>(member: JsonMemberMetadata<U>): void;
    /**
     * Sorts data members:
     *  1. Ordered members in defined order
     *  2. Unordered members in alphabetical order
     */
    sortMembers(): void;
    private static sortMembersCompare(a, b);
}
interface JsonObjectOptions<T> {
    /** Name of the object as it appears in the serialized JSON. */
    name?: string;
    /** An array of known types to recognize when encountering type-hints. */
    knownTypes?: Array<{
        new (): any;
    }>;
    /** A custom serializer function transforming an instace to a JSON object. */
    serializer?: (object: T) => any;
    /** A custom deserializer function transforming a JSON object to an instace. */
    initializer?: (json: any) => T;
}
/**
 * Specifies that the type is serializable to and deserializable from a JSON string.
 * @param options Configuration settings.
 */
declare function JsonObject<T>(options?: JsonObjectOptions<T>): (target: {
    new (): T;
}) => void;
/**
 * Specifies that the type is serializable to and deserializable from a JSON string.
 */
declare function JsonObject<T>(target: {
    new (): T;
}): void;
interface JsonMemberOptions<TFunction extends Function> {
    /** Sets the member name as it appears in the serialized JSON. Default value is determined from property key. */
    name?: string;
    /** Sets the json member type. Optional if reflect metadata is available. */
    type?: TFunction;
    /** Deprecated. When the json member is an array, sets the type of array elements. Required for arrays. */
    elementType?: Function;
    /** When the json member is an array, sets the type of array elements. Required for arrays. */
    elements?: JsonMemberOptions<any> | Function;
    /** When set, indicates that the member must be present when deserializing a JSON string. */
    isRequired?: boolean;
    /** Sets the serialization and deserialization order of the json member. */
    order?: number;
    /** When set, a default value is emitted when an uninitialized member is serialized. */
    emitDefaultValue?: boolean;
    /** When set, type-hint is mandatory when deserializing. Set for properties with interface or abstract types/element-types. */
    refersAbstractType?: boolean;
    /**  When set, indicates to omit when serialialize on default behavior, excpect when @includeTag is set **/
    tags?: string | string[];
}
/**
 * Specifies that the property is part of the object when serializing.
 * Parameterless use requires reflect-metadata to determine member type.
 */
declare function JsonMember(): PropertyDecorator;
/**
 * Specifies that the property is part of the object when serializing.
 * Parameterless use requires reflect-metadata to determine member type.
 */
declare function JsonMember(target: any, propertyKey: string | symbol): void;
/**
 * Specifies that the property is part of the object when serializing.
 * @param options Configuration settings.
 */
declare function JsonMember<TFunction extends Function>(options: JsonMemberOptions<TFunction>): PropertyDecorator;
interface JsonParentOptions<TFunction extends Function> {
    /** Sets the member set method. */
    assessor?: string;
}
/**
 * Specifies that the property hold parent object when deserializing.
 */
declare function JsonParent(): PropertyDecorator;
/**
 * Specifies that the property is part of the object when serializing.
 * Parameterless use requires reflect-metadata to determine member type.
 * This propety become not <b>enumerable</b>
 */
declare function JsonParent(target: any, propertyKey: string | symbol): void;
/**
 * Specifies that the property is part of the object when serializing.
 * Parameterless use requires reflect-metadata to determine member type.
 * This propety become not <b>enumerable</b>
 * @param options Configuration settings.
 */
declare function JsonParent<TFunction extends Function>(options: JsonParentOptions<TFunction>): PropertyDecorator;
export declare class JsonParentMetadata<T> {
    key: string;
    assessor?: string;
    /** Constuctor (type) reference of the member. */
    type: Constructor<T>;
    static getFromType<S>(target: {
        new (): S;
    } | any): JsonParentMetadata<any>;
}
interface ITypedJSON {
    /**
     * Converts a JavaScript Object Notation (JSON) string into an object.
     * @param text A valid JSON string.
     * @param reviver A function that transforms the results. This function is called for each member of the object.
     * If a member contains nested objects, the nested objects are transformed before the parent object is.
     */
    parse(text: string, reviver?: (key: any, value: any) => any): any;
    /**
     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
     * @param value A JavaScript value, usually an object or array, to be converted.
     */
    stringify(value: any): string;
    /**
     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
     * @param value A JavaScript value, usually an object or array, to be converted.
     * @param replacer A function that transforms the results.
     */
    /**
     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
     * @param value A JavaScript value, usually an object or array, to be converted.
     * @param replacer Array that transforms the results.
     */
    /**
     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
     * @param value A JavaScript value, usually an object or array, to be converted.
     * @param replacer A function that transforms the results.
     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
     */
    /**
     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
     * @param value A JavaScript value, usually an object or array, to be converted.
     * @param replacer Array that transforms the results.
     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
     */
    /**
     * Converts a JavaScript Object Notation (JSON) string into an instance of the provided class.
     * @param text A valid JSON string.
     * @param type A class from which an instance is created using the provided JSON string.
     * @param settings Per-use serializer settings. Unspecified keys are assigned from global config.
     * @param customizers
     */
    parse<T>(text: string, type: {
        new (): T;
    }, settings?: ISerializerSettings, ...customizers: ITypedJsonDeSerializerCustomizer[]): T;
    /**
     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
     * @param value A JavaScript value, usually an object or array, to be converted.
     * @param settings Per-use serializer settings. Unspecified keys are assigned from global config.
     * @param customizers
     */
    stringify(value: any, settings?: ISerializerSettings, ...customizers: ITypedJsonSerializerCustomizer[]): string;
    /**
     * Configures TypedJSON with custom settings. New settings will be assigned to existing settings.
     * @param settings The settings object.
     */
    config(settings: ISerializerSettings): void;
}
declare const ITypedJSON: ITypedJSON;
export declare const removeNull: (_key: {}, value: {}) => {};
export { ISerializerSettings, ITypedJSON as TypedJSON, JsonObjectOptions, JsonObject, JsonMemberOptions, JsonMember, JsonParentOptions, JsonParent };
