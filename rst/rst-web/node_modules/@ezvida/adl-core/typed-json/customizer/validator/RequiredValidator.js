"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Element_1 = require("../../../rm/datastructures/Element");
var datavalues_1 = require("../../../rm/datavalues");
var Typed_json_1 = require("../../Typed-json");
var RequiredValidationError_1 = require("../error/RequiredValidationError");
var Decorators_1 = require("./Decorators");
var IValidator_1 = require("./IValidator");
var RequiredValidator = /** @class */ (function (_super) {
    tslib_1.__extends(RequiredValidator, _super);
    function RequiredValidator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RequiredValidator.prototype.validate = function (object) {
        if (!object.required && object.value) {
            var _root = getRoot(object);
            var _aPath = object.aPath;
            if (object.value instanceof datavalues_1.DvQuantity && ((object.value.magnitude != null) !== (object.value.units != null))) {
                throw new RequiredValidationError_1.RequiredValidationError("Field '" + object.name.value + "' is required", _aPath, _root, object.name.value);
            }
            else if (object.value instanceof datavalues_1.DvProportion && ((object.value.numerator != null)
                !== (object.value.type != null))) {
                throw new RequiredValidationError_1.RequiredValidationError("Field '" + object.name.value + "' is required", _aPath, _root, object.name.value);
            }
            return;
        }
        if (!object.required) {
            return;
        }
        if (!object.value) {
            throw new Error('Value on Element is null');
        }
        var root = getRoot(object);
        var aPath = object.aPath;
        var objectMetadata = Typed_json_1.JsonObjectMetadata.getFromType(object.value);
        if (!objectMetadata) {
            return;
        }
        Object.keys(object.value).forEach(function (key) {
            if (objectMetadata.dataMembers[key] && !Decorators_1.isNullable(object.value, key) && object.value[key] == null) {
                throw new RequiredValidationError_1.RequiredValidationError("Field '" + object.name.value + "' on '" + key + "' is required", aPath, root, object.name.value, key);
            }
        });
    };
    RequiredValidator.prototype.getType = function () {
        return Element_1.Element;
    };
    return RequiredValidator;
}(IValidator_1.Validador));
exports.RequiredValidator = RequiredValidator;
function getRoot(object) {
    if (object.parent && object.parent.parent) {
        return getRoot(object.parent);
    }
    return object.archetypeNodeId;
}
//# sourceMappingURL=RequiredValidator.js.map