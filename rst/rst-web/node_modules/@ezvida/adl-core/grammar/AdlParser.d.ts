import { ATN } from 'antlr4ts/atn/ATN';
import { Parser } from 'antlr4ts/Parser';
import { ParserRuleContext } from 'antlr4ts/ParserRuleContext';
import { TerminalNode } from 'antlr4ts/tree/TerminalNode';
import { Token } from 'antlr4ts/Token';
import { TokenStream } from 'antlr4ts/TokenStream';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { AdlListener } from './AdlListener';
export declare class AdlParser extends Parser {
    static readonly T__0: number;
    static readonly T__1: number;
    static readonly T__2: number;
    static readonly T__3: number;
    static readonly T__4: number;
    static readonly RANGE: number;
    static readonly EQUALS: number;
    static readonly PAREN_OPEN: number;
    static readonly PAREN_CLOSE: number;
    static readonly BRACKET_OPEN: number;
    static readonly BRACKET_CLOSE: number;
    static readonly GT: number;
    static readonly LT: number;
    static readonly PERIOD: number;
    static readonly COMMA: number;
    static readonly COLON: number;
    static readonly SEMICOLON: number;
    static readonly MINUS: number;
    static readonly UNDERSCORE: number;
    static readonly PIPE: number;
    static readonly ASTERISK: number;
    static readonly CARET: number;
    static readonly AMP: number;
    static readonly EXCLAMATION: number;
    static readonly QUESTION: number;
    static readonly OTHER_SYMBOL: number;
    static readonly DATE_TIME_PATTERN: number;
    static readonly TIME_PATTERN: number;
    static readonly DATE_PATTERN: number;
    static readonly DURATION: number;
    static readonly ISO_DATE_TIME: number;
    static readonly ISO_DATE: number;
    static readonly ISO_TIME: number;
    static readonly AT_CODE_VALUE: number;
    static readonly LANGUAGE: number;
    static readonly ARCHETYPE: number;
    static readonly TEMPLATE: number;
    static readonly TEMPLATE_OVERLAY: number;
    static readonly CONCEPT: number;
    static readonly DESCRIPTION: number;
    static readonly SPECIALISE: number;
    static readonly DEFINITION: number;
    static readonly MATCHES: number;
    static readonly USE_NODE: number;
    static readonly OCCURRENCES: number;
    static readonly INCLUDE: number;
    static readonly EXCLUDE: number;
    static readonly ALLOW_ARCHETYPE: number;
    static readonly CARDINALITY: number;
    static readonly UNORDERED: number;
    static readonly ORDERED: number;
    static readonly UNIQUE: number;
    static readonly EXISTENCE: number;
    static readonly BEFORE: number;
    static readonly AFTER: number;
    static readonly USE_ARCHETYPE: number;
    static readonly USE_TEMPLATE: number;
    static readonly CLOSED: number;
    static readonly ANNOTATIONS: number;
    static readonly TERMINOLOGY: number;
    static readonly TRUE: number;
    static readonly FALSE: number;
    static readonly TYPE_IDENTIFIER: number;
    static readonly NAME_IDENTIFIER: number;
    static readonly INTEGER: number;
    static readonly STRING: number;
    static readonly UNICODE_CHAR: number;
    static readonly LINE_COMMENT: number;
    static readonly WS: number;
    static readonly RULE_adl: number;
    static readonly RULE_alphanumeric: number;
    static readonly RULE_archetypeId: number;
    static readonly RULE_headerTag: number;
    static readonly RULE_header: number;
    static readonly RULE_archetypePropertyList: number;
    static readonly RULE_archetypeProperty: number;
    static readonly RULE_archetypePropertyValue: number;
    static readonly RULE_archetypePropertyValuePart: number;
    static readonly RULE_atCode: number;
    static readonly RULE_specializeTag: number;
    static readonly RULE_specialize: number;
    static readonly RULE_language: number;
    static readonly RULE_description: number;
    static readonly RULE_definition: number;
    static readonly RULE_typeConstraint: number;
    static readonly RULE_complexObjectConstraint: number;
    static readonly RULE_occurrences: number;
    static readonly RULE_occurrenceRange: number;
    static readonly RULE_attributeListMatcher: number;
    static readonly RULE_orderConstraint: number;
    static readonly RULE_multiValueConstraint: number;
    static readonly RULE_valueConstraint: number;
    static readonly RULE_ordinalConstraint: number;
    static readonly RULE_ordinalItemList: number;
    static readonly RULE_ordinalItem: number;
    static readonly RULE_primitiveValueConstraint: number;
    static readonly RULE_terminologyCodeConstraint: number;
    static readonly RULE_archetypeSlotConstraint: number;
    static readonly RULE_archetypeSlotValueConstraint: number;
    static readonly RULE_archetypeSlotSingleConstraint: number;
    static readonly RULE_archetypeReferenceConstraint: number;
    static readonly RULE_stringConstraint: number;
    static readonly RULE_numberConstraint: number;
    static readonly RULE_dateTimeConstraint: number;
    static readonly RULE_dateConstraint: number;
    static readonly RULE_timeConstraint: number;
    static readonly RULE_durationConstraint: number;
    static readonly RULE_codeIdentifierList: number;
    static readonly RULE_regularExpression: number;
    static readonly RULE_regularExpressionInner1: number;
    static readonly RULE_regularExpressionInner2: number;
    static readonly RULE_attributeConstraint: number;
    static readonly RULE_tupleAttributeIdentifier: number;
    static readonly RULE_tupleChildConstraints: number;
    static readonly RULE_tupleChildConstraint: number;
    static readonly RULE_attributeIdentifier: number;
    static readonly RULE_existence: number;
    static readonly RULE_cardinality: number;
    static readonly RULE_numberIntervalConstraint: number;
    static readonly RULE_dateIntervalConstraint: number;
    static readonly RULE_timeIntervalConstraint: number;
    static readonly RULE_dateTimeIntervalConstraint: number;
    static readonly RULE_durationIntervalConstraint: number;
    static readonly RULE_terminology: number;
    static readonly RULE_annotations: number;
    static readonly RULE_odinValue: number;
    static readonly RULE_odinObjectValue: number;
    static readonly RULE_odinObjectProperty: number;
    static readonly RULE_odinCodePhraseValueList: number;
    static readonly RULE_odinCodePhraseValue: number;
    static readonly RULE_odinMapValue: number;
    static readonly RULE_odinMapValueEntry: number;
    static readonly RULE_openStringList: number;
    static readonly RULE_stringList: number;
    static readonly RULE_numberList: number;
    static readonly RULE_booleanList: number;
    static readonly RULE_codeIdentifier: number;
    static readonly RULE_codeIdentifierPart: number;
    static readonly RULE_identifier: number;
    static readonly RULE_bool: number;
    static readonly RULE_nameIdentifier: number;
    static readonly RULE_typeIdentifierWithGenerics: number;
    static readonly RULE_typeIdentifier: number;
    static readonly RULE_keyword: number;
    static readonly RULE_pathSegment: number;
    static readonly RULE_rmPath: number;
    static readonly RULE_url: number;
    static readonly RULE_numberOrStar: number;
    static readonly RULE_number: number;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    readonly vocabulary: Vocabulary;
    readonly grammarFileName: string;
    readonly ruleNames: string[];
    readonly serializedATN: string;
    constructor(input: TokenStream);
    adl(): AdlContext;
    alphanumeric(): AlphanumericContext;
    archetypeId(): ArchetypeIdContext;
    headerTag(): HeaderTagContext;
    header(): HeaderContext;
    archetypePropertyList(): ArchetypePropertyListContext;
    archetypeProperty(): ArchetypePropertyContext;
    archetypePropertyValue(): ArchetypePropertyValueContext;
    archetypePropertyValuePart(): ArchetypePropertyValuePartContext;
    atCode(): AtCodeContext;
    specializeTag(): SpecializeTagContext;
    specialize(): SpecializeContext;
    language(): LanguageContext;
    description(): DescriptionContext;
    definition(): DefinitionContext;
    typeConstraint(): TypeConstraintContext;
    complexObjectConstraint(): ComplexObjectConstraintContext;
    occurrences(): OccurrencesContext;
    occurrenceRange(): OccurrenceRangeContext;
    attributeListMatcher(): AttributeListMatcherContext;
    orderConstraint(): OrderConstraintContext;
    multiValueConstraint(): MultiValueConstraintContext;
    valueConstraint(): ValueConstraintContext;
    ordinalConstraint(): OrdinalConstraintContext;
    ordinalItemList(): OrdinalItemListContext;
    ordinalItem(): OrdinalItemContext;
    primitiveValueConstraint(): PrimitiveValueConstraintContext;
    terminologyCodeConstraint(): TerminologyCodeConstraintContext;
    archetypeSlotConstraint(): ArchetypeSlotConstraintContext;
    archetypeSlotValueConstraint(): ArchetypeSlotValueConstraintContext;
    archetypeSlotSingleConstraint(): ArchetypeSlotSingleConstraintContext;
    archetypeReferenceConstraint(): ArchetypeReferenceConstraintContext;
    stringConstraint(): StringConstraintContext;
    numberConstraint(): NumberConstraintContext;
    dateTimeConstraint(): DateTimeConstraintContext;
    dateConstraint(): DateConstraintContext;
    timeConstraint(): TimeConstraintContext;
    durationConstraint(): DurationConstraintContext;
    codeIdentifierList(): CodeIdentifierListContext;
    regularExpression(): RegularExpressionContext;
    regularExpressionInner1(): RegularExpressionInner1Context;
    regularExpressionInner2(): RegularExpressionInner2Context;
    attributeConstraint(): AttributeConstraintContext;
    tupleAttributeIdentifier(): TupleAttributeIdentifierContext;
    tupleChildConstraints(): TupleChildConstraintsContext;
    tupleChildConstraint(): TupleChildConstraintContext;
    attributeIdentifier(): AttributeIdentifierContext;
    existence(): ExistenceContext;
    cardinality(): CardinalityContext;
    numberIntervalConstraint(): NumberIntervalConstraintContext;
    dateIntervalConstraint(): DateIntervalConstraintContext;
    timeIntervalConstraint(): TimeIntervalConstraintContext;
    dateTimeIntervalConstraint(): DateTimeIntervalConstraintContext;
    durationIntervalConstraint(): DurationIntervalConstraintContext;
    terminology(): TerminologyContext;
    annotations(): AnnotationsContext;
    odinValue(): OdinValueContext;
    odinObjectValue(): OdinObjectValueContext;
    odinObjectProperty(): OdinObjectPropertyContext;
    odinCodePhraseValueList(): OdinCodePhraseValueListContext;
    odinCodePhraseValue(): OdinCodePhraseValueContext;
    odinMapValue(): OdinMapValueContext;
    odinMapValueEntry(): OdinMapValueEntryContext;
    openStringList(): OpenStringListContext;
    stringList(): StringListContext;
    numberList(): NumberListContext;
    booleanList(): BooleanListContext;
    codeIdentifier(): CodeIdentifierContext;
    codeIdentifierPart(): CodeIdentifierPartContext;
    identifier(): IdentifierContext;
    bool(): BoolContext;
    nameIdentifier(): NameIdentifierContext;
    typeIdentifierWithGenerics(): TypeIdentifierWithGenericsContext;
    typeIdentifier(): TypeIdentifierContext;
    keyword(): KeywordContext;
    pathSegment(): PathSegmentContext;
    rmPath(): RmPathContext;
    url(): UrlContext;
    numberOrStar(): NumberOrStarContext;
    number(): NumberContext;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static readonly _ATN: ATN;
}
export declare class AdlContext extends ParserRuleContext {
    header(): HeaderContext;
    EOF(): TerminalNode;
    specialize(): SpecializeContext | undefined;
    language(): LanguageContext | undefined;
    description(): DescriptionContext | undefined;
    definition(): DefinitionContext | undefined;
    terminology(): TerminologyContext | undefined;
    annotations(): AnnotationsContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class AlphanumericContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    INTEGER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ArchetypeIdContext extends ParserRuleContext {
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    alphanumeric(): AlphanumericContext[];
    alphanumeric(i: number): AlphanumericContext;
    INTEGER(): TerminalNode[];
    INTEGER(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class HeaderTagContext extends ParserRuleContext {
    ARCHETYPE(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    TEMPLATE_OVERLAY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class HeaderContext extends ParserRuleContext {
    headerTag(): HeaderTagContext;
    archetypeId(): ArchetypeIdContext;
    archetypePropertyList(): ArchetypePropertyListContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ArchetypePropertyListContext extends ParserRuleContext {
    archetypeProperty(): ArchetypePropertyContext[];
    archetypeProperty(i: number): ArchetypePropertyContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ArchetypePropertyContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    archetypePropertyValue(): ArchetypePropertyValueContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ArchetypePropertyValueContext extends ParserRuleContext {
    archetypePropertyValuePart(): ArchetypePropertyValuePartContext[];
    archetypePropertyValuePart(i: number): ArchetypePropertyValuePartContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ArchetypePropertyValuePartContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class AtCodeContext extends ParserRuleContext {
    AT_CODE_VALUE(): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class SpecializeTagContext extends ParserRuleContext {
    SPECIALISE(): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class SpecializeContext extends ParserRuleContext {
    specializeTag(): SpecializeTagContext;
    archetypeId(): ArchetypeIdContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class LanguageContext extends ParserRuleContext {
    LANGUAGE(): TerminalNode;
    odinObjectValue(): OdinObjectValueContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class DescriptionContext extends ParserRuleContext {
    DESCRIPTION(): TerminalNode;
    odinObjectValue(): OdinObjectValueContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class DefinitionContext extends ParserRuleContext {
    DEFINITION(): TerminalNode;
    complexObjectConstraint(): ComplexObjectConstraintContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class TypeConstraintContext extends ParserRuleContext {
    complexObjectConstraint(): ComplexObjectConstraintContext | undefined;
    orderConstraint(): OrderConstraintContext | undefined;
    USE_NODE(): TerminalNode | undefined;
    typeIdentifierWithGenerics(): TypeIdentifierWithGenericsContext | undefined;
    rmPath(): RmPathContext | undefined;
    atCode(): AtCodeContext | undefined;
    occurrences(): OccurrencesContext | undefined;
    archetypeSlotConstraint(): ArchetypeSlotConstraintContext | undefined;
    archetypeReferenceConstraint(): ArchetypeReferenceConstraintContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ComplexObjectConstraintContext extends ParserRuleContext {
    typeIdentifierWithGenerics(): TypeIdentifierWithGenericsContext;
    atCode(): AtCodeContext | undefined;
    occurrences(): OccurrencesContext | undefined;
    attributeListMatcher(): AttributeListMatcherContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OccurrencesContext extends ParserRuleContext {
    OCCURRENCES(): TerminalNode;
    MATCHES(): TerminalNode;
    occurrenceRange(): OccurrenceRangeContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OccurrenceRangeContext extends ParserRuleContext {
    _lower: Token;
    _upper: Token;
    _val: Token;
    INTEGER(): TerminalNode[];
    INTEGER(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class AttributeListMatcherContext extends ParserRuleContext {
    MATCHES(): TerminalNode;
    attributeConstraint(): AttributeConstraintContext[];
    attributeConstraint(i: number): AttributeConstraintContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OrderConstraintContext extends ParserRuleContext {
    BEFORE(): TerminalNode | undefined;
    atCode(): AtCodeContext;
    AFTER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class MultiValueConstraintContext extends ParserRuleContext {
    valueConstraint(): ValueConstraintContext[];
    valueConstraint(i: number): ValueConstraintContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ValueConstraintContext extends ParserRuleContext {
    typeConstraint(): TypeConstraintContext | undefined;
    primitiveValueConstraint(): PrimitiveValueConstraintContext | undefined;
    ordinalConstraint(): OrdinalConstraintContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OrdinalConstraintContext extends ParserRuleContext {
    ordinalItemList(): OrdinalItemListContext;
    number(): NumberContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OrdinalItemListContext extends ParserRuleContext {
    ordinalItem(): OrdinalItemContext[];
    ordinalItem(i: number): OrdinalItemContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OrdinalItemContext extends ParserRuleContext {
    number(): NumberContext;
    odinCodePhraseValue(): OdinCodePhraseValueContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class PrimitiveValueConstraintContext extends ParserRuleContext {
    _assumedValue: Token;
    stringConstraint(): StringConstraintContext | undefined;
    STRING(): TerminalNode | undefined;
    numberConstraint(): NumberConstraintContext | undefined;
    number(): NumberContext | undefined;
    booleanList(): BooleanListContext | undefined;
    bool(): BoolContext | undefined;
    dateTimeConstraint(): DateTimeConstraintContext | undefined;
    ISO_DATE_TIME(): TerminalNode | undefined;
    dateConstraint(): DateConstraintContext | undefined;
    ISO_DATE(): TerminalNode | undefined;
    timeConstraint(): TimeConstraintContext | undefined;
    ISO_TIME(): TerminalNode | undefined;
    durationConstraint(): DurationConstraintContext | undefined;
    DURATION(): TerminalNode | undefined;
    terminologyCodeConstraint(): TerminologyCodeConstraintContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class TerminologyCodeConstraintContext extends ParserRuleContext {
    _constraint: Token;
    _assumedValue: Token;
    AT_CODE_VALUE(): TerminalNode[];
    AT_CODE_VALUE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ArchetypeSlotConstraintContext extends ParserRuleContext {
    ALLOW_ARCHETYPE(): TerminalNode;
    typeIdentifierWithGenerics(): TypeIdentifierWithGenericsContext;
    atCode(): AtCodeContext | undefined;
    occurrences(): OccurrencesContext | undefined;
    MATCHES(): TerminalNode | undefined;
    archetypeSlotValueConstraint(): ArchetypeSlotValueConstraintContext | undefined;
    CLOSED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ArchetypeSlotValueConstraintContext extends ParserRuleContext {
    _archetypeSlotSingleConstraint: ArchetypeSlotSingleConstraintContext;
    _include: ArchetypeSlotSingleConstraintContext[];
    _exclude: ArchetypeSlotSingleConstraintContext[];
    INCLUDE(): TerminalNode | undefined;
    EXCLUDE(): TerminalNode | undefined;
    archetypeSlotSingleConstraint(): ArchetypeSlotSingleConstraintContext[];
    archetypeSlotSingleConstraint(i: number): ArchetypeSlotSingleConstraintContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ArchetypeSlotSingleConstraintContext extends ParserRuleContext {
    rmPath(): RmPathContext;
    MATCHES(): TerminalNode;
    primitiveValueConstraint(): PrimitiveValueConstraintContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ArchetypeReferenceConstraintContext extends ParserRuleContext {
    _start: Token;
    typeIdentifier(): TypeIdentifierContext;
    AT_CODE_VALUE(): TerminalNode;
    archetypeId(): ArchetypeIdContext;
    USE_ARCHETYPE(): TerminalNode | undefined;
    USE_TEMPLATE(): TerminalNode | undefined;
    occurrences(): OccurrencesContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class StringConstraintContext extends ParserRuleContext {
    stringList(): StringListContext | undefined;
    regularExpression(): RegularExpressionContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class NumberConstraintContext extends ParserRuleContext {
    numberList(): NumberListContext | undefined;
    numberIntervalConstraint(): NumberIntervalConstraintContext[];
    numberIntervalConstraint(i: number): NumberIntervalConstraintContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class DateTimeConstraintContext extends ParserRuleContext {
    DATE_TIME_PATTERN(): TerminalNode | undefined;
    ISO_DATE_TIME(): TerminalNode | undefined;
    dateTimeIntervalConstraint(): DateTimeIntervalConstraintContext[];
    dateTimeIntervalConstraint(i: number): DateTimeIntervalConstraintContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class DateConstraintContext extends ParserRuleContext {
    DATE_PATTERN(): TerminalNode | undefined;
    ISO_DATE(): TerminalNode | undefined;
    dateIntervalConstraint(): DateIntervalConstraintContext[];
    dateIntervalConstraint(i: number): DateIntervalConstraintContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class TimeConstraintContext extends ParserRuleContext {
    TIME_PATTERN(): TerminalNode | undefined;
    ISO_TIME(): TerminalNode | undefined;
    timeIntervalConstraint(): TimeIntervalConstraintContext[];
    timeIntervalConstraint(i: number): TimeIntervalConstraintContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class DurationConstraintContext extends ParserRuleContext {
    _pattern: Token;
    _singleInterval: Token;
    DURATION(): TerminalNode[];
    DURATION(i: number): TerminalNode;
    durationIntervalConstraint(): DurationIntervalConstraintContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class CodeIdentifierListContext extends ParserRuleContext {
    codeIdentifier(): CodeIdentifierContext[];
    codeIdentifier(i: number): CodeIdentifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class RegularExpressionContext extends ParserRuleContext {
    regularExpressionInner1(): RegularExpressionInner1Context | undefined;
    regularExpressionInner2(): RegularExpressionInner2Context | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class RegularExpressionInner1Context extends ParserRuleContext {
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class RegularExpressionInner2Context extends ParserRuleContext {
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class AttributeConstraintContext extends ParserRuleContext {
    attributeIdentifier(): AttributeIdentifierContext | undefined;
    existence(): ExistenceContext | undefined;
    cardinality(): CardinalityContext | undefined;
    MATCHES(): TerminalNode | undefined;
    multiValueConstraint(): MultiValueConstraintContext | undefined;
    tupleAttributeIdentifier(): TupleAttributeIdentifierContext | undefined;
    tupleChildConstraints(): TupleChildConstraintsContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class TupleAttributeIdentifierContext extends ParserRuleContext {
    attributeIdentifier(): AttributeIdentifierContext[];
    attributeIdentifier(i: number): AttributeIdentifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class TupleChildConstraintsContext extends ParserRuleContext {
    tupleChildConstraint(): TupleChildConstraintContext[];
    tupleChildConstraint(i: number): TupleChildConstraintContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class TupleChildConstraintContext extends ParserRuleContext {
    primitiveValueConstraint(): PrimitiveValueConstraintContext[];
    primitiveValueConstraint(i: number): PrimitiveValueConstraintContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class AttributeIdentifierContext extends ParserRuleContext {
    rmPath(): RmPathContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class ExistenceContext extends ParserRuleContext {
    EXISTENCE(): TerminalNode;
    MATCHES(): TerminalNode;
    occurrenceRange(): OccurrenceRangeContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class CardinalityContext extends ParserRuleContext {
    _ord: Token;
    _uq: Token;
    CARDINALITY(): TerminalNode;
    MATCHES(): TerminalNode;
    occurrenceRange(): OccurrenceRangeContext;
    ORDERED(): TerminalNode | undefined;
    UNORDERED(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class NumberIntervalConstraintContext extends ParserRuleContext {
    _gt: Token;
    _lower: NumberContext;
    _lt: Token;
    _upper: NumberContext;
    _gte: Token;
    _lte: Token;
    _val: NumberContext;
    number(): NumberContext[];
    number(i: number): NumberContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class DateIntervalConstraintContext extends ParserRuleContext {
    _gt: Token;
    _lower: Token;
    _lt: Token;
    _upper: Token;
    _gte: Token;
    _lte: Token;
    _val: Token;
    ISO_DATE(): TerminalNode[];
    ISO_DATE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class TimeIntervalConstraintContext extends ParserRuleContext {
    _gt: Token;
    _lower: Token;
    _lt: Token;
    _upper: Token;
    _gte: Token;
    _lte: Token;
    _val: Token;
    ISO_TIME(): TerminalNode[];
    ISO_TIME(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class DateTimeIntervalConstraintContext extends ParserRuleContext {
    _gt: Token;
    _lower: Token;
    _lt: Token;
    _upper: Token;
    _gte: Token;
    _lte: Token;
    _val: Token;
    ISO_DATE_TIME(): TerminalNode[];
    ISO_DATE_TIME(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class DurationIntervalConstraintContext extends ParserRuleContext {
    _gt: Token;
    _lower: Token;
    _lt: Token;
    _upper: Token;
    _gte: Token;
    _lte: Token;
    _val: Token;
    DURATION(): TerminalNode[];
    DURATION(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class TerminologyContext extends ParserRuleContext {
    TERMINOLOGY(): TerminalNode;
    odinObjectValue(): OdinObjectValueContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class AnnotationsContext extends ParserRuleContext {
    ANNOTATIONS(): TerminalNode;
    odinObjectValue(): OdinObjectValueContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OdinValueContext extends ParserRuleContext {
    odinMapValue(): OdinMapValueContext | undefined;
    odinCodePhraseValueList(): OdinCodePhraseValueListContext | undefined;
    openStringList(): OpenStringListContext | undefined;
    numberIntervalConstraint(): NumberIntervalConstraintContext | undefined;
    typeIdentifier(): TypeIdentifierContext | undefined;
    odinObjectValue(): OdinObjectValueContext | undefined;
    number(): NumberContext | undefined;
    url(): UrlContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OdinObjectValueContext extends ParserRuleContext {
    odinObjectProperty(): OdinObjectPropertyContext[];
    odinObjectProperty(i: number): OdinObjectPropertyContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OdinObjectPropertyContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    odinValue(): OdinValueContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OdinCodePhraseValueListContext extends ParserRuleContext {
    odinCodePhraseValue(): OdinCodePhraseValueContext[];
    odinCodePhraseValue(i: number): OdinCodePhraseValueContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OdinCodePhraseValueContext extends ParserRuleContext {
    _tid: CodeIdentifierContext;
    _code: CodeIdentifierContext;
    codeIdentifier(): CodeIdentifierContext[];
    codeIdentifier(i: number): CodeIdentifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OdinMapValueContext extends ParserRuleContext {
    odinMapValueEntry(): OdinMapValueEntryContext[];
    odinMapValueEntry(i: number): OdinMapValueEntryContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OdinMapValueEntryContext extends ParserRuleContext {
    _key: Token;
    _value: OdinValueContext;
    STRING(): TerminalNode;
    odinValue(): OdinValueContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class OpenStringListContext extends ParserRuleContext {
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class StringListContext extends ParserRuleContext {
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class NumberListContext extends ParserRuleContext {
    number(): NumberContext[];
    number(i: number): NumberContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class BooleanListContext extends ParserRuleContext {
    bool(): BoolContext[];
    bool(i: number): BoolContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class CodeIdentifierContext extends ParserRuleContext {
    codeIdentifierPart(): CodeIdentifierPartContext[];
    codeIdentifierPart(i: number): CodeIdentifierPartContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class CodeIdentifierPartContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    number(): NumberContext | undefined;
    ISO_DATE_TIME(): TerminalNode | undefined;
    ISO_DATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class IdentifierContext extends ParserRuleContext {
    nameIdentifier(): NameIdentifierContext | undefined;
    typeIdentifier(): TypeIdentifierContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class BoolContext extends ParserRuleContext {
    TRUE(): TerminalNode | undefined;
    FALSE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class NameIdentifierContext extends ParserRuleContext {
    NAME_IDENTIFIER(): TerminalNode | undefined;
    keyword(): KeywordContext | undefined;
    AT_CODE_VALUE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class TypeIdentifierWithGenericsContext extends ParserRuleContext {
    _mainType: TypeIdentifierContext;
    _genericType: TypeIdentifierContext;
    typeIdentifier(): TypeIdentifierContext[];
    typeIdentifier(i: number): TypeIdentifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class TypeIdentifierContext extends ParserRuleContext {
    TYPE_IDENTIFIER(): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class KeywordContext extends ParserRuleContext {
    LANGUAGE(): TerminalNode | undefined;
    ARCHETYPE(): TerminalNode | undefined;
    DESCRIPTION(): TerminalNode | undefined;
    CONCEPT(): TerminalNode | undefined;
    TERMINOLOGY(): TerminalNode | undefined;
    DEFINITION(): TerminalNode | undefined;
    MATCHES(): TerminalNode | undefined;
    USE_NODE(): TerminalNode | undefined;
    OCCURRENCES(): TerminalNode | undefined;
    CARDINALITY(): TerminalNode | undefined;
    ORDERED(): TerminalNode | undefined;
    UNORDERED(): TerminalNode | undefined;
    EXISTENCE(): TerminalNode | undefined;
    CLOSED(): TerminalNode | undefined;
    ANNOTATIONS(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    TEMPLATE_OVERLAY(): TerminalNode | undefined;
    SPECIALISE(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class PathSegmentContext extends ParserRuleContext {
    nameIdentifier(): NameIdentifierContext;
    atCode(): AtCodeContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class RmPathContext extends ParserRuleContext {
    pathSegment(): PathSegmentContext[];
    pathSegment(i: number): PathSegmentContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class UrlContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    codeIdentifierPart(): CodeIdentifierPartContext[];
    codeIdentifierPart(i: number): CodeIdentifierPartContext;
    UNICODE_CHAR(): TerminalNode[];
    UNICODE_CHAR(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class NumberOrStarContext extends ParserRuleContext {
    number(): NumberContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
export declare class NumberContext extends ParserRuleContext {
    INTEGER(): TerminalNode[];
    INTEGER(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: AdlListener): void;
    exitRule(listener: AdlListener): void;
}
