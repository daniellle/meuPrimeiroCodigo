"use strict";
// Generated from src/grammar/Adl.g4 by ANTLR 4.6-SNAPSHOT
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ATN_1 = require("antlr4ts/atn/ATN");
var ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
var Decorators_1 = require("antlr4ts/Decorators");
var NoViableAltException_1 = require("antlr4ts/NoViableAltException");
var Decorators_2 = require("antlr4ts/Decorators");
var Parser_1 = require("antlr4ts/Parser");
var ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
var ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
var RecognitionException_1 = require("antlr4ts/RecognitionException");
var RuleVersion_1 = require("antlr4ts/RuleVersion");
var Token_1 = require("antlr4ts/Token");
var VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
var Utils = require("antlr4ts/misc/Utils");
var AdlParser = /** @class */ (function (_super) {
    tslib_1.__extends(AdlParser, _super);
    function AdlParser(input) {
        var _this = _super.call(this, input) || this;
        _this._interp = new ParserATNSimulator_1.ParserATNSimulator(AdlParser._ATN, _this);
        return _this;
    }
    Object.defineProperty(AdlParser.prototype, "vocabulary", {
        get: function () {
            return AdlParser.VOCABULARY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdlParser.prototype, "grammarFileName", {
        get: function () { return "Adl.g4"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdlParser.prototype, "ruleNames", {
        get: function () { return AdlParser.ruleNames; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdlParser.prototype, "serializedATN", {
        get: function () { return AdlParser._serializedATN; },
        enumerable: true,
        configurable: true
    });
    AdlParser.prototype.adl = function () {
        var _localctx = new AdlContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, AdlParser.RULE_adl);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 160;
                this.header();
                this.state = 162;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.SPECIALISE) {
                    {
                        this.state = 161;
                        this.specialize();
                    }
                }
                this.state = 165;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.LANGUAGE) {
                    {
                        this.state = 164;
                        this.language();
                    }
                }
                this.state = 168;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.DESCRIPTION) {
                    {
                        this.state = 167;
                        this.description();
                    }
                }
                this.state = 171;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.DEFINITION) {
                    {
                        this.state = 170;
                        this.definition();
                    }
                }
                this.state = 174;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.TERMINOLOGY) {
                    {
                        this.state = 173;
                        this.terminology();
                    }
                }
                this.state = 177;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.ANNOTATIONS) {
                    {
                        this.state = 176;
                        this.annotations();
                    }
                }
                this.state = 179;
                this.match(AdlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.alphanumeric = function () {
        var _localctx = new AlphanumericContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, AdlParser.RULE_alphanumeric);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 183;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case AdlParser.AT_CODE_VALUE:
                    case AdlParser.LANGUAGE:
                    case AdlParser.ARCHETYPE:
                    case AdlParser.TEMPLATE:
                    case AdlParser.TEMPLATE_OVERLAY:
                    case AdlParser.CONCEPT:
                    case AdlParser.DESCRIPTION:
                    case AdlParser.SPECIALISE:
                    case AdlParser.DEFINITION:
                    case AdlParser.MATCHES:
                    case AdlParser.USE_NODE:
                    case AdlParser.OCCURRENCES:
                    case AdlParser.CARDINALITY:
                    case AdlParser.UNORDERED:
                    case AdlParser.ORDERED:
                    case AdlParser.UNIQUE:
                    case AdlParser.EXISTENCE:
                    case AdlParser.CLOSED:
                    case AdlParser.ANNOTATIONS:
                    case AdlParser.TERMINOLOGY:
                    case AdlParser.TYPE_IDENTIFIER:
                    case AdlParser.NAME_IDENTIFIER:
                        {
                            this.state = 181;
                            this.identifier();
                        }
                        break;
                    case AdlParser.INTEGER:
                        {
                            this.state = 182;
                            this.match(AdlParser.INTEGER);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.archetypeId = function () {
        var _localctx = new ArchetypeIdContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, AdlParser.RULE_archetypeId);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 195;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 8, this._ctx)) {
                    case 1:
                        {
                            this.state = 185;
                            this.identifier();
                            this.state = 190;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === AdlParser.PERIOD) {
                                {
                                    {
                                        this.state = 186;
                                        this.match(AdlParser.PERIOD);
                                        this.state = 187;
                                        this.identifier();
                                    }
                                }
                                this.state = 192;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 193;
                            this.match(AdlParser.T__0);
                        }
                        break;
                }
                this.state = 197;
                this.identifier();
                this.state = 200;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 200;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case AdlParser.MINUS:
                                {
                                    this.state = 198;
                                    this.match(AdlParser.MINUS);
                                }
                                break;
                            case AdlParser.AT_CODE_VALUE:
                            case AdlParser.LANGUAGE:
                            case AdlParser.ARCHETYPE:
                            case AdlParser.TEMPLATE:
                            case AdlParser.TEMPLATE_OVERLAY:
                            case AdlParser.CONCEPT:
                            case AdlParser.DESCRIPTION:
                            case AdlParser.SPECIALISE:
                            case AdlParser.DEFINITION:
                            case AdlParser.MATCHES:
                            case AdlParser.USE_NODE:
                            case AdlParser.OCCURRENCES:
                            case AdlParser.CARDINALITY:
                            case AdlParser.UNORDERED:
                            case AdlParser.ORDERED:
                            case AdlParser.UNIQUE:
                            case AdlParser.EXISTENCE:
                            case AdlParser.CLOSED:
                            case AdlParser.ANNOTATIONS:
                            case AdlParser.TERMINOLOGY:
                            case AdlParser.TYPE_IDENTIFIER:
                            case AdlParser.NAME_IDENTIFIER:
                                {
                                    this.state = 199;
                                    this.identifier();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 202;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === AdlParser.MINUS || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (AdlParser.AT_CODE_VALUE - 34)) | (1 << (AdlParser.LANGUAGE - 34)) | (1 << (AdlParser.ARCHETYPE - 34)) | (1 << (AdlParser.TEMPLATE - 34)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 34)) | (1 << (AdlParser.CONCEPT - 34)) | (1 << (AdlParser.DESCRIPTION - 34)) | (1 << (AdlParser.SPECIALISE - 34)) | (1 << (AdlParser.DEFINITION - 34)) | (1 << (AdlParser.MATCHES - 34)) | (1 << (AdlParser.USE_NODE - 34)) | (1 << (AdlParser.OCCURRENCES - 34)) | (1 << (AdlParser.CARDINALITY - 34)) | (1 << (AdlParser.UNORDERED - 34)) | (1 << (AdlParser.ORDERED - 34)) | (1 << (AdlParser.UNIQUE - 34)) | (1 << (AdlParser.EXISTENCE - 34)) | (1 << (AdlParser.CLOSED - 34)) | (1 << (AdlParser.ANNOTATIONS - 34)) | (1 << (AdlParser.TERMINOLOGY - 34)) | (1 << (AdlParser.TYPE_IDENTIFIER - 34)) | (1 << (AdlParser.NAME_IDENTIFIER - 34)))) !== 0));
                this.state = 204;
                this.match(AdlParser.PERIOD);
                this.state = 207;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 207;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case AdlParser.AT_CODE_VALUE:
                            case AdlParser.LANGUAGE:
                            case AdlParser.ARCHETYPE:
                            case AdlParser.TEMPLATE:
                            case AdlParser.TEMPLATE_OVERLAY:
                            case AdlParser.CONCEPT:
                            case AdlParser.DESCRIPTION:
                            case AdlParser.SPECIALISE:
                            case AdlParser.DEFINITION:
                            case AdlParser.MATCHES:
                            case AdlParser.USE_NODE:
                            case AdlParser.OCCURRENCES:
                            case AdlParser.CARDINALITY:
                            case AdlParser.UNORDERED:
                            case AdlParser.ORDERED:
                            case AdlParser.UNIQUE:
                            case AdlParser.EXISTENCE:
                            case AdlParser.CLOSED:
                            case AdlParser.ANNOTATIONS:
                            case AdlParser.TERMINOLOGY:
                            case AdlParser.TYPE_IDENTIFIER:
                            case AdlParser.NAME_IDENTIFIER:
                            case AdlParser.INTEGER:
                                {
                                    this.state = 205;
                                    this.alphanumeric();
                                }
                                break;
                            case AdlParser.MINUS:
                                {
                                    this.state = 206;
                                    this.match(AdlParser.MINUS);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 209;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === AdlParser.MINUS || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (AdlParser.AT_CODE_VALUE - 34)) | (1 << (AdlParser.LANGUAGE - 34)) | (1 << (AdlParser.ARCHETYPE - 34)) | (1 << (AdlParser.TEMPLATE - 34)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 34)) | (1 << (AdlParser.CONCEPT - 34)) | (1 << (AdlParser.DESCRIPTION - 34)) | (1 << (AdlParser.SPECIALISE - 34)) | (1 << (AdlParser.DEFINITION - 34)) | (1 << (AdlParser.MATCHES - 34)) | (1 << (AdlParser.USE_NODE - 34)) | (1 << (AdlParser.OCCURRENCES - 34)) | (1 << (AdlParser.CARDINALITY - 34)) | (1 << (AdlParser.UNORDERED - 34)) | (1 << (AdlParser.ORDERED - 34)) | (1 << (AdlParser.UNIQUE - 34)) | (1 << (AdlParser.EXISTENCE - 34)) | (1 << (AdlParser.CLOSED - 34)) | (1 << (AdlParser.ANNOTATIONS - 34)) | (1 << (AdlParser.TERMINOLOGY - 34)) | (1 << (AdlParser.TYPE_IDENTIFIER - 34)) | (1 << (AdlParser.NAME_IDENTIFIER - 34)) | (1 << (AdlParser.INTEGER - 34)))) !== 0));
                this.state = 211;
                this.match(AdlParser.PERIOD);
                this.state = 212;
                this.identifier();
                this.state = 217;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === AdlParser.PERIOD) {
                    {
                        {
                            this.state = 213;
                            this.match(AdlParser.PERIOD);
                            this.state = 214;
                            this.match(AdlParser.INTEGER);
                        }
                    }
                    this.state = 219;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 222;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.MINUS) {
                    {
                        this.state = 220;
                        this.match(AdlParser.MINUS);
                        this.state = 221;
                        this.identifier();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.headerTag = function () {
        var _localctx = new HeaderTagContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, AdlParser.RULE_headerTag);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 224;
                _la = this._input.LA(1);
                if (!(((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (AdlParser.ARCHETYPE - 36)) | (1 << (AdlParser.TEMPLATE - 36)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 36)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.header = function () {
        var _localctx = new HeaderContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, AdlParser.RULE_header);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 226;
                this.headerTag();
                this.state = 231;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.PAREN_OPEN) {
                    {
                        this.state = 227;
                        this.match(AdlParser.PAREN_OPEN);
                        this.state = 228;
                        this.archetypePropertyList();
                        this.state = 229;
                        this.match(AdlParser.PAREN_CLOSE);
                    }
                }
                this.state = 233;
                this.archetypeId();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.archetypePropertyList = function () {
        var _localctx = new ArchetypePropertyListContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, AdlParser.RULE_archetypePropertyList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 235;
                this.archetypeProperty();
                this.state = 240;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === AdlParser.SEMICOLON) {
                    {
                        {
                            this.state = 236;
                            this.match(AdlParser.SEMICOLON);
                            this.state = 237;
                            this.archetypeProperty();
                        }
                    }
                    this.state = 242;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.archetypeProperty = function () {
        var _localctx = new ArchetypePropertyContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, AdlParser.RULE_archetypeProperty);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 243;
                this.identifier();
                this.state = 246;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.EQUALS) {
                    {
                        this.state = 244;
                        this.match(AdlParser.EQUALS);
                        this.state = 245;
                        this.archetypePropertyValue();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.archetypePropertyValue = function () {
        var _localctx = new ArchetypePropertyValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, AdlParser.RULE_archetypePropertyValue);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 251;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << AdlParser.T__0) | (1 << AdlParser.T__1) | (1 << AdlParser.T__2) | (1 << AdlParser.T__3) | (1 << AdlParser.T__4) | (1 << AdlParser.RANGE) | (1 << AdlParser.EQUALS) | (1 << AdlParser.PAREN_OPEN) | (1 << AdlParser.BRACKET_OPEN) | (1 << AdlParser.BRACKET_CLOSE) | (1 << AdlParser.GT) | (1 << AdlParser.LT) | (1 << AdlParser.PERIOD) | (1 << AdlParser.COMMA) | (1 << AdlParser.COLON) | (1 << AdlParser.MINUS) | (1 << AdlParser.UNDERSCORE) | (1 << AdlParser.PIPE) | (1 << AdlParser.ASTERISK) | (1 << AdlParser.CARET) | (1 << AdlParser.AMP) | (1 << AdlParser.EXCLAMATION) | (1 << AdlParser.QUESTION) | (1 << AdlParser.OTHER_SYMBOL) | (1 << AdlParser.DATE_TIME_PATTERN) | (1 << AdlParser.TIME_PATTERN) | (1 << AdlParser.DATE_PATTERN) | (1 << AdlParser.DURATION) | (1 << AdlParser.ISO_DATE_TIME))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (AdlParser.ISO_DATE - 32)) | (1 << (AdlParser.ISO_TIME - 32)) | (1 << (AdlParser.AT_CODE_VALUE - 32)) | (1 << (AdlParser.LANGUAGE - 32)) | (1 << (AdlParser.ARCHETYPE - 32)) | (1 << (AdlParser.TEMPLATE - 32)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 32)) | (1 << (AdlParser.CONCEPT - 32)) | (1 << (AdlParser.DESCRIPTION - 32)) | (1 << (AdlParser.SPECIALISE - 32)) | (1 << (AdlParser.DEFINITION - 32)) | (1 << (AdlParser.MATCHES - 32)) | (1 << (AdlParser.USE_NODE - 32)) | (1 << (AdlParser.OCCURRENCES - 32)) | (1 << (AdlParser.INCLUDE - 32)) | (1 << (AdlParser.EXCLUDE - 32)) | (1 << (AdlParser.ALLOW_ARCHETYPE - 32)) | (1 << (AdlParser.CARDINALITY - 32)) | (1 << (AdlParser.UNORDERED - 32)) | (1 << (AdlParser.ORDERED - 32)) | (1 << (AdlParser.UNIQUE - 32)) | (1 << (AdlParser.EXISTENCE - 32)) | (1 << (AdlParser.BEFORE - 32)) | (1 << (AdlParser.AFTER - 32)) | (1 << (AdlParser.USE_ARCHETYPE - 32)) | (1 << (AdlParser.USE_TEMPLATE - 32)) | (1 << (AdlParser.CLOSED - 32)) | (1 << (AdlParser.ANNOTATIONS - 32)) | (1 << (AdlParser.TERMINOLOGY - 32)) | (1 << (AdlParser.TRUE - 32)) | (1 << (AdlParser.FALSE - 32)) | (1 << (AdlParser.TYPE_IDENTIFIER - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (AdlParser.NAME_IDENTIFIER - 64)) | (1 << (AdlParser.INTEGER - 64)) | (1 << (AdlParser.STRING - 64)) | (1 << (AdlParser.UNICODE_CHAR - 64)) | (1 << (AdlParser.LINE_COMMENT - 64)) | (1 << (AdlParser.WS - 64)))) !== 0)) {
                    {
                        {
                            this.state = 248;
                            this.archetypePropertyValuePart();
                        }
                    }
                    this.state = 253;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.archetypePropertyValuePart = function () {
        var _localctx = new ArchetypePropertyValuePartContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, AdlParser.RULE_archetypePropertyValuePart);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 254;
                _la = this._input.LA(1);
                if (_la <= 0 || (_la === AdlParser.PAREN_CLOSE || _la === AdlParser.SEMICOLON)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.atCode = function () {
        var _localctx = new AtCodeContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, AdlParser.RULE_atCode);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 256;
                this.match(AdlParser.BRACKET_OPEN);
                this.state = 257;
                this.match(AdlParser.AT_CODE_VALUE);
                this.state = 258;
                this.match(AdlParser.BRACKET_CLOSE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.specializeTag = function () {
        var _localctx = new SpecializeTagContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, AdlParser.RULE_specializeTag);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 260;
                this.match(AdlParser.SPECIALISE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.specialize = function () {
        var _localctx = new SpecializeContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, AdlParser.RULE_specialize);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 262;
                this.specializeTag();
                this.state = 263;
                this.archetypeId();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.language = function () {
        var _localctx = new LanguageContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, AdlParser.RULE_language);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 265;
                this.match(AdlParser.LANGUAGE);
                this.state = 266;
                this.odinObjectValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.description = function () {
        var _localctx = new DescriptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, AdlParser.RULE_description);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 268;
                this.match(AdlParser.DESCRIPTION);
                this.state = 269;
                this.odinObjectValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.definition = function () {
        var _localctx = new DefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, AdlParser.RULE_definition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 271;
                this.match(AdlParser.DEFINITION);
                this.state = 272;
                this.complexObjectConstraint();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.typeConstraint = function () {
        var _localctx = new TypeConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, AdlParser.RULE_typeConstraint);
        var _la;
        try {
            this.state = 299;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 25, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 275;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.BEFORE || _la === AdlParser.AFTER) {
                            {
                                this.state = 274;
                                this.orderConstraint();
                            }
                        }
                        this.state = 277;
                        this.complexObjectConstraint();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 279;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.BEFORE || _la === AdlParser.AFTER) {
                            {
                                this.state = 278;
                                this.orderConstraint();
                            }
                        }
                        this.state = 281;
                        this.match(AdlParser.USE_NODE);
                        this.state = 282;
                        this.typeIdentifierWithGenerics();
                        this.state = 284;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.BRACKET_OPEN) {
                            {
                                this.state = 283;
                                this.atCode();
                            }
                        }
                        this.state = 287;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 22, this._ctx)) {
                            case 1:
                                {
                                    this.state = 286;
                                    this.occurrences();
                                }
                                break;
                        }
                        this.state = 289;
                        this.rmPath();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 292;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.BEFORE || _la === AdlParser.AFTER) {
                            {
                                this.state = 291;
                                this.orderConstraint();
                            }
                        }
                        this.state = 294;
                        this.archetypeSlotConstraint();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 296;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.BEFORE || _la === AdlParser.AFTER) {
                            {
                                this.state = 295;
                                this.orderConstraint();
                            }
                        }
                        this.state = 298;
                        this.archetypeReferenceConstraint();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.complexObjectConstraint = function () {
        var _localctx = new ComplexObjectConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, AdlParser.RULE_complexObjectConstraint);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 301;
                this.typeIdentifierWithGenerics();
                this.state = 303;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 26, this._ctx)) {
                    case 1:
                        {
                            this.state = 302;
                            this.atCode();
                        }
                        break;
                }
                this.state = 306;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.OCCURRENCES) {
                    {
                        this.state = 305;
                        this.occurrences();
                    }
                }
                this.state = 309;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.MATCHES) {
                    {
                        this.state = 308;
                        this.attributeListMatcher();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.occurrences = function () {
        var _localctx = new OccurrencesContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, AdlParser.RULE_occurrences);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 311;
                this.match(AdlParser.OCCURRENCES);
                this.state = 312;
                this.match(AdlParser.MATCHES);
                this.state = 313;
                this.match(AdlParser.T__1);
                this.state = 314;
                this.occurrenceRange();
                this.state = 315;
                this.match(AdlParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.occurrenceRange = function () {
        var _localctx = new OccurrenceRangeContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, AdlParser.RULE_occurrenceRange);
        try {
            this.state = 324;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 29, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 317;
                        _localctx._lower = this.match(AdlParser.INTEGER);
                        this.state = 318;
                        this.match(AdlParser.RANGE);
                        this.state = 319;
                        _localctx._upper = this.match(AdlParser.INTEGER);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 320;
                        _localctx._lower = this.match(AdlParser.INTEGER);
                        this.state = 321;
                        this.match(AdlParser.RANGE);
                        this.state = 322;
                        this.match(AdlParser.ASTERISK);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 323;
                        _localctx._val = this.match(AdlParser.INTEGER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.attributeListMatcher = function () {
        var _localctx = new AttributeListMatcherContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, AdlParser.RULE_attributeListMatcher);
        var _la;
        try {
            this.state = 339;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 31, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 326;
                        this.match(AdlParser.MATCHES);
                        this.state = 327;
                        this.match(AdlParser.T__1);
                        this.state = 329;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 328;
                                    this.attributeConstraint();
                                }
                            }
                            this.state = 331;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === AdlParser.T__3 || _la === AdlParser.BRACKET_OPEN || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (AdlParser.AT_CODE_VALUE - 34)) | (1 << (AdlParser.LANGUAGE - 34)) | (1 << (AdlParser.ARCHETYPE - 34)) | (1 << (AdlParser.TEMPLATE - 34)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 34)) | (1 << (AdlParser.CONCEPT - 34)) | (1 << (AdlParser.DESCRIPTION - 34)) | (1 << (AdlParser.SPECIALISE - 34)) | (1 << (AdlParser.DEFINITION - 34)) | (1 << (AdlParser.MATCHES - 34)) | (1 << (AdlParser.USE_NODE - 34)) | (1 << (AdlParser.OCCURRENCES - 34)) | (1 << (AdlParser.CARDINALITY - 34)) | (1 << (AdlParser.UNORDERED - 34)) | (1 << (AdlParser.ORDERED - 34)) | (1 << (AdlParser.UNIQUE - 34)) | (1 << (AdlParser.EXISTENCE - 34)) | (1 << (AdlParser.CLOSED - 34)) | (1 << (AdlParser.ANNOTATIONS - 34)) | (1 << (AdlParser.TERMINOLOGY - 34)) | (1 << (AdlParser.NAME_IDENTIFIER - 34)))) !== 0));
                        this.state = 333;
                        this.match(AdlParser.T__2);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 335;
                        this.match(AdlParser.MATCHES);
                        this.state = 336;
                        this.match(AdlParser.T__1);
                        this.state = 337;
                        this.match(AdlParser.ASTERISK);
                        this.state = 338;
                        this.match(AdlParser.T__2);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.orderConstraint = function () {
        var _localctx = new OrderConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, AdlParser.RULE_orderConstraint);
        try {
            this.state = 345;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.BEFORE:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 341;
                        this.match(AdlParser.BEFORE);
                        this.state = 342;
                        this.atCode();
                    }
                    break;
                case AdlParser.AFTER:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 343;
                        this.match(AdlParser.AFTER);
                        this.state = 344;
                        this.atCode();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.multiValueConstraint = function () {
        var _localctx = new MultiValueConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, AdlParser.RULE_multiValueConstraint);
        var _la;
        try {
            this.state = 353;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.ASTERISK:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 347;
                        this.match(AdlParser.ASTERISK);
                    }
                    break;
                case AdlParser.T__3:
                case AdlParser.BRACKET_OPEN:
                case AdlParser.MINUS:
                case AdlParser.PIPE:
                case AdlParser.CARET:
                case AdlParser.DATE_TIME_PATTERN:
                case AdlParser.TIME_PATTERN:
                case AdlParser.DATE_PATTERN:
                case AdlParser.DURATION:
                case AdlParser.ISO_DATE_TIME:
                case AdlParser.ISO_DATE:
                case AdlParser.ISO_TIME:
                case AdlParser.USE_NODE:
                case AdlParser.ALLOW_ARCHETYPE:
                case AdlParser.BEFORE:
                case AdlParser.AFTER:
                case AdlParser.USE_ARCHETYPE:
                case AdlParser.USE_TEMPLATE:
                case AdlParser.TRUE:
                case AdlParser.FALSE:
                case AdlParser.TYPE_IDENTIFIER:
                case AdlParser.INTEGER:
                case AdlParser.STRING:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 349;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 348;
                                    this.valueConstraint();
                                }
                            }
                            this.state = 351;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (((((_la - 4)) & ~0x1F) === 0 && ((1 << (_la - 4)) & ((1 << (AdlParser.T__3 - 4)) | (1 << (AdlParser.BRACKET_OPEN - 4)) | (1 << (AdlParser.MINUS - 4)) | (1 << (AdlParser.PIPE - 4)) | (1 << (AdlParser.CARET - 4)) | (1 << (AdlParser.DATE_TIME_PATTERN - 4)) | (1 << (AdlParser.TIME_PATTERN - 4)) | (1 << (AdlParser.DATE_PATTERN - 4)) | (1 << (AdlParser.DURATION - 4)) | (1 << (AdlParser.ISO_DATE_TIME - 4)) | (1 << (AdlParser.ISO_DATE - 4)) | (1 << (AdlParser.ISO_TIME - 4)))) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & ((1 << (AdlParser.USE_NODE - 44)) | (1 << (AdlParser.ALLOW_ARCHETYPE - 44)) | (1 << (AdlParser.BEFORE - 44)) | (1 << (AdlParser.AFTER - 44)) | (1 << (AdlParser.USE_ARCHETYPE - 44)) | (1 << (AdlParser.USE_TEMPLATE - 44)) | (1 << (AdlParser.TRUE - 44)) | (1 << (AdlParser.FALSE - 44)) | (1 << (AdlParser.TYPE_IDENTIFIER - 44)) | (1 << (AdlParser.INTEGER - 44)) | (1 << (AdlParser.STRING - 44)))) !== 0));
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.valueConstraint = function () {
        var _localctx = new ValueConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, AdlParser.RULE_valueConstraint);
        try {
            this.state = 358;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 35, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 355;
                        this.typeConstraint();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 356;
                        this.primitiveValueConstraint();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 357;
                        this.ordinalConstraint();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.ordinalConstraint = function () {
        var _localctx = new OrdinalConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, AdlParser.RULE_ordinalConstraint);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 360;
                this.ordinalItemList();
                this.state = 363;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.SEMICOLON) {
                    {
                        this.state = 361;
                        this.match(AdlParser.SEMICOLON);
                        this.state = 362;
                        this.number();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.ordinalItemList = function () {
        var _localctx = new OrdinalItemListContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, AdlParser.RULE_ordinalItemList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 365;
                this.ordinalItem();
                this.state = 370;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === AdlParser.COMMA) {
                    {
                        {
                            this.state = 366;
                            this.match(AdlParser.COMMA);
                            this.state = 367;
                            this.ordinalItem();
                        }
                    }
                    this.state = 372;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.ordinalItem = function () {
        var _localctx = new OrdinalItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, AdlParser.RULE_ordinalItem);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 373;
                this.number();
                this.state = 374;
                this.match(AdlParser.PIPE);
                this.state = 375;
                this.odinCodePhraseValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.primitiveValueConstraint = function () {
        var _localctx = new PrimitiveValueConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, AdlParser.RULE_primitiveValueConstraint);
        var _la;
        try {
            this.state = 413;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 45, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 377;
                        this.stringConstraint();
                        this.state = 380;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.SEMICOLON) {
                            {
                                this.state = 378;
                                this.match(AdlParser.SEMICOLON);
                                this.state = 379;
                                _localctx._assumedValue = this.match(AdlParser.STRING);
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 382;
                        this.numberConstraint();
                        this.state = 385;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.SEMICOLON) {
                            {
                                this.state = 383;
                                this.match(AdlParser.SEMICOLON);
                                this.state = 384;
                                this.number();
                            }
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 387;
                        this.booleanList();
                        this.state = 390;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.SEMICOLON) {
                            {
                                this.state = 388;
                                this.match(AdlParser.SEMICOLON);
                                this.state = 389;
                                this.bool();
                            }
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 392;
                        this.dateTimeConstraint();
                        this.state = 395;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.SEMICOLON) {
                            {
                                this.state = 393;
                                this.match(AdlParser.SEMICOLON);
                                this.state = 394;
                                this.match(AdlParser.ISO_DATE_TIME);
                            }
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 397;
                        this.dateConstraint();
                        this.state = 400;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.SEMICOLON) {
                            {
                                this.state = 398;
                                this.match(AdlParser.SEMICOLON);
                                this.state = 399;
                                this.match(AdlParser.ISO_DATE);
                            }
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 402;
                        this.timeConstraint();
                        this.state = 405;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.SEMICOLON) {
                            {
                                this.state = 403;
                                this.match(AdlParser.SEMICOLON);
                                this.state = 404;
                                this.match(AdlParser.ISO_TIME);
                            }
                        }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 407;
                        this.durationConstraint();
                        this.state = 410;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.SEMICOLON) {
                            {
                                this.state = 408;
                                this.match(AdlParser.SEMICOLON);
                                this.state = 409;
                                this.match(AdlParser.DURATION);
                            }
                        }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 412;
                        this.terminologyCodeConstraint();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.terminologyCodeConstraint = function () {
        var _localctx = new TerminologyCodeConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, AdlParser.RULE_terminologyCodeConstraint);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 415;
                this.match(AdlParser.BRACKET_OPEN);
                this.state = 416;
                _localctx._constraint = this.match(AdlParser.AT_CODE_VALUE);
                this.state = 419;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.SEMICOLON) {
                    {
                        this.state = 417;
                        this.match(AdlParser.SEMICOLON);
                        this.state = 418;
                        _localctx._assumedValue = this.match(AdlParser.AT_CODE_VALUE);
                    }
                }
                this.state = 421;
                this.match(AdlParser.BRACKET_CLOSE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.archetypeSlotConstraint = function () {
        var _localctx = new ArchetypeSlotConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, AdlParser.RULE_archetypeSlotConstraint);
        var _la;
        try {
            this.state = 445;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 51, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 423;
                        this.match(AdlParser.ALLOW_ARCHETYPE);
                        this.state = 424;
                        this.typeIdentifierWithGenerics();
                        this.state = 426;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 47, this._ctx)) {
                            case 1:
                                {
                                    this.state = 425;
                                    this.atCode();
                                }
                                break;
                        }
                        this.state = 429;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.OCCURRENCES) {
                            {
                                this.state = 428;
                                this.occurrences();
                            }
                        }
                        this.state = 436;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.MATCHES) {
                            {
                                this.state = 431;
                                this.match(AdlParser.MATCHES);
                                this.state = 432;
                                this.match(AdlParser.T__1);
                                this.state = 433;
                                this.archetypeSlotValueConstraint();
                                this.state = 434;
                                this.match(AdlParser.T__2);
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 438;
                        this.match(AdlParser.ALLOW_ARCHETYPE);
                        this.state = 439;
                        this.typeIdentifierWithGenerics();
                        this.state = 441;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.BRACKET_OPEN) {
                            {
                                this.state = 440;
                                this.atCode();
                            }
                        }
                        this.state = 443;
                        this.match(AdlParser.CLOSED);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.archetypeSlotValueConstraint = function () {
        var _localctx = new ArchetypeSlotValueConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, AdlParser.RULE_archetypeSlotValueConstraint);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 454;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.INCLUDE) {
                    {
                        this.state = 447;
                        this.match(AdlParser.INCLUDE);
                        this.state = 451;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === AdlParser.T__3 || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (AdlParser.AT_CODE_VALUE - 34)) | (1 << (AdlParser.LANGUAGE - 34)) | (1 << (AdlParser.ARCHETYPE - 34)) | (1 << (AdlParser.TEMPLATE - 34)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 34)) | (1 << (AdlParser.CONCEPT - 34)) | (1 << (AdlParser.DESCRIPTION - 34)) | (1 << (AdlParser.SPECIALISE - 34)) | (1 << (AdlParser.DEFINITION - 34)) | (1 << (AdlParser.MATCHES - 34)) | (1 << (AdlParser.USE_NODE - 34)) | (1 << (AdlParser.OCCURRENCES - 34)) | (1 << (AdlParser.CARDINALITY - 34)) | (1 << (AdlParser.UNORDERED - 34)) | (1 << (AdlParser.ORDERED - 34)) | (1 << (AdlParser.UNIQUE - 34)) | (1 << (AdlParser.EXISTENCE - 34)) | (1 << (AdlParser.CLOSED - 34)) | (1 << (AdlParser.ANNOTATIONS - 34)) | (1 << (AdlParser.TERMINOLOGY - 34)) | (1 << (AdlParser.NAME_IDENTIFIER - 34)))) !== 0)) {
                            {
                                {
                                    this.state = 448;
                                    _localctx._archetypeSlotSingleConstraint = this.archetypeSlotSingleConstraint();
                                    _localctx._include.push(_localctx._archetypeSlotSingleConstraint);
                                }
                            }
                            this.state = 453;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
                this.state = 463;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.EXCLUDE) {
                    {
                        this.state = 456;
                        this.match(AdlParser.EXCLUDE);
                        this.state = 460;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === AdlParser.T__3 || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (AdlParser.AT_CODE_VALUE - 34)) | (1 << (AdlParser.LANGUAGE - 34)) | (1 << (AdlParser.ARCHETYPE - 34)) | (1 << (AdlParser.TEMPLATE - 34)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 34)) | (1 << (AdlParser.CONCEPT - 34)) | (1 << (AdlParser.DESCRIPTION - 34)) | (1 << (AdlParser.SPECIALISE - 34)) | (1 << (AdlParser.DEFINITION - 34)) | (1 << (AdlParser.MATCHES - 34)) | (1 << (AdlParser.USE_NODE - 34)) | (1 << (AdlParser.OCCURRENCES - 34)) | (1 << (AdlParser.CARDINALITY - 34)) | (1 << (AdlParser.UNORDERED - 34)) | (1 << (AdlParser.ORDERED - 34)) | (1 << (AdlParser.UNIQUE - 34)) | (1 << (AdlParser.EXISTENCE - 34)) | (1 << (AdlParser.CLOSED - 34)) | (1 << (AdlParser.ANNOTATIONS - 34)) | (1 << (AdlParser.TERMINOLOGY - 34)) | (1 << (AdlParser.NAME_IDENTIFIER - 34)))) !== 0)) {
                            {
                                {
                                    this.state = 457;
                                    _localctx._archetypeSlotSingleConstraint = this.archetypeSlotSingleConstraint();
                                    _localctx._exclude.push(_localctx._archetypeSlotSingleConstraint);
                                }
                            }
                            this.state = 462;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.archetypeSlotSingleConstraint = function () {
        var _localctx = new ArchetypeSlotSingleConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, AdlParser.RULE_archetypeSlotSingleConstraint);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 465;
                this.rmPath();
                this.state = 466;
                this.match(AdlParser.MATCHES);
                this.state = 467;
                this.match(AdlParser.T__1);
                this.state = 468;
                this.primitiveValueConstraint();
                this.state = 469;
                this.match(AdlParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.archetypeReferenceConstraint = function () {
        var _localctx = new ArchetypeReferenceConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, AdlParser.RULE_archetypeReferenceConstraint);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 473;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case AdlParser.USE_ARCHETYPE:
                        {
                            this.state = 471;
                            _localctx._start = this.match(AdlParser.USE_ARCHETYPE);
                        }
                        break;
                    case AdlParser.USE_TEMPLATE:
                        {
                            this.state = 472;
                            _localctx._start = this.match(AdlParser.USE_TEMPLATE);
                        }
                        break;
                    default:
                        throw new NoViableAltException_1.NoViableAltException(this);
                }
                this.state = 475;
                this.typeIdentifier();
                this.state = 476;
                this.match(AdlParser.BRACKET_OPEN);
                this.state = 477;
                this.match(AdlParser.AT_CODE_VALUE);
                this.state = 478;
                this.match(AdlParser.COMMA);
                this.state = 479;
                this.archetypeId();
                this.state = 480;
                this.match(AdlParser.BRACKET_CLOSE);
                this.state = 482;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.OCCURRENCES) {
                    {
                        this.state = 481;
                        this.occurrences();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.stringConstraint = function () {
        var _localctx = new StringConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, AdlParser.RULE_stringConstraint);
        try {
            this.state = 486;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.STRING:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 484;
                        this.stringList();
                    }
                    break;
                case AdlParser.T__3:
                case AdlParser.CARET:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 485;
                        this.regularExpression();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.numberConstraint = function () {
        var _localctx = new NumberConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, AdlParser.RULE_numberConstraint);
        var _la;
        try {
            this.state = 497;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.MINUS:
                case AdlParser.INTEGER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 488;
                        this.numberList();
                    }
                    break;
                case AdlParser.PIPE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 489;
                        this.numberIntervalConstraint();
                        this.state = 494;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === AdlParser.COMMA) {
                            {
                                {
                                    this.state = 490;
                                    this.match(AdlParser.COMMA);
                                    this.state = 491;
                                    this.numberIntervalConstraint();
                                }
                            }
                            this.state = 496;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.dateTimeConstraint = function () {
        var _localctx = new DateTimeConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, AdlParser.RULE_dateTimeConstraint);
        var _la;
        try {
            this.state = 509;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.DATE_TIME_PATTERN:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 499;
                        this.match(AdlParser.DATE_TIME_PATTERN);
                    }
                    break;
                case AdlParser.ISO_DATE_TIME:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 500;
                        this.match(AdlParser.ISO_DATE_TIME);
                    }
                    break;
                case AdlParser.PIPE:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 501;
                        this.dateTimeIntervalConstraint();
                        this.state = 506;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === AdlParser.COMMA) {
                            {
                                {
                                    this.state = 502;
                                    this.match(AdlParser.COMMA);
                                    this.state = 503;
                                    this.dateTimeIntervalConstraint();
                                }
                            }
                            this.state = 508;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.dateConstraint = function () {
        var _localctx = new DateConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, AdlParser.RULE_dateConstraint);
        var _la;
        try {
            this.state = 521;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.DATE_PATTERN:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 511;
                        this.match(AdlParser.DATE_PATTERN);
                    }
                    break;
                case AdlParser.ISO_DATE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 512;
                        this.match(AdlParser.ISO_DATE);
                    }
                    break;
                case AdlParser.PIPE:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 513;
                        this.dateIntervalConstraint();
                        this.state = 518;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === AdlParser.COMMA) {
                            {
                                {
                                    this.state = 514;
                                    this.match(AdlParser.COMMA);
                                    this.state = 515;
                                    this.dateIntervalConstraint();
                                }
                            }
                            this.state = 520;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.timeConstraint = function () {
        var _localctx = new TimeConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, AdlParser.RULE_timeConstraint);
        var _la;
        try {
            this.state = 533;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.TIME_PATTERN:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 523;
                        this.match(AdlParser.TIME_PATTERN);
                    }
                    break;
                case AdlParser.ISO_TIME:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 524;
                        this.match(AdlParser.ISO_TIME);
                    }
                    break;
                case AdlParser.PIPE:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 525;
                        this.timeIntervalConstraint();
                        this.state = 530;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === AdlParser.COMMA) {
                            {
                                {
                                    this.state = 526;
                                    this.match(AdlParser.COMMA);
                                    this.state = 527;
                                    this.timeIntervalConstraint();
                                }
                            }
                            this.state = 532;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.durationConstraint = function () {
        var _localctx = new DurationConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, AdlParser.RULE_durationConstraint);
        try {
            this.state = 544;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.DURATION:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        {
                            this.state = 535;
                            _localctx._pattern = this.match(AdlParser.DURATION);
                        }
                        this.state = 541;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 68, this._ctx)) {
                            case 1:
                                {
                                    this.state = 536;
                                    this.match(AdlParser.T__3);
                                    this.state = 539;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case AdlParser.PIPE:
                                            {
                                                this.state = 537;
                                                this.durationIntervalConstraint();
                                            }
                                            break;
                                        case AdlParser.DURATION:
                                            {
                                                this.state = 538;
                                                _localctx._singleInterval = this.match(AdlParser.DURATION);
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case AdlParser.PIPE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 543;
                        this.durationIntervalConstraint();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.codeIdentifierList = function () {
        var _localctx = new CodeIdentifierListContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, AdlParser.RULE_codeIdentifierList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 547;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 4)) & ~0x1F) === 0 && ((1 << (_la - 4)) & ((1 << (AdlParser.T__3 - 4)) | (1 << (AdlParser.PAREN_OPEN - 4)) | (1 << (AdlParser.PAREN_CLOSE - 4)) | (1 << (AdlParser.PERIOD - 4)) | (1 << (AdlParser.COLON - 4)) | (1 << (AdlParser.MINUS - 4)) | (1 << (AdlParser.ISO_DATE_TIME - 4)) | (1 << (AdlParser.ISO_DATE - 4)) | (1 << (AdlParser.AT_CODE_VALUE - 4)) | (1 << (AdlParser.LANGUAGE - 4)))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (AdlParser.ARCHETYPE - 36)) | (1 << (AdlParser.TEMPLATE - 36)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 36)) | (1 << (AdlParser.CONCEPT - 36)) | (1 << (AdlParser.DESCRIPTION - 36)) | (1 << (AdlParser.SPECIALISE - 36)) | (1 << (AdlParser.DEFINITION - 36)) | (1 << (AdlParser.MATCHES - 36)) | (1 << (AdlParser.USE_NODE - 36)) | (1 << (AdlParser.OCCURRENCES - 36)) | (1 << (AdlParser.CARDINALITY - 36)) | (1 << (AdlParser.UNORDERED - 36)) | (1 << (AdlParser.ORDERED - 36)) | (1 << (AdlParser.UNIQUE - 36)) | (1 << (AdlParser.EXISTENCE - 36)) | (1 << (AdlParser.CLOSED - 36)) | (1 << (AdlParser.ANNOTATIONS - 36)) | (1 << (AdlParser.TERMINOLOGY - 36)) | (1 << (AdlParser.TYPE_IDENTIFIER - 36)) | (1 << (AdlParser.NAME_IDENTIFIER - 36)) | (1 << (AdlParser.INTEGER - 36)))) !== 0)) {
                    {
                        this.state = 546;
                        this.codeIdentifier();
                    }
                }
                this.state = 553;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === AdlParser.COMMA) {
                    {
                        {
                            this.state = 549;
                            this.match(AdlParser.COMMA);
                            this.state = 550;
                            this.codeIdentifier();
                        }
                    }
                    this.state = 555;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.regularExpression = function () {
        var _localctx = new RegularExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, AdlParser.RULE_regularExpression);
        try {
            this.state = 564;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.T__3:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 556;
                        this.match(AdlParser.T__3);
                        this.state = 557;
                        this.regularExpressionInner1();
                        this.state = 558;
                        this.match(AdlParser.T__3);
                    }
                    break;
                case AdlParser.CARET:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 560;
                        this.match(AdlParser.CARET);
                        this.state = 561;
                        this.regularExpressionInner2();
                        this.state = 562;
                        this.match(AdlParser.CARET);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.regularExpressionInner1 = function () {
        var _localctx = new RegularExpressionInner1Context(this._ctx, this.state);
        this.enterRule(_localctx, 80, AdlParser.RULE_regularExpressionInner1);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 569;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << AdlParser.T__0) | (1 << AdlParser.T__1) | (1 << AdlParser.T__2) | (1 << AdlParser.T__4) | (1 << AdlParser.RANGE) | (1 << AdlParser.EQUALS) | (1 << AdlParser.PAREN_OPEN) | (1 << AdlParser.PAREN_CLOSE) | (1 << AdlParser.BRACKET_OPEN) | (1 << AdlParser.BRACKET_CLOSE) | (1 << AdlParser.GT) | (1 << AdlParser.LT) | (1 << AdlParser.PERIOD) | (1 << AdlParser.COMMA) | (1 << AdlParser.COLON) | (1 << AdlParser.SEMICOLON) | (1 << AdlParser.MINUS) | (1 << AdlParser.UNDERSCORE) | (1 << AdlParser.PIPE) | (1 << AdlParser.ASTERISK) | (1 << AdlParser.CARET) | (1 << AdlParser.AMP) | (1 << AdlParser.EXCLAMATION) | (1 << AdlParser.QUESTION) | (1 << AdlParser.OTHER_SYMBOL) | (1 << AdlParser.DATE_TIME_PATTERN) | (1 << AdlParser.TIME_PATTERN) | (1 << AdlParser.DATE_PATTERN) | (1 << AdlParser.DURATION) | (1 << AdlParser.ISO_DATE_TIME))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (AdlParser.ISO_DATE - 32)) | (1 << (AdlParser.ISO_TIME - 32)) | (1 << (AdlParser.AT_CODE_VALUE - 32)) | (1 << (AdlParser.LANGUAGE - 32)) | (1 << (AdlParser.ARCHETYPE - 32)) | (1 << (AdlParser.TEMPLATE - 32)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 32)) | (1 << (AdlParser.CONCEPT - 32)) | (1 << (AdlParser.DESCRIPTION - 32)) | (1 << (AdlParser.SPECIALISE - 32)) | (1 << (AdlParser.DEFINITION - 32)) | (1 << (AdlParser.MATCHES - 32)) | (1 << (AdlParser.USE_NODE - 32)) | (1 << (AdlParser.OCCURRENCES - 32)) | (1 << (AdlParser.INCLUDE - 32)) | (1 << (AdlParser.EXCLUDE - 32)) | (1 << (AdlParser.ALLOW_ARCHETYPE - 32)) | (1 << (AdlParser.CARDINALITY - 32)) | (1 << (AdlParser.UNORDERED - 32)) | (1 << (AdlParser.ORDERED - 32)) | (1 << (AdlParser.UNIQUE - 32)) | (1 << (AdlParser.EXISTENCE - 32)) | (1 << (AdlParser.BEFORE - 32)) | (1 << (AdlParser.AFTER - 32)) | (1 << (AdlParser.USE_ARCHETYPE - 32)) | (1 << (AdlParser.USE_TEMPLATE - 32)) | (1 << (AdlParser.CLOSED - 32)) | (1 << (AdlParser.ANNOTATIONS - 32)) | (1 << (AdlParser.TERMINOLOGY - 32)) | (1 << (AdlParser.TRUE - 32)) | (1 << (AdlParser.FALSE - 32)) | (1 << (AdlParser.TYPE_IDENTIFIER - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (AdlParser.NAME_IDENTIFIER - 64)) | (1 << (AdlParser.INTEGER - 64)) | (1 << (AdlParser.STRING - 64)) | (1 << (AdlParser.UNICODE_CHAR - 64)) | (1 << (AdlParser.LINE_COMMENT - 64)) | (1 << (AdlParser.WS - 64)))) !== 0)) {
                    {
                        {
                            this.state = 566;
                            _la = this._input.LA(1);
                            if (_la <= 0 || (_la === AdlParser.T__3)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    this.state = 571;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.regularExpressionInner2 = function () {
        var _localctx = new RegularExpressionInner2Context(this._ctx, this.state);
        this.enterRule(_localctx, 82, AdlParser.RULE_regularExpressionInner2);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 575;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << AdlParser.T__0) | (1 << AdlParser.T__1) | (1 << AdlParser.T__2) | (1 << AdlParser.T__3) | (1 << AdlParser.T__4) | (1 << AdlParser.RANGE) | (1 << AdlParser.EQUALS) | (1 << AdlParser.PAREN_OPEN) | (1 << AdlParser.PAREN_CLOSE) | (1 << AdlParser.BRACKET_OPEN) | (1 << AdlParser.BRACKET_CLOSE) | (1 << AdlParser.GT) | (1 << AdlParser.LT) | (1 << AdlParser.PERIOD) | (1 << AdlParser.COMMA) | (1 << AdlParser.COLON) | (1 << AdlParser.SEMICOLON) | (1 << AdlParser.MINUS) | (1 << AdlParser.UNDERSCORE) | (1 << AdlParser.PIPE) | (1 << AdlParser.ASTERISK) | (1 << AdlParser.AMP) | (1 << AdlParser.EXCLAMATION) | (1 << AdlParser.QUESTION) | (1 << AdlParser.OTHER_SYMBOL) | (1 << AdlParser.DATE_TIME_PATTERN) | (1 << AdlParser.TIME_PATTERN) | (1 << AdlParser.DATE_PATTERN) | (1 << AdlParser.DURATION) | (1 << AdlParser.ISO_DATE_TIME))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (AdlParser.ISO_DATE - 32)) | (1 << (AdlParser.ISO_TIME - 32)) | (1 << (AdlParser.AT_CODE_VALUE - 32)) | (1 << (AdlParser.LANGUAGE - 32)) | (1 << (AdlParser.ARCHETYPE - 32)) | (1 << (AdlParser.TEMPLATE - 32)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 32)) | (1 << (AdlParser.CONCEPT - 32)) | (1 << (AdlParser.DESCRIPTION - 32)) | (1 << (AdlParser.SPECIALISE - 32)) | (1 << (AdlParser.DEFINITION - 32)) | (1 << (AdlParser.MATCHES - 32)) | (1 << (AdlParser.USE_NODE - 32)) | (1 << (AdlParser.OCCURRENCES - 32)) | (1 << (AdlParser.INCLUDE - 32)) | (1 << (AdlParser.EXCLUDE - 32)) | (1 << (AdlParser.ALLOW_ARCHETYPE - 32)) | (1 << (AdlParser.CARDINALITY - 32)) | (1 << (AdlParser.UNORDERED - 32)) | (1 << (AdlParser.ORDERED - 32)) | (1 << (AdlParser.UNIQUE - 32)) | (1 << (AdlParser.EXISTENCE - 32)) | (1 << (AdlParser.BEFORE - 32)) | (1 << (AdlParser.AFTER - 32)) | (1 << (AdlParser.USE_ARCHETYPE - 32)) | (1 << (AdlParser.USE_TEMPLATE - 32)) | (1 << (AdlParser.CLOSED - 32)) | (1 << (AdlParser.ANNOTATIONS - 32)) | (1 << (AdlParser.TERMINOLOGY - 32)) | (1 << (AdlParser.TRUE - 32)) | (1 << (AdlParser.FALSE - 32)) | (1 << (AdlParser.TYPE_IDENTIFIER - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (AdlParser.NAME_IDENTIFIER - 64)) | (1 << (AdlParser.INTEGER - 64)) | (1 << (AdlParser.STRING - 64)) | (1 << (AdlParser.UNICODE_CHAR - 64)) | (1 << (AdlParser.LINE_COMMENT - 64)) | (1 << (AdlParser.WS - 64)))) !== 0)) {
                    {
                        {
                            this.state = 572;
                            _la = this._input.LA(1);
                            if (_la <= 0 || (_la === AdlParser.CARET)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    this.state = 577;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.attributeConstraint = function () {
        var _localctx = new AttributeConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, AdlParser.RULE_attributeConstraint);
        var _la;
        try {
            this.state = 601;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.T__3:
                case AdlParser.AT_CODE_VALUE:
                case AdlParser.LANGUAGE:
                case AdlParser.ARCHETYPE:
                case AdlParser.TEMPLATE:
                case AdlParser.TEMPLATE_OVERLAY:
                case AdlParser.CONCEPT:
                case AdlParser.DESCRIPTION:
                case AdlParser.SPECIALISE:
                case AdlParser.DEFINITION:
                case AdlParser.MATCHES:
                case AdlParser.USE_NODE:
                case AdlParser.OCCURRENCES:
                case AdlParser.CARDINALITY:
                case AdlParser.UNORDERED:
                case AdlParser.ORDERED:
                case AdlParser.UNIQUE:
                case AdlParser.EXISTENCE:
                case AdlParser.CLOSED:
                case AdlParser.ANNOTATIONS:
                case AdlParser.TERMINOLOGY:
                case AdlParser.NAME_IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 578;
                        this.attributeIdentifier();
                        this.state = 580;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 75, this._ctx)) {
                            case 1:
                                {
                                    this.state = 579;
                                    this.existence();
                                }
                                break;
                        }
                        this.state = 583;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 76, this._ctx)) {
                            case 1:
                                {
                                    this.state = 582;
                                    this.cardinality();
                                }
                                break;
                        }
                        this.state = 590;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 77, this._ctx)) {
                            case 1:
                                {
                                    this.state = 585;
                                    this.match(AdlParser.MATCHES);
                                    this.state = 586;
                                    this.match(AdlParser.T__1);
                                    this.state = 587;
                                    this.multiValueConstraint();
                                    this.state = 588;
                                    this.match(AdlParser.T__2);
                                }
                                break;
                        }
                    }
                    break;
                case AdlParser.BRACKET_OPEN:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 592;
                        this.tupleAttributeIdentifier();
                        this.state = 594;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.EXISTENCE) {
                            {
                                this.state = 593;
                                this.existence();
                            }
                        }
                        this.state = 596;
                        this.match(AdlParser.MATCHES);
                        this.state = 597;
                        this.match(AdlParser.T__1);
                        this.state = 598;
                        this.tupleChildConstraints();
                        this.state = 599;
                        this.match(AdlParser.T__2);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.tupleAttributeIdentifier = function () {
        var _localctx = new TupleAttributeIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, AdlParser.RULE_tupleAttributeIdentifier);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 603;
                this.match(AdlParser.BRACKET_OPEN);
                this.state = 604;
                this.attributeIdentifier();
                this.state = 609;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === AdlParser.COMMA) {
                    {
                        {
                            this.state = 605;
                            this.match(AdlParser.COMMA);
                            this.state = 606;
                            this.attributeIdentifier();
                        }
                    }
                    this.state = 611;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 612;
                this.match(AdlParser.BRACKET_CLOSE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.tupleChildConstraints = function () {
        var _localctx = new TupleChildConstraintsContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, AdlParser.RULE_tupleChildConstraints);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 614;
                this.tupleChildConstraint();
                this.state = 619;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === AdlParser.COMMA) {
                    {
                        {
                            this.state = 615;
                            this.match(AdlParser.COMMA);
                            this.state = 616;
                            this.tupleChildConstraint();
                        }
                    }
                    this.state = 621;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.tupleChildConstraint = function () {
        var _localctx = new TupleChildConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, AdlParser.RULE_tupleChildConstraint);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 622;
                this.match(AdlParser.BRACKET_OPEN);
                this.state = 623;
                this.match(AdlParser.T__1);
                this.state = 624;
                this.primitiveValueConstraint();
                this.state = 625;
                this.match(AdlParser.T__2);
                this.state = 633;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === AdlParser.COMMA) {
                    {
                        {
                            this.state = 626;
                            this.match(AdlParser.COMMA);
                            this.state = 627;
                            this.match(AdlParser.T__1);
                            this.state = 628;
                            this.primitiveValueConstraint();
                            this.state = 629;
                            this.match(AdlParser.T__2);
                        }
                    }
                    this.state = 635;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 636;
                this.match(AdlParser.BRACKET_CLOSE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.attributeIdentifier = function () {
        var _localctx = new AttributeIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, AdlParser.RULE_attributeIdentifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 638;
                this.rmPath();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.existence = function () {
        var _localctx = new ExistenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, AdlParser.RULE_existence);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 640;
                this.match(AdlParser.EXISTENCE);
                this.state = 641;
                this.match(AdlParser.MATCHES);
                this.state = 642;
                this.match(AdlParser.T__1);
                this.state = 643;
                this.occurrenceRange();
                this.state = 644;
                this.match(AdlParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.cardinality = function () {
        var _localctx = new CardinalityContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, AdlParser.RULE_cardinality);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 646;
                this.match(AdlParser.CARDINALITY);
                this.state = 647;
                this.match(AdlParser.MATCHES);
                this.state = 648;
                this.match(AdlParser.T__1);
                this.state = 649;
                this.occurrenceRange();
                this.state = 655;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 84, this._ctx)) {
                    case 1:
                        {
                            this.state = 650;
                            this.match(AdlParser.SEMICOLON);
                            this.state = 653;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case AdlParser.ORDERED:
                                    {
                                        this.state = 651;
                                        _localctx._ord = this.match(AdlParser.ORDERED);
                                    }
                                    break;
                                case AdlParser.UNORDERED:
                                    {
                                        this.state = 652;
                                        _localctx._ord = this.match(AdlParser.UNORDERED);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                        }
                        break;
                }
                this.state = 659;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.SEMICOLON) {
                    {
                        this.state = 657;
                        this.match(AdlParser.SEMICOLON);
                        {
                            this.state = 658;
                            _localctx._uq = this.match(AdlParser.UNIQUE);
                        }
                    }
                }
                this.state = 661;
                this.match(AdlParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.numberIntervalConstraint = function () {
        var _localctx = new NumberIntervalConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, AdlParser.RULE_numberIntervalConstraint);
        var _la;
        try {
            this.state = 693;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 93, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 663;
                        this.match(AdlParser.PIPE);
                        this.state = 665;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.GT) {
                            {
                                this.state = 664;
                                _localctx._gt = this.match(AdlParser.GT);
                            }
                        }
                        {
                            this.state = 667;
                            _localctx._lower = this.number();
                        }
                        this.state = 668;
                        this.match(AdlParser.RANGE);
                        this.state = 670;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.LT) {
                            {
                                this.state = 669;
                                _localctx._lt = this.match(AdlParser.LT);
                            }
                        }
                        {
                            this.state = 672;
                            _localctx._upper = this.number();
                        }
                        this.state = 673;
                        this.match(AdlParser.PIPE);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 675;
                        this.match(AdlParser.PIPE);
                        this.state = 688;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 92, this._ctx)) {
                            case 1:
                                {
                                    this.state = 680;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === AdlParser.GT) {
                                        {
                                            this.state = 676;
                                            _localctx._gt = this.match(AdlParser.GT);
                                            this.state = 678;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === AdlParser.EQUALS) {
                                                {
                                                    this.state = 677;
                                                    _localctx._gte = this.match(AdlParser.EQUALS);
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 686;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === AdlParser.LT) {
                                        {
                                            this.state = 682;
                                            _localctx._lt = this.match(AdlParser.LT);
                                            this.state = 684;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === AdlParser.EQUALS) {
                                                {
                                                    this.state = 683;
                                                    _localctx._lte = this.match(AdlParser.EQUALS);
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                        }
                        this.state = 690;
                        _localctx._val = this.number();
                        this.state = 691;
                        this.match(AdlParser.PIPE);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.dateIntervalConstraint = function () {
        var _localctx = new DateIntervalConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, AdlParser.RULE_dateIntervalConstraint);
        var _la;
        try {
            this.state = 723;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 101, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 695;
                        this.match(AdlParser.PIPE);
                        this.state = 697;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.GT) {
                            {
                                this.state = 696;
                                _localctx._gt = this.match(AdlParser.GT);
                            }
                        }
                        {
                            this.state = 699;
                            _localctx._lower = this.match(AdlParser.ISO_DATE);
                        }
                        this.state = 700;
                        this.match(AdlParser.RANGE);
                        this.state = 702;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.LT) {
                            {
                                this.state = 701;
                                _localctx._lt = this.match(AdlParser.LT);
                            }
                        }
                        {
                            this.state = 704;
                            _localctx._upper = this.match(AdlParser.ISO_DATE);
                        }
                        this.state = 705;
                        this.match(AdlParser.PIPE);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 706;
                        this.match(AdlParser.PIPE);
                        this.state = 719;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 100, this._ctx)) {
                            case 1:
                                {
                                    this.state = 711;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === AdlParser.GT) {
                                        {
                                            this.state = 707;
                                            _localctx._gt = this.match(AdlParser.GT);
                                            this.state = 709;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === AdlParser.EQUALS) {
                                                {
                                                    this.state = 708;
                                                    _localctx._gte = this.match(AdlParser.EQUALS);
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 717;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === AdlParser.LT) {
                                        {
                                            this.state = 713;
                                            _localctx._lt = this.match(AdlParser.LT);
                                            this.state = 715;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === AdlParser.EQUALS) {
                                                {
                                                    this.state = 714;
                                                    _localctx._lte = this.match(AdlParser.EQUALS);
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                        }
                        this.state = 721;
                        _localctx._val = this.match(AdlParser.ISO_DATE);
                        this.state = 722;
                        this.match(AdlParser.PIPE);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.timeIntervalConstraint = function () {
        var _localctx = new TimeIntervalConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, AdlParser.RULE_timeIntervalConstraint);
        var _la;
        try {
            this.state = 753;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 109, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 725;
                        this.match(AdlParser.PIPE);
                        this.state = 727;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.GT) {
                            {
                                this.state = 726;
                                _localctx._gt = this.match(AdlParser.GT);
                            }
                        }
                        {
                            this.state = 729;
                            _localctx._lower = this.match(AdlParser.ISO_TIME);
                        }
                        this.state = 730;
                        this.match(AdlParser.RANGE);
                        this.state = 732;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.LT) {
                            {
                                this.state = 731;
                                _localctx._lt = this.match(AdlParser.LT);
                            }
                        }
                        {
                            this.state = 734;
                            _localctx._upper = this.match(AdlParser.ISO_TIME);
                        }
                        this.state = 735;
                        this.match(AdlParser.PIPE);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 736;
                        this.match(AdlParser.PIPE);
                        this.state = 749;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 108, this._ctx)) {
                            case 1:
                                {
                                    this.state = 741;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === AdlParser.GT) {
                                        {
                                            this.state = 737;
                                            _localctx._gt = this.match(AdlParser.GT);
                                            this.state = 739;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === AdlParser.EQUALS) {
                                                {
                                                    this.state = 738;
                                                    _localctx._gte = this.match(AdlParser.EQUALS);
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 747;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === AdlParser.LT) {
                                        {
                                            this.state = 743;
                                            _localctx._lt = this.match(AdlParser.LT);
                                            this.state = 745;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === AdlParser.EQUALS) {
                                                {
                                                    this.state = 744;
                                                    _localctx._lte = this.match(AdlParser.EQUALS);
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                        }
                        this.state = 751;
                        _localctx._val = this.match(AdlParser.ISO_TIME);
                        this.state = 752;
                        this.match(AdlParser.PIPE);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.dateTimeIntervalConstraint = function () {
        var _localctx = new DateTimeIntervalConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, AdlParser.RULE_dateTimeIntervalConstraint);
        var _la;
        try {
            this.state = 783;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 117, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 755;
                        this.match(AdlParser.PIPE);
                        this.state = 757;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.GT) {
                            {
                                this.state = 756;
                                _localctx._gt = this.match(AdlParser.GT);
                            }
                        }
                        {
                            this.state = 759;
                            _localctx._lower = this.match(AdlParser.ISO_DATE_TIME);
                        }
                        this.state = 760;
                        this.match(AdlParser.RANGE);
                        this.state = 762;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.LT) {
                            {
                                this.state = 761;
                                _localctx._lt = this.match(AdlParser.LT);
                            }
                        }
                        {
                            this.state = 764;
                            _localctx._upper = this.match(AdlParser.ISO_DATE_TIME);
                        }
                        this.state = 765;
                        this.match(AdlParser.PIPE);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 766;
                        this.match(AdlParser.PIPE);
                        this.state = 779;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 116, this._ctx)) {
                            case 1:
                                {
                                    this.state = 771;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === AdlParser.GT) {
                                        {
                                            this.state = 767;
                                            _localctx._gt = this.match(AdlParser.GT);
                                            this.state = 769;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === AdlParser.EQUALS) {
                                                {
                                                    this.state = 768;
                                                    _localctx._gte = this.match(AdlParser.EQUALS);
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 777;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === AdlParser.LT) {
                                        {
                                            this.state = 773;
                                            _localctx._lt = this.match(AdlParser.LT);
                                            this.state = 775;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === AdlParser.EQUALS) {
                                                {
                                                    this.state = 774;
                                                    _localctx._lte = this.match(AdlParser.EQUALS);
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                        }
                        this.state = 781;
                        _localctx._val = this.match(AdlParser.ISO_DATE_TIME);
                        this.state = 782;
                        this.match(AdlParser.PIPE);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.durationIntervalConstraint = function () {
        var _localctx = new DurationIntervalConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, AdlParser.RULE_durationIntervalConstraint);
        var _la;
        try {
            this.state = 819;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 127, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 785;
                        this.match(AdlParser.PIPE);
                        this.state = 787;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.GT) {
                            {
                                this.state = 786;
                                _localctx._gt = this.match(AdlParser.GT);
                            }
                        }
                        this.state = 791;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case AdlParser.DURATION:
                                {
                                    this.state = 789;
                                    _localctx._lower = this.match(AdlParser.DURATION);
                                }
                                break;
                            case AdlParser.ASTERISK:
                                {
                                    this.state = 790;
                                    this.match(AdlParser.ASTERISK);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                        this.state = 793;
                        this.match(AdlParser.RANGE);
                        this.state = 795;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.LT) {
                            {
                                this.state = 794;
                                _localctx._lt = this.match(AdlParser.LT);
                            }
                        }
                        this.state = 799;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case AdlParser.DURATION:
                                {
                                    this.state = 797;
                                    _localctx._upper = this.match(AdlParser.DURATION);
                                }
                                break;
                            case AdlParser.ASTERISK:
                                {
                                    this.state = 798;
                                    this.match(AdlParser.ASTERISK);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                        this.state = 801;
                        this.match(AdlParser.PIPE);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 802;
                        this.match(AdlParser.PIPE);
                        this.state = 815;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 126, this._ctx)) {
                            case 1:
                                {
                                    this.state = 807;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === AdlParser.GT) {
                                        {
                                            this.state = 803;
                                            _localctx._gt = this.match(AdlParser.GT);
                                            this.state = 805;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === AdlParser.EQUALS) {
                                                {
                                                    this.state = 804;
                                                    _localctx._gte = this.match(AdlParser.EQUALS);
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.state = 813;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === AdlParser.LT) {
                                        {
                                            this.state = 809;
                                            _localctx._lt = this.match(AdlParser.LT);
                                            this.state = 811;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === AdlParser.EQUALS) {
                                                {
                                                    this.state = 810;
                                                    _localctx._lte = this.match(AdlParser.EQUALS);
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                        }
                        this.state = 817;
                        _localctx._val = this.match(AdlParser.DURATION);
                        this.state = 818;
                        this.match(AdlParser.PIPE);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.terminology = function () {
        var _localctx = new TerminologyContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, AdlParser.RULE_terminology);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 821;
                this.match(AdlParser.TERMINOLOGY);
                this.state = 822;
                this.odinObjectValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.annotations = function () {
        var _localctx = new AnnotationsContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, AdlParser.RULE_annotations);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 824;
                this.match(AdlParser.ANNOTATIONS);
                this.state = 825;
                this.odinObjectValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.odinValue = function () {
        var _localctx = new OdinValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, AdlParser.RULE_odinValue);
        var _la;
        try {
            this.state = 861;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 133, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 827;
                        this.match(AdlParser.LT);
                        this.state = 832;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 128, this._ctx)) {
                            case 1:
                                {
                                    this.state = 828;
                                    this.odinMapValue();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 829;
                                    this.odinCodePhraseValueList();
                                }
                                break;
                            case 3:
                                {
                                    this.state = 830;
                                    this.openStringList();
                                }
                                break;
                            case 4:
                                {
                                    this.state = 831;
                                    this.numberIntervalConstraint();
                                }
                                break;
                        }
                        this.state = 834;
                        this.match(AdlParser.GT);
                        this.state = 836;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.SEMICOLON) {
                            {
                                this.state = 835;
                                this.match(AdlParser.SEMICOLON);
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 843;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case AdlParser.PAREN_OPEN:
                                {
                                    {
                                        this.state = 838;
                                        this.match(AdlParser.PAREN_OPEN);
                                        this.state = 839;
                                        this.typeIdentifier();
                                        this.state = 840;
                                        this.match(AdlParser.PAREN_CLOSE);
                                    }
                                }
                                break;
                            case AdlParser.TYPE_IDENTIFIER:
                                {
                                    this.state = 842;
                                    this.typeIdentifier();
                                }
                                break;
                            case AdlParser.LT:
                                break;
                            default:
                                break;
                        }
                        this.state = 845;
                        this.match(AdlParser.LT);
                        this.state = 847;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (AdlParser.AT_CODE_VALUE - 34)) | (1 << (AdlParser.LANGUAGE - 34)) | (1 << (AdlParser.ARCHETYPE - 34)) | (1 << (AdlParser.TEMPLATE - 34)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 34)) | (1 << (AdlParser.CONCEPT - 34)) | (1 << (AdlParser.DESCRIPTION - 34)) | (1 << (AdlParser.SPECIALISE - 34)) | (1 << (AdlParser.DEFINITION - 34)) | (1 << (AdlParser.MATCHES - 34)) | (1 << (AdlParser.USE_NODE - 34)) | (1 << (AdlParser.OCCURRENCES - 34)) | (1 << (AdlParser.CARDINALITY - 34)) | (1 << (AdlParser.UNORDERED - 34)) | (1 << (AdlParser.ORDERED - 34)) | (1 << (AdlParser.UNIQUE - 34)) | (1 << (AdlParser.EXISTENCE - 34)) | (1 << (AdlParser.CLOSED - 34)) | (1 << (AdlParser.ANNOTATIONS - 34)) | (1 << (AdlParser.TERMINOLOGY - 34)) | (1 << (AdlParser.TYPE_IDENTIFIER - 34)) | (1 << (AdlParser.NAME_IDENTIFIER - 34)))) !== 0)) {
                            {
                                this.state = 846;
                                this.odinObjectValue();
                            }
                        }
                        this.state = 849;
                        this.match(AdlParser.GT);
                        this.state = 851;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === AdlParser.SEMICOLON) {
                            {
                                this.state = 850;
                                this.match(AdlParser.SEMICOLON);
                            }
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 853;
                        this.match(AdlParser.LT);
                        this.state = 854;
                        this.number();
                        this.state = 855;
                        this.match(AdlParser.GT);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 857;
                        this.match(AdlParser.LT);
                        this.state = 858;
                        this.url();
                        this.state = 859;
                        this.match(AdlParser.GT);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.odinObjectValue = function () {
        var _localctx = new OdinObjectValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, AdlParser.RULE_odinObjectValue);
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 864;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 863;
                                    this.odinObjectProperty();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 866;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 134, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.odinObjectProperty = function () {
        var _localctx = new OdinObjectPropertyContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, AdlParser.RULE_odinObjectProperty);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 868;
                this.identifier();
                this.state = 869;
                this.match(AdlParser.EQUALS);
                this.state = 870;
                this.odinValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.odinCodePhraseValueList = function () {
        var _localctx = new OdinCodePhraseValueListContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, AdlParser.RULE_odinCodePhraseValueList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 872;
                this.odinCodePhraseValue();
                this.state = 877;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === AdlParser.COMMA) {
                    {
                        {
                            this.state = 873;
                            this.match(AdlParser.COMMA);
                            this.state = 874;
                            this.odinCodePhraseValue();
                        }
                    }
                    this.state = 879;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.odinCodePhraseValue = function () {
        var _localctx = new OdinCodePhraseValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, AdlParser.RULE_odinCodePhraseValue);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 880;
                this.match(AdlParser.BRACKET_OPEN);
                this.state = 881;
                _localctx._tid = this.codeIdentifier();
                this.state = 882;
                this.match(AdlParser.T__0);
                this.state = 883;
                _localctx._code = this.codeIdentifier();
                this.state = 884;
                this.match(AdlParser.BRACKET_CLOSE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.odinMapValue = function () {
        var _localctx = new OdinMapValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, AdlParser.RULE_odinMapValue);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 887;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 886;
                            this.odinMapValueEntry();
                        }
                    }
                    this.state = 889;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === AdlParser.BRACKET_OPEN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.odinMapValueEntry = function () {
        var _localctx = new OdinMapValueEntryContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, AdlParser.RULE_odinMapValueEntry);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 891;
                this.match(AdlParser.BRACKET_OPEN);
                this.state = 892;
                _localctx._key = this.match(AdlParser.STRING);
                this.state = 893;
                this.match(AdlParser.BRACKET_CLOSE);
                this.state = 894;
                this.match(AdlParser.EQUALS);
                this.state = 895;
                _localctx._value = this.odinValue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.openStringList = function () {
        var _localctx = new OpenStringListContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, AdlParser.RULE_openStringList);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 897;
                this.match(AdlParser.STRING);
                this.state = 902;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 137, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 898;
                                this.match(AdlParser.COMMA);
                                this.state = 899;
                                this.match(AdlParser.STRING);
                            }
                        }
                    }
                    this.state = 904;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 137, this._ctx);
                }
                this.state = 907;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.COMMA) {
                    {
                        this.state = 905;
                        this.match(AdlParser.COMMA);
                        this.state = 906;
                        this.match(AdlParser.T__4);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.stringList = function () {
        var _localctx = new StringListContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, AdlParser.RULE_stringList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 909;
                this.match(AdlParser.STRING);
                this.state = 914;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === AdlParser.COMMA) {
                    {
                        {
                            this.state = 910;
                            this.match(AdlParser.COMMA);
                            this.state = 911;
                            this.match(AdlParser.STRING);
                        }
                    }
                    this.state = 916;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.numberList = function () {
        var _localctx = new NumberListContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, AdlParser.RULE_numberList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 917;
                this.number();
                this.state = 922;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === AdlParser.COMMA) {
                    {
                        {
                            this.state = 918;
                            this.match(AdlParser.COMMA);
                            this.state = 919;
                            this.number();
                        }
                    }
                    this.state = 924;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.booleanList = function () {
        var _localctx = new BooleanListContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, AdlParser.RULE_booleanList);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 925;
                this.bool();
                this.state = 930;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === AdlParser.COMMA) {
                    {
                        {
                            this.state = 926;
                            this.match(AdlParser.COMMA);
                            this.state = 927;
                            this.bool();
                        }
                    }
                    this.state = 932;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.codeIdentifier = function () {
        var _localctx = new CodeIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, AdlParser.RULE_codeIdentifier);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 934;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 933;
                            this.codeIdentifierPart();
                        }
                    }
                    this.state = 936;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 4)) & ~0x1F) === 0 && ((1 << (_la - 4)) & ((1 << (AdlParser.T__3 - 4)) | (1 << (AdlParser.PAREN_OPEN - 4)) | (1 << (AdlParser.PAREN_CLOSE - 4)) | (1 << (AdlParser.PERIOD - 4)) | (1 << (AdlParser.COLON - 4)) | (1 << (AdlParser.MINUS - 4)) | (1 << (AdlParser.ISO_DATE_TIME - 4)) | (1 << (AdlParser.ISO_DATE - 4)) | (1 << (AdlParser.AT_CODE_VALUE - 4)) | (1 << (AdlParser.LANGUAGE - 4)))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (AdlParser.ARCHETYPE - 36)) | (1 << (AdlParser.TEMPLATE - 36)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 36)) | (1 << (AdlParser.CONCEPT - 36)) | (1 << (AdlParser.DESCRIPTION - 36)) | (1 << (AdlParser.SPECIALISE - 36)) | (1 << (AdlParser.DEFINITION - 36)) | (1 << (AdlParser.MATCHES - 36)) | (1 << (AdlParser.USE_NODE - 36)) | (1 << (AdlParser.OCCURRENCES - 36)) | (1 << (AdlParser.CARDINALITY - 36)) | (1 << (AdlParser.UNORDERED - 36)) | (1 << (AdlParser.ORDERED - 36)) | (1 << (AdlParser.UNIQUE - 36)) | (1 << (AdlParser.EXISTENCE - 36)) | (1 << (AdlParser.CLOSED - 36)) | (1 << (AdlParser.ANNOTATIONS - 36)) | (1 << (AdlParser.TERMINOLOGY - 36)) | (1 << (AdlParser.TYPE_IDENTIFIER - 36)) | (1 << (AdlParser.NAME_IDENTIFIER - 36)) | (1 << (AdlParser.INTEGER - 36)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.codeIdentifierPart = function () {
        var _localctx = new CodeIdentifierPartContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, AdlParser.RULE_codeIdentifierPart);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 948;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 143, this._ctx)) {
                    case 1:
                        {
                            this.state = 938;
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.state = 939;
                            this.number();
                        }
                        break;
                    case 3:
                        {
                            this.state = 940;
                            this.match(AdlParser.ISO_DATE_TIME);
                        }
                        break;
                    case 4:
                        {
                            this.state = 941;
                            this.match(AdlParser.ISO_DATE);
                        }
                        break;
                    case 5:
                        {
                            this.state = 942;
                            this.match(AdlParser.PERIOD);
                        }
                        break;
                    case 6:
                        {
                            this.state = 943;
                            this.match(AdlParser.MINUS);
                        }
                        break;
                    case 7:
                        {
                            this.state = 944;
                            this.match(AdlParser.PAREN_OPEN);
                        }
                        break;
                    case 8:
                        {
                            this.state = 945;
                            this.match(AdlParser.PAREN_CLOSE);
                        }
                        break;
                    case 9:
                        {
                            this.state = 946;
                            this.match(AdlParser.COLON);
                        }
                        break;
                    case 10:
                        {
                            this.state = 947;
                            this.match(AdlParser.T__3);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.identifier = function () {
        var _localctx = new IdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, AdlParser.RULE_identifier);
        try {
            this.state = 952;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.AT_CODE_VALUE:
                case AdlParser.LANGUAGE:
                case AdlParser.ARCHETYPE:
                case AdlParser.TEMPLATE:
                case AdlParser.TEMPLATE_OVERLAY:
                case AdlParser.CONCEPT:
                case AdlParser.DESCRIPTION:
                case AdlParser.SPECIALISE:
                case AdlParser.DEFINITION:
                case AdlParser.MATCHES:
                case AdlParser.USE_NODE:
                case AdlParser.OCCURRENCES:
                case AdlParser.CARDINALITY:
                case AdlParser.UNORDERED:
                case AdlParser.ORDERED:
                case AdlParser.UNIQUE:
                case AdlParser.EXISTENCE:
                case AdlParser.CLOSED:
                case AdlParser.ANNOTATIONS:
                case AdlParser.TERMINOLOGY:
                case AdlParser.NAME_IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 950;
                        this.nameIdentifier();
                    }
                    break;
                case AdlParser.TYPE_IDENTIFIER:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 951;
                        this.typeIdentifier();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.bool = function () {
        var _localctx = new BoolContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, AdlParser.RULE_bool);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 954;
                _la = this._input.LA(1);
                if (!(_la === AdlParser.TRUE || _la === AdlParser.FALSE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.nameIdentifier = function () {
        var _localctx = new NameIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, AdlParser.RULE_nameIdentifier);
        try {
            this.state = 959;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.NAME_IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 956;
                        this.match(AdlParser.NAME_IDENTIFIER);
                    }
                    break;
                case AdlParser.LANGUAGE:
                case AdlParser.ARCHETYPE:
                case AdlParser.TEMPLATE:
                case AdlParser.TEMPLATE_OVERLAY:
                case AdlParser.CONCEPT:
                case AdlParser.DESCRIPTION:
                case AdlParser.SPECIALISE:
                case AdlParser.DEFINITION:
                case AdlParser.MATCHES:
                case AdlParser.USE_NODE:
                case AdlParser.OCCURRENCES:
                case AdlParser.CARDINALITY:
                case AdlParser.UNORDERED:
                case AdlParser.ORDERED:
                case AdlParser.UNIQUE:
                case AdlParser.EXISTENCE:
                case AdlParser.CLOSED:
                case AdlParser.ANNOTATIONS:
                case AdlParser.TERMINOLOGY:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 957;
                        this.keyword();
                    }
                    break;
                case AdlParser.AT_CODE_VALUE:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 958;
                        this.match(AdlParser.AT_CODE_VALUE);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.typeIdentifierWithGenerics = function () {
        var _localctx = new TypeIdentifierWithGenericsContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, AdlParser.RULE_typeIdentifierWithGenerics);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 961;
                _localctx._mainType = this.typeIdentifier();
                this.state = 966;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.LT) {
                    {
                        this.state = 962;
                        this.match(AdlParser.LT);
                        this.state = 963;
                        _localctx._genericType = this.typeIdentifier();
                        this.state = 964;
                        this.match(AdlParser.GT);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.typeIdentifier = function () {
        var _localctx = new TypeIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, AdlParser.RULE_typeIdentifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 968;
                this.match(AdlParser.TYPE_IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.keyword = function () {
        var _localctx = new KeywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, AdlParser.RULE_keyword);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 970;
                _la = this._input.LA(1);
                if (!(((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (AdlParser.LANGUAGE - 35)) | (1 << (AdlParser.ARCHETYPE - 35)) | (1 << (AdlParser.TEMPLATE - 35)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 35)) | (1 << (AdlParser.CONCEPT - 35)) | (1 << (AdlParser.DESCRIPTION - 35)) | (1 << (AdlParser.SPECIALISE - 35)) | (1 << (AdlParser.DEFINITION - 35)) | (1 << (AdlParser.MATCHES - 35)) | (1 << (AdlParser.USE_NODE - 35)) | (1 << (AdlParser.OCCURRENCES - 35)) | (1 << (AdlParser.CARDINALITY - 35)) | (1 << (AdlParser.UNORDERED - 35)) | (1 << (AdlParser.ORDERED - 35)) | (1 << (AdlParser.UNIQUE - 35)) | (1 << (AdlParser.EXISTENCE - 35)) | (1 << (AdlParser.CLOSED - 35)) | (1 << (AdlParser.ANNOTATIONS - 35)) | (1 << (AdlParser.TERMINOLOGY - 35)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.pathSegment = function () {
        var _localctx = new PathSegmentContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, AdlParser.RULE_pathSegment);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 972;
                this.nameIdentifier();
                this.state = 974;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 147, this._ctx)) {
                    case 1:
                        {
                            this.state = 973;
                            this.atCode();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.rmPath = function () {
        var _localctx = new RmPathContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, AdlParser.RULE_rmPath);
        var _la;
        try {
            var _alt = void 0;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 977;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.T__3) {
                    {
                        this.state = 976;
                        this.match(AdlParser.T__3);
                    }
                }
                this.state = 979;
                this.pathSegment();
                this.state = 984;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 980;
                                this.match(AdlParser.T__3);
                                this.state = 981;
                                this.pathSegment();
                            }
                        }
                    }
                    this.state = 986;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.url = function () {
        var _localctx = new UrlContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, AdlParser.RULE_url);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 987;
                this.identifier();
                this.state = 988;
                this.match(AdlParser.COLON);
                this.state = 999;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 999;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 150, this._ctx)) {
                            case 1:
                                {
                                    this.state = 989;
                                    this.codeIdentifierPart();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 990;
                                    this.match(AdlParser.UNDERSCORE);
                                }
                                break;
                            case 3:
                                {
                                    this.state = 991;
                                    this.match(AdlParser.PERIOD);
                                }
                                break;
                            case 4:
                                {
                                    this.state = 992;
                                    this.match(AdlParser.EQUALS);
                                }
                                break;
                            case 5:
                                {
                                    this.state = 993;
                                    this.match(AdlParser.QUESTION);
                                }
                                break;
                            case 6:
                                {
                                    this.state = 994;
                                    this.match(AdlParser.MINUS);
                                }
                                break;
                            case 7:
                                {
                                    this.state = 995;
                                    this.match(AdlParser.T__3);
                                }
                                break;
                            case 8:
                                {
                                    this.state = 996;
                                    this.match(AdlParser.AMP);
                                }
                                break;
                            case 9:
                                {
                                    this.state = 997;
                                    this.match(AdlParser.SEMICOLON);
                                }
                                break;
                            case 10:
                                {
                                    this.state = 998;
                                    this.match(AdlParser.UNICODE_CHAR);
                                }
                                break;
                        }
                    }
                    this.state = 1001;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 4)) & ~0x1F) === 0 && ((1 << (_la - 4)) & ((1 << (AdlParser.T__3 - 4)) | (1 << (AdlParser.EQUALS - 4)) | (1 << (AdlParser.PAREN_OPEN - 4)) | (1 << (AdlParser.PAREN_CLOSE - 4)) | (1 << (AdlParser.PERIOD - 4)) | (1 << (AdlParser.COLON - 4)) | (1 << (AdlParser.SEMICOLON - 4)) | (1 << (AdlParser.MINUS - 4)) | (1 << (AdlParser.UNDERSCORE - 4)) | (1 << (AdlParser.AMP - 4)) | (1 << (AdlParser.QUESTION - 4)) | (1 << (AdlParser.ISO_DATE_TIME - 4)) | (1 << (AdlParser.ISO_DATE - 4)) | (1 << (AdlParser.AT_CODE_VALUE - 4)) | (1 << (AdlParser.LANGUAGE - 4)))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (AdlParser.ARCHETYPE - 36)) | (1 << (AdlParser.TEMPLATE - 36)) | (1 << (AdlParser.TEMPLATE_OVERLAY - 36)) | (1 << (AdlParser.CONCEPT - 36)) | (1 << (AdlParser.DESCRIPTION - 36)) | (1 << (AdlParser.SPECIALISE - 36)) | (1 << (AdlParser.DEFINITION - 36)) | (1 << (AdlParser.MATCHES - 36)) | (1 << (AdlParser.USE_NODE - 36)) | (1 << (AdlParser.OCCURRENCES - 36)) | (1 << (AdlParser.CARDINALITY - 36)) | (1 << (AdlParser.UNORDERED - 36)) | (1 << (AdlParser.ORDERED - 36)) | (1 << (AdlParser.UNIQUE - 36)) | (1 << (AdlParser.EXISTENCE - 36)) | (1 << (AdlParser.CLOSED - 36)) | (1 << (AdlParser.ANNOTATIONS - 36)) | (1 << (AdlParser.TERMINOLOGY - 36)) | (1 << (AdlParser.TYPE_IDENTIFIER - 36)) | (1 << (AdlParser.NAME_IDENTIFIER - 36)) | (1 << (AdlParser.INTEGER - 36)) | (1 << (AdlParser.UNICODE_CHAR - 36)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.numberOrStar = function () {
        var _localctx = new NumberOrStarContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, AdlParser.RULE_numberOrStar);
        try {
            this.state = 1005;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case AdlParser.MINUS:
                case AdlParser.INTEGER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1003;
                        this.number();
                    }
                    break;
                case AdlParser.ASTERISK:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1004;
                        this.match(AdlParser.ASTERISK);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    AdlParser.prototype.number = function () {
        var _localctx = new NumberContext(this._ctx, this.state);
        this.enterRule(_localctx, 158, AdlParser.RULE_number);
        var _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1008;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === AdlParser.MINUS) {
                    {
                        this.state = 1007;
                        this.match(AdlParser.MINUS);
                    }
                }
                this.state = 1010;
                this.match(AdlParser.INTEGER);
                this.state = 1013;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 154, this._ctx)) {
                    case 1:
                        {
                            this.state = 1011;
                            this.match(AdlParser.PERIOD);
                            this.state = 1012;
                            this.match(AdlParser.INTEGER);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    };
    Object.defineProperty(AdlParser, "_ATN", {
        get: function () {
            if (!AdlParser.__ATN) {
                AdlParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(AdlParser._serializedATN));
            }
            return AdlParser.__ATN;
        },
        enumerable: true,
        configurable: true
    });
    AdlParser.T__0 = 1;
    AdlParser.T__1 = 2;
    AdlParser.T__2 = 3;
    AdlParser.T__3 = 4;
    AdlParser.T__4 = 5;
    AdlParser.RANGE = 6;
    AdlParser.EQUALS = 7;
    AdlParser.PAREN_OPEN = 8;
    AdlParser.PAREN_CLOSE = 9;
    AdlParser.BRACKET_OPEN = 10;
    AdlParser.BRACKET_CLOSE = 11;
    AdlParser.GT = 12;
    AdlParser.LT = 13;
    AdlParser.PERIOD = 14;
    AdlParser.COMMA = 15;
    AdlParser.COLON = 16;
    AdlParser.SEMICOLON = 17;
    AdlParser.MINUS = 18;
    AdlParser.UNDERSCORE = 19;
    AdlParser.PIPE = 20;
    AdlParser.ASTERISK = 21;
    AdlParser.CARET = 22;
    AdlParser.AMP = 23;
    AdlParser.EXCLAMATION = 24;
    AdlParser.QUESTION = 25;
    AdlParser.OTHER_SYMBOL = 26;
    AdlParser.DATE_TIME_PATTERN = 27;
    AdlParser.TIME_PATTERN = 28;
    AdlParser.DATE_PATTERN = 29;
    AdlParser.DURATION = 30;
    AdlParser.ISO_DATE_TIME = 31;
    AdlParser.ISO_DATE = 32;
    AdlParser.ISO_TIME = 33;
    AdlParser.AT_CODE_VALUE = 34;
    AdlParser.LANGUAGE = 35;
    AdlParser.ARCHETYPE = 36;
    AdlParser.TEMPLATE = 37;
    AdlParser.TEMPLATE_OVERLAY = 38;
    AdlParser.CONCEPT = 39;
    AdlParser.DESCRIPTION = 40;
    AdlParser.SPECIALISE = 41;
    AdlParser.DEFINITION = 42;
    AdlParser.MATCHES = 43;
    AdlParser.USE_NODE = 44;
    AdlParser.OCCURRENCES = 45;
    AdlParser.INCLUDE = 46;
    AdlParser.EXCLUDE = 47;
    AdlParser.ALLOW_ARCHETYPE = 48;
    AdlParser.CARDINALITY = 49;
    AdlParser.UNORDERED = 50;
    AdlParser.ORDERED = 51;
    AdlParser.UNIQUE = 52;
    AdlParser.EXISTENCE = 53;
    AdlParser.BEFORE = 54;
    AdlParser.AFTER = 55;
    AdlParser.USE_ARCHETYPE = 56;
    AdlParser.USE_TEMPLATE = 57;
    AdlParser.CLOSED = 58;
    AdlParser.ANNOTATIONS = 59;
    AdlParser.TERMINOLOGY = 60;
    AdlParser.TRUE = 61;
    AdlParser.FALSE = 62;
    AdlParser.TYPE_IDENTIFIER = 63;
    AdlParser.NAME_IDENTIFIER = 64;
    AdlParser.INTEGER = 65;
    AdlParser.STRING = 66;
    AdlParser.UNICODE_CHAR = 67;
    AdlParser.LINE_COMMENT = 68;
    AdlParser.WS = 69;
    AdlParser.RULE_adl = 0;
    AdlParser.RULE_alphanumeric = 1;
    AdlParser.RULE_archetypeId = 2;
    AdlParser.RULE_headerTag = 3;
    AdlParser.RULE_header = 4;
    AdlParser.RULE_archetypePropertyList = 5;
    AdlParser.RULE_archetypeProperty = 6;
    AdlParser.RULE_archetypePropertyValue = 7;
    AdlParser.RULE_archetypePropertyValuePart = 8;
    AdlParser.RULE_atCode = 9;
    AdlParser.RULE_specializeTag = 10;
    AdlParser.RULE_specialize = 11;
    AdlParser.RULE_language = 12;
    AdlParser.RULE_description = 13;
    AdlParser.RULE_definition = 14;
    AdlParser.RULE_typeConstraint = 15;
    AdlParser.RULE_complexObjectConstraint = 16;
    AdlParser.RULE_occurrences = 17;
    AdlParser.RULE_occurrenceRange = 18;
    AdlParser.RULE_attributeListMatcher = 19;
    AdlParser.RULE_orderConstraint = 20;
    AdlParser.RULE_multiValueConstraint = 21;
    AdlParser.RULE_valueConstraint = 22;
    AdlParser.RULE_ordinalConstraint = 23;
    AdlParser.RULE_ordinalItemList = 24;
    AdlParser.RULE_ordinalItem = 25;
    AdlParser.RULE_primitiveValueConstraint = 26;
    AdlParser.RULE_terminologyCodeConstraint = 27;
    AdlParser.RULE_archetypeSlotConstraint = 28;
    AdlParser.RULE_archetypeSlotValueConstraint = 29;
    AdlParser.RULE_archetypeSlotSingleConstraint = 30;
    AdlParser.RULE_archetypeReferenceConstraint = 31;
    AdlParser.RULE_stringConstraint = 32;
    AdlParser.RULE_numberConstraint = 33;
    AdlParser.RULE_dateTimeConstraint = 34;
    AdlParser.RULE_dateConstraint = 35;
    AdlParser.RULE_timeConstraint = 36;
    AdlParser.RULE_durationConstraint = 37;
    AdlParser.RULE_codeIdentifierList = 38;
    AdlParser.RULE_regularExpression = 39;
    AdlParser.RULE_regularExpressionInner1 = 40;
    AdlParser.RULE_regularExpressionInner2 = 41;
    AdlParser.RULE_attributeConstraint = 42;
    AdlParser.RULE_tupleAttributeIdentifier = 43;
    AdlParser.RULE_tupleChildConstraints = 44;
    AdlParser.RULE_tupleChildConstraint = 45;
    AdlParser.RULE_attributeIdentifier = 46;
    AdlParser.RULE_existence = 47;
    AdlParser.RULE_cardinality = 48;
    AdlParser.RULE_numberIntervalConstraint = 49;
    AdlParser.RULE_dateIntervalConstraint = 50;
    AdlParser.RULE_timeIntervalConstraint = 51;
    AdlParser.RULE_dateTimeIntervalConstraint = 52;
    AdlParser.RULE_durationIntervalConstraint = 53;
    AdlParser.RULE_terminology = 54;
    AdlParser.RULE_annotations = 55;
    AdlParser.RULE_odinValue = 56;
    AdlParser.RULE_odinObjectValue = 57;
    AdlParser.RULE_odinObjectProperty = 58;
    AdlParser.RULE_odinCodePhraseValueList = 59;
    AdlParser.RULE_odinCodePhraseValue = 60;
    AdlParser.RULE_odinMapValue = 61;
    AdlParser.RULE_odinMapValueEntry = 62;
    AdlParser.RULE_openStringList = 63;
    AdlParser.RULE_stringList = 64;
    AdlParser.RULE_numberList = 65;
    AdlParser.RULE_booleanList = 66;
    AdlParser.RULE_codeIdentifier = 67;
    AdlParser.RULE_codeIdentifierPart = 68;
    AdlParser.RULE_identifier = 69;
    AdlParser.RULE_bool = 70;
    AdlParser.RULE_nameIdentifier = 71;
    AdlParser.RULE_typeIdentifierWithGenerics = 72;
    AdlParser.RULE_typeIdentifier = 73;
    AdlParser.RULE_keyword = 74;
    AdlParser.RULE_pathSegment = 75;
    AdlParser.RULE_rmPath = 76;
    AdlParser.RULE_url = 77;
    AdlParser.RULE_numberOrStar = 78;
    AdlParser.RULE_number = 79;
    AdlParser.ruleNames = [
        "adl", "alphanumeric", "archetypeId", "headerTag", "header", "archetypePropertyList",
        "archetypeProperty", "archetypePropertyValue", "archetypePropertyValuePart",
        "atCode", "specializeTag", "specialize", "language", "description", "definition",
        "typeConstraint", "complexObjectConstraint", "occurrences", "occurrenceRange",
        "attributeListMatcher", "orderConstraint", "multiValueConstraint", "valueConstraint",
        "ordinalConstraint", "ordinalItemList", "ordinalItem", "primitiveValueConstraint",
        "terminologyCodeConstraint", "archetypeSlotConstraint", "archetypeSlotValueConstraint",
        "archetypeSlotSingleConstraint", "archetypeReferenceConstraint", "stringConstraint",
        "numberConstraint", "dateTimeConstraint", "dateConstraint", "timeConstraint",
        "durationConstraint", "codeIdentifierList", "regularExpression", "regularExpressionInner1",
        "regularExpressionInner2", "attributeConstraint", "tupleAttributeIdentifier",
        "tupleChildConstraints", "tupleChildConstraint", "attributeIdentifier",
        "existence", "cardinality", "numberIntervalConstraint", "dateIntervalConstraint",
        "timeIntervalConstraint", "dateTimeIntervalConstraint", "durationIntervalConstraint",
        "terminology", "annotations", "odinValue", "odinObjectValue", "odinObjectProperty",
        "odinCodePhraseValueList", "odinCodePhraseValue", "odinMapValue", "odinMapValueEntry",
        "openStringList", "stringList", "numberList", "booleanList", "codeIdentifier",
        "codeIdentifierPart", "identifier", "bool", "nameIdentifier", "typeIdentifierWithGenerics",
        "typeIdentifier", "keyword", "pathSegment", "rmPath", "url", "numberOrStar",
        "number"
    ];
    AdlParser._LITERAL_NAMES = [
        undefined, "'::'", "'{'", "'}'", "'/'", "'...'", "'..'", "'='", "'('",
        "')'", "'['", "']'", "'>'", "'<'", "'.'", "','", "':'", "';'", "'-'",
        "'_'", "'|'", "'*'", "'^'", "'&'", "'!'", "'?'"
    ];
    AdlParser._SYMBOLIC_NAMES = [
        undefined, undefined, undefined, undefined, undefined, undefined, "RANGE",
        "EQUALS", "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE",
        "GT", "LT", "PERIOD", "COMMA", "COLON", "SEMICOLON", "MINUS", "UNDERSCORE",
        "PIPE", "ASTERISK", "CARET", "AMP", "EXCLAMATION", "QUESTION", "OTHER_SYMBOL",
        "DATE_TIME_PATTERN", "TIME_PATTERN", "DATE_PATTERN", "DURATION", "ISO_DATE_TIME",
        "ISO_DATE", "ISO_TIME", "AT_CODE_VALUE", "LANGUAGE", "ARCHETYPE", "TEMPLATE",
        "TEMPLATE_OVERLAY", "CONCEPT", "DESCRIPTION", "SPECIALISE", "DEFINITION",
        "MATCHES", "USE_NODE", "OCCURRENCES", "INCLUDE", "EXCLUDE", "ALLOW_ARCHETYPE",
        "CARDINALITY", "UNORDERED", "ORDERED", "UNIQUE", "EXISTENCE", "BEFORE",
        "AFTER", "USE_ARCHETYPE", "USE_TEMPLATE", "CLOSED", "ANNOTATIONS", "TERMINOLOGY",
        "TRUE", "FALSE", "TYPE_IDENTIFIER", "NAME_IDENTIFIER", "INTEGER", "STRING",
        "UNICODE_CHAR", "LINE_COMMENT", "WS"
    ];
    AdlParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(AdlParser._LITERAL_NAMES, AdlParser._SYMBOLIC_NAMES, []);
    AdlParser._serializedATNSegments = 2;
    AdlParser._serializedATNSegment0 = "\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x03G\u03FA\x04\x02" +
        "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
        "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04" +
        "\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04" +
        "\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04" +
        "\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C\x04" +
        "\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#" +
        "\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t+" +
        "\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x044" +
        "\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
        "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
        "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
        "O\tO\x04P\tP\x04Q\tQ\x03\x02\x03\x02\x05\x02\xA5\n\x02\x03\x02\x05\x02" +
        "\xA8\n\x02\x03\x02\x05\x02\xAB\n\x02\x03\x02\x05\x02\xAE\n\x02\x03\x02" +
        "\x05\x02\xB1\n\x02\x03\x02\x05\x02\xB4\n\x02\x03\x02\x03\x02\x03\x03\x03" +
        "\x03\x05\x03\xBA\n\x03\x03\x04\x03\x04\x03\x04\x07\x04\xBF\n\x04\f\x04" +
        "\x0E\x04\xC2\v\x04\x03\x04\x03\x04\x05\x04\xC6\n\x04\x03\x04\x03\x04\x03" +
        "\x04\x06\x04\xCB\n\x04\r\x04\x0E\x04\xCC\x03\x04\x03\x04\x03\x04\x06\x04" +
        "\xD2\n\x04\r\x04\x0E\x04\xD3\x03\x04\x03\x04\x03\x04\x03\x04\x07\x04\xDA" +
        "\n\x04\f\x04\x0E\x04\xDD\v\x04\x03\x04\x03\x04\x05\x04\xE1\n\x04\x03\x05" +
        "\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06\xEA\n\x06\x03" +
        "\x06\x03\x06\x03\x07\x03\x07\x03\x07\x07\x07\xF1\n\x07\f\x07\x0E\x07\xF4" +
        "\v\x07\x03\b\x03\b\x03\b\x05\b\xF9\n\b\x03\t\x07\t\xFC\n\t\f\t\x0E\t\xFF" +
        "\v\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r" +
        "\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10" +
        "\x03\x11\x05\x11\u0116\n\x11\x03\x11\x03\x11\x05\x11\u011A\n\x11\x03\x11" +
        "\x03\x11\x03\x11\x05\x11\u011F\n\x11\x03\x11\x05\x11\u0122\n\x11\x03\x11" +
        "\x03\x11\x03\x11\x05\x11\u0127\n\x11\x03\x11\x03\x11\x05\x11\u012B\n\x11" +
        "\x03\x11\x05\x11\u012E\n\x11\x03\x12\x03\x12\x05\x12\u0132\n\x12\x03\x12" +
        "\x05\x12\u0135\n\x12\x03\x12\x05\x12\u0138\n\x12\x03\x13\x03\x13\x03\x13" +
        "\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
        "\x03\x14\x05\x14\u0147\n\x14\x03\x15\x03\x15\x03\x15\x06\x15\u014C\n\x15" +
        "\r\x15\x0E\x15\u014D\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05" +
        "\x15\u0156\n\x15\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\u015C\n\x16\x03" +
        "\x17\x03\x17\x06\x17\u0160\n\x17\r\x17\x0E\x17\u0161\x05\x17\u0164\n\x17" +
        "\x03\x18\x03\x18\x03\x18\x05\x18\u0169\n\x18\x03\x19\x03\x19\x03\x19\x05" +
        "\x19\u016E\n\x19\x03\x1A\x03\x1A\x03\x1A\x07\x1A\u0173\n\x1A\f\x1A\x0E" +
        "\x1A\u0176\v\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C" +
        "\x05\x1C\u017F\n\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u0184\n\x1C\x03\x1C" +
        "\x03\x1C\x03\x1C\x05\x1C\u0189\n\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u018E" +
        "\n\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u0193\n\x1C\x03\x1C\x03\x1C\x03" +
        "\x1C\x05\x1C\u0198\n\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u019D\n\x1C\x03" +
        "\x1C\x05\x1C\u01A0\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u01A6" +
        "\n\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u01AD\n\x1E\x03" +
        "\x1E\x05\x1E\u01B0\n\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E" +
        "\u01B7\n\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u01BC\n\x1E\x03\x1E\x03\x1E" +
        "\x05\x1E\u01C0\n\x1E\x03\x1F\x03\x1F\x07\x1F\u01C4\n\x1F\f\x1F\x0E\x1F" +
        "\u01C7\v\x1F\x05\x1F\u01C9\n\x1F\x03\x1F\x03\x1F\x07\x1F\u01CD\n\x1F\f" +
        "\x1F\x0E\x1F\u01D0\v\x1F\x05\x1F\u01D2\n\x1F\x03 \x03 \x03 \x03 \x03 " +
        "\x03 \x03!\x03!\x05!\u01DC\n!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x05!" +
        "\u01E5\n!\x03\"\x03\"\x05\"\u01E9\n\"\x03#\x03#\x03#\x03#\x07#\u01EF\n" +
        "#\f#\x0E#\u01F2\v#\x05#\u01F4\n#\x03$\x03$\x03$\x03$\x03$\x07$\u01FB\n" +
        "$\f$\x0E$\u01FE\v$\x05$\u0200\n$\x03%\x03%\x03%\x03%\x03%\x07%\u0207\n" +
        "%\f%\x0E%\u020A\v%\x05%\u020C\n%\x03&\x03&\x03&\x03&\x03&\x07&\u0213\n" +
        "&\f&\x0E&\u0216\v&\x05&\u0218\n&\x03\'\x03\'\x03\'\x03\'\x05\'\u021E\n" +
        "\'\x05\'\u0220\n\'\x03\'\x05\'\u0223\n\'\x03(\x05(\u0226\n(\x03(\x03(" +
        "\x07(\u022A\n(\f(\x0E(\u022D\v(\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03" +
        ")\x05)\u0237\n)\x03*\x07*\u023A\n*\f*\x0E*\u023D\v*\x03+\x07+\u0240\n" +
        "+\f+\x0E+\u0243\v+\x03,\x03,\x05,\u0247\n,\x03,\x05,\u024A\n,\x03,\x03" +
        ",\x03,\x03,\x03,\x05,\u0251\n,\x03,\x03,\x05,\u0255\n,\x03,\x03,\x03," +
        "\x03,\x03,\x05,\u025C\n,\x03-\x03-\x03-\x03-\x07-\u0262\n-\f-\x0E-\u0265" +
        "\v-\x03-\x03-\x03.\x03.\x03.\x07.\u026C\n.\f.\x0E.\u026F\v.\x03/\x03/" +
        "\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x07/\u027A\n/\f/\x0E/\u027D\v/\x03" +
        "/\x03/\x030\x030\x031\x031\x031\x031\x031\x031\x032\x032\x032\x032\x03" +
        "2\x032\x032\x052\u0290\n2\x052\u0292\n2\x032\x032\x052\u0296\n2\x032\x03" +
        "2\x033\x033\x053\u029C\n3\x033\x033\x033\x053\u02A1\n3\x033\x033\x033" +
        "\x033\x033\x033\x053\u02A9\n3\x053\u02AB\n3\x033\x033\x053\u02AF\n3\x05" +
        "3\u02B1\n3\x053\u02B3\n3\x033\x033\x033\x053\u02B8\n3\x034\x034\x054\u02BC" +
        "\n4\x034\x034\x034\x054\u02C1\n4\x034\x034\x034\x034\x034\x054\u02C8\n" +
        "4\x054\u02CA\n4\x034\x034\x054\u02CE\n4\x054\u02D0\n4\x054\u02D2\n4\x03" +
        "4\x034\x054\u02D6\n4\x035\x035\x055\u02DA\n5\x035\x035\x035\x055\u02DF" +
        "\n5\x035\x035\x035\x035\x035\x055\u02E6\n5\x055\u02E8\n5\x035\x035\x05" +
        "5\u02EC\n5\x055\u02EE\n5\x055\u02F0\n5\x035\x035\x055\u02F4\n5\x036\x03" +
        "6\x056\u02F8\n6\x036\x036\x036\x056\u02FD\n6\x036\x036\x036\x036\x036" +
        "\x056\u0304\n6\x056\u0306\n6\x036\x036\x056\u030A\n6\x056\u030C\n6\x05" +
        "6\u030E\n6\x036\x036\x056\u0312\n6\x037\x037\x057\u0316\n7\x037\x037\x05" +
        "7\u031A\n7\x037\x037\x057\u031E\n7\x037\x037\x057\u0322\n7\x037\x037\x03" +
        "7\x037\x057\u0328\n7\x057\u032A\n7\x037\x037\x057\u032E\n7\x057\u0330" +
        "\n7\x057\u0332\n7\x037\x037\x057\u0336\n7\x038\x038\x038\x039\x039\x03" +
        "9\x03:\x03:\x03:\x03:\x03:\x05:\u0343\n:\x03:\x03:\x05:\u0347\n:\x03:" +
        "\x03:\x03:\x03:\x03:\x05:\u034E\n:\x03:\x03:\x05:\u0352\n:\x03:\x03:\x05" +
        ":\u0356\n:\x03:\x03:\x03:\x03:\x03:\x03:\x03:\x03:\x05:\u0360\n:\x03;" +
        "\x06;\u0363\n;\r;\x0E;\u0364\x03<\x03<\x03<\x03<\x03=\x03=\x03=\x07=\u036E" +
        "\n=\f=\x0E=\u0371\v=\x03>\x03>\x03>\x03>\x03>\x03>\x03?\x06?\u037A\n?" +
        "\r?\x0E?\u037B\x03@\x03@\x03@\x03@\x03@\x03@\x03A\x03A\x03A\x07A\u0387" +
        "\nA\fA\x0EA\u038A\vA\x03A\x03A\x05A\u038E\nA\x03B\x03B\x03B\x07B\u0393" +
        "\nB\fB\x0EB\u0396\vB\x03C\x03C\x03C\x07C\u039B\nC\fC\x0EC\u039E\vC\x03" +
        "D\x03D\x03D\x07D\u03A3\nD\fD\x0ED\u03A6\vD\x03E\x06E\u03A9\nE\rE\x0EE" +
        "\u03AA\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x05F\u03B7\n" +
        "F\x03G\x03G\x05G\u03BB\nG\x03H\x03H\x03I\x03I\x03I\x05I\u03C2\nI\x03J" +
        "\x03J\x03J\x03J\x03J\x05J\u03C9\nJ\x03K\x03K\x03L\x03L\x03M\x03M\x05M" +
        "\u03D1\nM\x03N\x05N\u03D4\nN\x03N\x03N\x03N\x07N\u03D9\nN\fN\x0EN\u03DC" +
        "\vN\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x06O\u03EA" +
        "\nO\rO\x0EO\u03EB\x03P\x03P\x05P\u03F0\nP\x03Q\x05Q\u03F3\nQ\x03Q\x03" +
        "Q\x03Q\x05Q\u03F8\nQ\x03Q\x02\x02\x02R\x02\x02\x04\x02\x06\x02\b\x02\n" +
        "\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C" +
        "\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026" +
        "\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02" +
        "R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02" +
        "n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02" +
        "\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02" +
        "\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\x02\b\x03\x02&(\x04\x02\v\v\x13" +
        "\x13\x03\x02\x06\x06\x03\x02\x18\x18\x03\x02?@\x05\x02%/37<>\u0467\x02" +
        "\xA2\x03\x02\x02\x02\x04\xB9\x03\x02\x02\x02\x06\xC5\x03\x02\x02\x02\b" +
        "\xE2\x03\x02\x02\x02\n\xE4\x03\x02\x02\x02\f\xED\x03\x02\x02\x02\x0E\xF5" +
        "\x03\x02\x02\x02\x10\xFD\x03\x02\x02\x02\x12\u0100\x03\x02\x02\x02\x14" +
        "\u0102\x03\x02\x02\x02\x16\u0106\x03\x02\x02\x02\x18\u0108\x03\x02\x02" +
        "\x02\x1A\u010B\x03\x02\x02\x02\x1C\u010E\x03\x02\x02\x02\x1E\u0111\x03" +
        "\x02\x02\x02 \u012D\x03\x02\x02\x02\"\u012F\x03\x02\x02\x02$\u0139\x03" +
        "\x02\x02\x02&\u0146\x03\x02\x02\x02(\u0155\x03\x02\x02\x02*\u015B\x03" +
        "\x02\x02\x02,\u0163\x03\x02\x02\x02.\u0168\x03\x02\x02\x020\u016A\x03" +
        "\x02\x02\x022\u016F\x03\x02\x02\x024\u0177\x03\x02\x02\x026\u019F\x03" +
        "\x02\x02\x028\u01A1\x03\x02\x02\x02:\u01BF\x03\x02\x02\x02<\u01C8\x03" +
        "\x02\x02\x02>\u01D3\x03\x02\x02\x02@\u01DB\x03\x02\x02\x02B\u01E8\x03" +
        "\x02\x02\x02D\u01F3\x03\x02\x02\x02F\u01FF\x03\x02\x02\x02H\u020B\x03" +
        "\x02\x02\x02J\u0217\x03\x02\x02\x02L\u0222\x03\x02\x02\x02N\u0225\x03" +
        "\x02\x02\x02P\u0236\x03\x02\x02\x02R\u023B\x03\x02\x02\x02T\u0241\x03" +
        "\x02\x02\x02V\u025B\x03\x02\x02\x02X\u025D\x03\x02\x02\x02Z\u0268\x03" +
        "\x02\x02\x02\\\u0270\x03\x02\x02\x02^\u0280\x03\x02\x02\x02`\u0282\x03" +
        "\x02\x02\x02b\u0288\x03\x02\x02\x02d\u02B7\x03\x02\x02\x02f\u02D5\x03" +
        "\x02\x02\x02h\u02F3\x03\x02\x02\x02j\u0311\x03\x02\x02\x02l\u0335\x03" +
        "\x02\x02\x02n\u0337\x03\x02\x02\x02p\u033A\x03\x02\x02\x02r\u035F\x03" +
        "\x02\x02\x02t\u0362\x03\x02\x02\x02v\u0366\x03\x02\x02\x02x\u036A\x03" +
        "\x02\x02\x02z\u0372\x03\x02\x02\x02|\u0379\x03\x02\x02\x02~\u037D\x03" +
        "\x02\x02\x02\x80\u0383\x03\x02\x02\x02\x82\u038F\x03\x02\x02\x02\x84\u0397" +
        "\x03\x02\x02\x02\x86\u039F\x03\x02\x02\x02\x88\u03A8\x03\x02\x02\x02\x8A" +
        "\u03B6\x03\x02\x02\x02\x8C\u03BA\x03\x02\x02\x02\x8E\u03BC\x03\x02\x02" +
        "\x02\x90\u03C1\x03\x02\x02\x02\x92\u03C3\x03\x02\x02\x02\x94\u03CA\x03" +
        "\x02\x02\x02\x96\u03CC\x03\x02\x02\x02\x98\u03CE\x03\x02\x02\x02\x9A\u03D3" +
        "\x03\x02\x02\x02\x9C\u03DD\x03\x02\x02\x02\x9E\u03EF\x03\x02\x02\x02\xA0" +
        "\u03F2\x03\x02\x02\x02\xA2\xA4\x05\n\x06\x02\xA3\xA5\x05\x18\r\x02\xA4" +
        "\xA3\x03\x02\x02\x02\xA4\xA5\x03\x02\x02\x02\xA5\xA7\x03\x02\x02\x02\xA6" +
        "\xA8\x05\x1A\x0E\x02\xA7\xA6\x03\x02\x02\x02\xA7\xA8\x03\x02\x02\x02\xA8" +
        "\xAA\x03\x02\x02\x02\xA9\xAB\x05\x1C\x0F\x02\xAA\xA9\x03\x02\x02\x02\xAA" +
        "\xAB\x03\x02\x02\x02\xAB\xAD\x03\x02\x02\x02\xAC\xAE\x05\x1E\x10\x02\xAD" +
        "\xAC\x03\x02\x02\x02\xAD\xAE\x03\x02\x02\x02\xAE\xB0\x03\x02\x02\x02\xAF" +
        "\xB1\x05n8\x02\xB0\xAF\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1\xB3" +
        "\x03\x02\x02\x02\xB2\xB4\x05p9\x02\xB3\xB2\x03\x02\x02\x02\xB3\xB4\x03" +
        "\x02\x02\x02\xB4\xB5\x03\x02\x02\x02\xB5\xB6\x07\x02\x02\x03\xB6\x03\x03" +
        "\x02\x02\x02\xB7\xBA\x05\x8CG\x02\xB8\xBA\x07C\x02\x02\xB9\xB7\x03\x02" +
        "\x02\x02\xB9\xB8\x03\x02\x02\x02\xBA\x05\x03\x02\x02\x02\xBB\xC0\x05\x8C" +
        "G\x02\xBC\xBD\x07\x10\x02\x02\xBD\xBF\x05\x8CG\x02\xBE\xBC\x03\x02\x02" +
        "\x02\xBF\xC2\x03\x02\x02\x02\xC0\xBE\x03\x02\x02\x02\xC0\xC1\x03\x02\x02" +
        "\x02\xC1\xC3\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC3\xC4\x07\x03\x02" +
        "\x02\xC4\xC6\x03\x02\x02\x02\xC5\xBB\x03\x02\x02\x02\xC5\xC6\x03\x02\x02" +
        "\x02\xC6\xC7\x03\x02\x02\x02\xC7\xCA\x05\x8CG\x02\xC8\xCB\x07\x14\x02" +
        "\x02\xC9\xCB\x05\x8CG\x02\xCA\xC8\x03\x02\x02\x02\xCA\xC9\x03\x02\x02" +
        "\x02\xCB\xCC\x03\x02\x02\x02\xCC\xCA\x03\x02\x02\x02\xCC\xCD\x03\x02\x02" +
        "\x02\xCD\xCE\x03\x02\x02\x02\xCE\xD1\x07\x10\x02\x02\xCF\xD2\x05\x04\x03" +
        "\x02\xD0\xD2\x07\x14\x02\x02\xD1\xCF\x03\x02\x02\x02\xD1\xD0\x03\x02\x02" +
        "\x02\xD2\xD3\x03\x02\x02\x02\xD3\xD1\x03\x02\x02\x02\xD3\xD4\x03\x02\x02" +
        "\x02\xD4\xD5\x03\x02\x02\x02\xD5\xD6\x07\x10\x02\x02\xD6\xDB\x05\x8CG" +
        "\x02\xD7\xD8\x07\x10\x02\x02\xD8\xDA\x07C\x02\x02\xD9\xD7\x03\x02\x02" +
        "\x02\xDA\xDD\x03\x02\x02\x02\xDB\xD9\x03\x02\x02\x02\xDB\xDC\x03\x02\x02" +
        "\x02\xDC\xE0\x03\x02\x02\x02\xDD\xDB\x03\x02\x02\x02\xDE\xDF\x07\x14\x02" +
        "\x02\xDF\xE1\x05\x8CG\x02\xE0\xDE\x03\x02\x02\x02\xE0\xE1\x03\x02\x02" +
        "\x02\xE1\x07\x03\x02\x02\x02\xE2\xE3\t\x02\x02\x02\xE3\t\x03\x02\x02\x02" +
        "\xE4\xE9\x05\b\x05\x02\xE5\xE6\x07\n\x02\x02\xE6\xE7\x05\f\x07\x02\xE7" +
        "\xE8\x07\v\x02\x02\xE8\xEA\x03\x02\x02\x02\xE9\xE5\x03\x02\x02\x02\xE9" +
        "\xEA\x03\x02\x02\x02\xEA\xEB\x03\x02\x02\x02\xEB\xEC\x05\x06\x04\x02\xEC" +
        "\v\x03\x02\x02\x02\xED\xF2\x05\x0E\b\x02\xEE\xEF\x07\x13\x02\x02\xEF\xF1" +
        "\x05\x0E\b\x02\xF0\xEE\x03\x02\x02\x02\xF1\xF4\x03\x02\x02\x02\xF2\xF0" +
        "\x03\x02\x02\x02\xF2\xF3\x03\x02\x02\x02\xF3\r\x03\x02\x02\x02\xF4\xF2" +
        "\x03\x02\x02\x02\xF5\xF8\x05\x8CG\x02\xF6\xF7\x07\t\x02\x02\xF7\xF9\x05" +
        "\x10\t\x02\xF8\xF6\x03\x02\x02\x02\xF8\xF9\x03\x02\x02\x02\xF9\x0F\x03" +
        "\x02\x02\x02\xFA\xFC\x05\x12\n\x02\xFB\xFA\x03\x02\x02\x02\xFC\xFF\x03" +
        "\x02\x02\x02\xFD\xFB\x03\x02\x02\x02\xFD\xFE\x03\x02\x02\x02\xFE\x11\x03" +
        "\x02\x02\x02\xFF\xFD\x03\x02\x02\x02\u0100\u0101\n\x03\x02\x02\u0101\x13" +
        "\x03\x02\x02\x02\u0102\u0103\x07\f\x02\x02\u0103\u0104\x07$\x02\x02\u0104" +
        "\u0105\x07\r\x02\x02\u0105\x15\x03\x02\x02\x02\u0106\u0107\x07+\x02\x02" +
        "\u0107\x17\x03\x02\x02\x02\u0108\u0109\x05\x16\f\x02\u0109\u010A\x05\x06" +
        "\x04\x02\u010A\x19\x03\x02\x02\x02\u010B\u010C\x07%\x02\x02\u010C\u010D" +
        "\x05t;\x02\u010D\x1B\x03\x02\x02\x02\u010E\u010F\x07*\x02\x02\u010F\u0110" +
        "\x05t;\x02\u0110\x1D\x03\x02\x02\x02\u0111\u0112\x07,\x02\x02\u0112\u0113" +
        "\x05\"\x12\x02\u0113\x1F\x03\x02\x02\x02\u0114\u0116\x05*\x16\x02\u0115" +
        "\u0114\x03\x02\x02\x02\u0115\u0116\x03\x02\x02\x02\u0116\u0117\x03\x02" +
        "\x02\x02\u0117\u012E\x05\"\x12\x02\u0118\u011A\x05*\x16\x02\u0119\u0118" +
        "\x03\x02\x02\x02\u0119\u011A\x03\x02\x02\x02\u011A\u011B\x03\x02\x02\x02" +
        "\u011B\u011C\x07.\x02\x02\u011C\u011E\x05\x92J\x02\u011D\u011F\x05\x14" +
        "\v\x02\u011E\u011D\x03\x02\x02\x02\u011E\u011F\x03\x02\x02\x02\u011F\u0121" +
        "\x03\x02\x02\x02\u0120\u0122\x05$\x13\x02\u0121\u0120\x03\x02\x02\x02" +
        "\u0121\u0122\x03\x02\x02\x02\u0122\u0123\x03\x02\x02\x02\u0123\u0124\x05" +
        "\x9AN\x02\u0124\u012E\x03\x02\x02\x02\u0125\u0127\x05*\x16\x02\u0126\u0125" +
        "\x03\x02\x02\x02\u0126\u0127\x03\x02\x02\x02\u0127\u0128\x03\x02\x02\x02" +
        "\u0128\u012E\x05:\x1E\x02\u0129\u012B\x05*\x16\x02\u012A\u0129\x03\x02" +
        "\x02\x02\u012A\u012B\x03\x02\x02\x02\u012B\u012C\x03\x02\x02\x02\u012C" +
        "\u012E\x05@!\x02\u012D\u0115\x03\x02\x02\x02\u012D\u0119\x03\x02\x02\x02" +
        "\u012D\u0126\x03\x02\x02\x02\u012D\u012A\x03\x02\x02\x02\u012E!\x03\x02" +
        "\x02\x02\u012F\u0131\x05\x92J\x02\u0130\u0132\x05\x14\v\x02\u0131\u0130" +
        "\x03\x02\x02\x02\u0131\u0132\x03\x02\x02\x02\u0132\u0134\x03\x02\x02\x02" +
        "\u0133\u0135\x05$\x13\x02\u0134\u0133\x03\x02\x02\x02\u0134\u0135\x03" +
        "\x02\x02\x02\u0135\u0137\x03\x02\x02\x02\u0136\u0138\x05(\x15\x02\u0137" +
        "\u0136\x03\x02\x02\x02\u0137\u0138\x03\x02\x02\x02\u0138#\x03\x02\x02" +
        "\x02\u0139\u013A\x07/\x02\x02\u013A\u013B\x07-\x02\x02\u013B\u013C\x07" +
        "\x04\x02\x02\u013C\u013D\x05&\x14\x02\u013D\u013E\x07\x05\x02\x02\u013E" +
        "%\x03\x02\x02\x02\u013F\u0140\x07C\x02\x02\u0140\u0141\x07\b\x02\x02\u0141" +
        "\u0147\x07C\x02\x02\u0142\u0143\x07C\x02\x02\u0143\u0144\x07\b\x02\x02" +
        "\u0144\u0147\x07\x17\x02\x02\u0145\u0147\x07C\x02\x02\u0146\u013F\x03" +
        "\x02\x02\x02\u0146\u0142\x03\x02\x02\x02\u0146\u0145\x03\x02\x02\x02\u0147" +
        "\'\x03\x02\x02\x02\u0148\u0149\x07-\x02\x02\u0149\u014B\x07\x04\x02\x02" +
        "\u014A\u014C\x05V,\x02\u014B\u014A\x03\x02\x02\x02\u014C\u014D\x03\x02" +
        "\x02\x02\u014D\u014B\x03\x02\x02\x02\u014D\u014E\x03\x02\x02\x02\u014E" +
        "\u014F\x03\x02\x02\x02\u014F\u0150\x07\x05\x02\x02\u0150\u0156\x03\x02" +
        "\x02\x02\u0151\u0152\x07-\x02\x02\u0152\u0153\x07\x04\x02\x02\u0153\u0154" +
        "\x07\x17\x02\x02\u0154\u0156\x07\x05\x02\x02\u0155\u0148\x03\x02\x02\x02" +
        "\u0155\u0151\x03\x02\x02\x02\u0156)\x03\x02\x02\x02\u0157\u0158\x078\x02" +
        "\x02\u0158\u015C\x05\x14\v\x02\u0159\u015A\x079\x02\x02\u015A\u015C\x05" +
        "\x14\v\x02\u015B\u0157\x03\x02\x02\x02\u015B\u0159\x03\x02\x02\x02\u015C" +
        "+\x03\x02\x02\x02\u015D\u0164\x07\x17\x02\x02\u015E\u0160\x05.\x18\x02" +
        "\u015F\u015E\x03\x02\x02\x02\u0160\u0161\x03\x02\x02\x02\u0161\u015F\x03" +
        "\x02\x02\x02\u0161\u0162\x03\x02\x02\x02\u0162\u0164\x03\x02\x02\x02\u0163" +
        "\u015D\x03\x02\x02\x02\u0163\u015F\x03\x02\x02\x02\u0164-\x03\x02\x02" +
        "\x02\u0165\u0169\x05 \x11\x02\u0166\u0169\x056\x1C\x02\u0167\u0169\x05" +
        "0\x19\x02\u0168\u0165\x03\x02\x02\x02\u0168\u0166\x03\x02\x02\x02\u0168" +
        "\u0167\x03\x02\x02\x02\u0169/\x03\x02\x02\x02\u016A\u016D\x052\x1A\x02" +
        "\u016B\u016C\x07\x13\x02\x02\u016C\u016E\x05\xA0Q\x02\u016D\u016B\x03" +
        "\x02\x02\x02\u016D\u016E\x03\x02\x02\x02\u016E1\x03\x02\x02\x02\u016F" +
        "\u0174\x054\x1B\x02\u0170\u0171\x07\x11\x02\x02\u0171\u0173\x054\x1B\x02" +
        "\u0172\u0170\x03\x02\x02\x02\u0173\u0176\x03\x02\x02\x02\u0174\u0172\x03" +
        "\x02\x02\x02\u0174\u0175\x03\x02\x02\x02\u01753\x03\x02\x02\x02\u0176" +
        "\u0174\x03\x02\x02\x02\u0177\u0178\x05\xA0Q\x02\u0178\u0179\x07\x16\x02" +
        "\x02\u0179\u017A\x05z>\x02\u017A5\x03\x02\x02\x02\u017B\u017E\x05B\"\x02" +
        "\u017C\u017D\x07\x13\x02\x02\u017D\u017F\x07D\x02\x02\u017E\u017C\x03" +
        "\x02\x02\x02\u017E\u017F\x03\x02\x02\x02\u017F\u01A0\x03\x02\x02\x02\u0180" +
        "\u0183\x05D#\x02\u0181\u0182\x07\x13\x02\x02\u0182\u0184\x05\xA0Q\x02" +
        "\u0183\u0181\x03\x02\x02\x02\u0183\u0184\x03\x02\x02\x02\u0184\u01A0\x03" +
        "\x02\x02\x02\u0185\u0188\x05\x86D\x02\u0186\u0187\x07\x13\x02\x02\u0187" +
        "\u0189\x05\x8EH\x02\u0188\u0186\x03\x02\x02\x02\u0188\u0189\x03\x02\x02" +
        "\x02\u0189\u01A0\x03\x02\x02\x02\u018A\u018D\x05F$\x02\u018B\u018C\x07" +
        "\x13\x02\x02\u018C\u018E\x07!\x02\x02\u018D\u018B\x03\x02\x02\x02\u018D" +
        "\u018E\x03\x02\x02\x02\u018E\u01A0\x03\x02\x02\x02\u018F\u0192\x05H%\x02" +
        "\u0190\u0191\x07\x13\x02\x02\u0191\u0193\x07\"\x02\x02\u0192\u0190\x03" +
        "\x02\x02\x02\u0192\u0193\x03\x02\x02\x02\u0193\u01A0\x03\x02\x02\x02\u0194" +
        "\u0197\x05J&\x02\u0195\u0196\x07\x13\x02\x02\u0196\u0198\x07#\x02\x02" +
        "\u0197\u0195\x03\x02\x02\x02\u0197\u0198\x03\x02\x02\x02\u0198\u01A0\x03" +
        "\x02\x02\x02\u0199\u019C\x05L\'\x02\u019A\u019B\x07\x13\x02\x02\u019B" +
        "\u019D\x07 \x02\x02\u019C\u019A\x03\x02\x02\x02\u019C\u019D\x03\x02\x02" +
        "\x02\u019D\u01A0\x03\x02\x02\x02\u019E\u01A0\x058\x1D\x02\u019F\u017B" +
        "\x03\x02\x02\x02\u019F\u0180\x03\x02\x02\x02\u019F\u0185\x03\x02\x02\x02" +
        "\u019F\u018A\x03\x02\x02\x02\u019F\u018F\x03\x02\x02\x02\u019F\u0194\x03" +
        "\x02\x02\x02\u019F\u0199\x03\x02\x02\x02\u019F\u019E\x03\x02\x02\x02\u01A0" +
        "7\x03\x02\x02\x02\u01A1\u01A2\x07\f\x02\x02\u01A2\u01A5\x07$\x02\x02\u01A3" +
        "\u01A4\x07\x13\x02\x02\u01A4\u01A6\x07$\x02\x02\u01A5\u01A3\x03\x02\x02" +
        "\x02\u01A5\u01A6\x03\x02\x02\x02\u01A6\u01A7\x03\x02\x02\x02\u01A7\u01A8" +
        "\x07\r\x02\x02\u01A89\x03\x02\x02\x02\u01A9\u01AA\x072\x02\x02\u01AA\u01AC" +
        "\x05\x92J\x02\u01AB\u01AD\x05\x14\v\x02\u01AC\u01AB\x03\x02\x02\x02\u01AC" +
        "\u01AD\x03\x02\x02\x02\u01AD\u01AF\x03\x02\x02\x02\u01AE\u01B0\x05$\x13" +
        "\x02\u01AF\u01AE\x03\x02\x02\x02\u01AF\u01B0\x03\x02\x02\x02\u01B0\u01B6" +
        "\x03\x02\x02\x02\u01B1\u01B2\x07-\x02\x02\u01B2\u01B3\x07\x04\x02\x02" +
        "\u01B3\u01B4\x05<\x1F\x02\u01B4\u01B5\x07\x05\x02\x02\u01B5\u01B7\x03" +
        "\x02\x02\x02\u01B6\u01B1\x03\x02\x02\x02\u01B6\u01B7\x03\x02\x02\x02\u01B7" +
        "\u01C0\x03\x02\x02\x02\u01B8\u01B9\x072\x02\x02\u01B9\u01BB\x05\x92J\x02" +
        "\u01BA\u01BC\x05\x14\v\x02\u01BB\u01BA\x03\x02\x02\x02\u01BB\u01BC\x03" +
        "\x02\x02\x02\u01BC\u01BD\x03\x02\x02\x02\u01BD\u01BE\x07<\x02\x02\u01BE" +
        "\u01C0\x03\x02\x02\x02\u01BF\u01A9\x03\x02\x02\x02\u01BF\u01B8\x03\x02" +
        "\x02\x02\u01C0;\x03\x02\x02\x02\u01C1\u01C5";
    AdlParser._serializedATNSegment1 = "\x070\x02\x02\u01C2\u01C4\x05> \x02\u01C3\u01C2\x03\x02\x02\x02\u01C4" +
        "\u01C7\x03\x02\x02\x02\u01C5\u01C3\x03\x02\x02\x02\u01C5\u01C6\x03\x02" +
        "\x02\x02\u01C6\u01C9\x03\x02\x02\x02\u01C7\u01C5\x03\x02\x02\x02\u01C8" +
        "\u01C1\x03\x02\x02\x02\u01C8\u01C9\x03\x02\x02\x02\u01C9\u01D1\x03\x02" +
        "\x02\x02\u01CA\u01CE\x071\x02\x02\u01CB\u01CD\x05> \x02\u01CC\u01CB\x03" +
        "\x02\x02\x02\u01CD\u01D0\x03\x02\x02\x02\u01CE\u01CC\x03\x02\x02\x02\u01CE" +
        "\u01CF\x03\x02\x02\x02\u01CF\u01D2\x03\x02\x02\x02\u01D0\u01CE\x03\x02" +
        "\x02\x02\u01D1\u01CA\x03\x02\x02\x02\u01D1\u01D2\x03\x02\x02\x02\u01D2" +
        "=\x03\x02\x02\x02\u01D3\u01D4\x05\x9AN\x02\u01D4\u01D5\x07-\x02\x02\u01D5" +
        "\u01D6\x07\x04\x02\x02\u01D6\u01D7\x056\x1C\x02\u01D7\u01D8\x07\x05\x02" +
        "\x02\u01D8?\x03\x02\x02\x02\u01D9\u01DC\x07:\x02\x02\u01DA\u01DC\x07;" +
        "\x02\x02\u01DB\u01D9\x03\x02\x02\x02\u01DB\u01DA\x03\x02\x02\x02\u01DC" +
        "\u01DD\x03\x02\x02\x02\u01DD\u01DE\x05\x94K\x02\u01DE\u01DF\x07\f\x02" +
        "\x02\u01DF\u01E0\x07$\x02\x02\u01E0\u01E1\x07\x11\x02\x02\u01E1\u01E2" +
        "\x05\x06\x04\x02\u01E2\u01E4\x07\r\x02\x02\u01E3\u01E5\x05$\x13\x02\u01E4" +
        "\u01E3\x03\x02\x02\x02\u01E4\u01E5\x03\x02\x02\x02\u01E5A\x03\x02\x02" +
        "\x02\u01E6\u01E9\x05\x82B\x02\u01E7\u01E9\x05P)\x02\u01E8\u01E6\x03\x02" +
        "\x02\x02\u01E8\u01E7\x03\x02\x02\x02\u01E9C\x03\x02\x02\x02\u01EA\u01F4" +
        "\x05\x84C\x02\u01EB\u01F0\x05d3\x02\u01EC\u01ED\x07\x11\x02\x02\u01ED" +
        "\u01EF\x05d3\x02\u01EE\u01EC\x03\x02\x02\x02\u01EF\u01F2\x03\x02\x02\x02" +
        "\u01F0\u01EE\x03\x02\x02\x02\u01F0\u01F1\x03\x02\x02\x02\u01F1\u01F4\x03" +
        "\x02\x02\x02\u01F2\u01F0\x03\x02\x02\x02\u01F3\u01EA\x03\x02\x02\x02\u01F3" +
        "\u01EB\x03\x02\x02\x02\u01F4E\x03\x02\x02\x02\u01F5\u0200\x07\x1D\x02" +
        "\x02\u01F6\u0200\x07!\x02\x02\u01F7\u01FC\x05j6\x02\u01F8\u01F9\x07\x11" +
        "\x02\x02\u01F9\u01FB\x05j6\x02\u01FA\u01F8\x03\x02\x02\x02\u01FB\u01FE" +
        "\x03\x02\x02\x02\u01FC\u01FA\x03\x02\x02\x02\u01FC\u01FD\x03\x02\x02\x02" +
        "\u01FD\u0200\x03\x02\x02\x02\u01FE\u01FC\x03\x02\x02\x02\u01FF\u01F5\x03" +
        "\x02\x02\x02\u01FF\u01F6\x03\x02\x02\x02\u01FF\u01F7\x03\x02\x02\x02\u0200" +
        "G\x03\x02\x02\x02\u0201\u020C\x07\x1F\x02\x02\u0202\u020C\x07\"\x02\x02" +
        "\u0203\u0208\x05f4\x02\u0204\u0205\x07\x11\x02\x02\u0205\u0207\x05f4\x02" +
        "\u0206\u0204\x03\x02\x02\x02\u0207\u020A\x03\x02\x02\x02\u0208\u0206\x03" +
        "\x02\x02\x02\u0208\u0209\x03\x02\x02\x02\u0209\u020C\x03\x02\x02\x02\u020A" +
        "\u0208\x03\x02\x02\x02\u020B\u0201\x03\x02\x02\x02\u020B\u0202\x03\x02" +
        "\x02\x02\u020B\u0203\x03\x02\x02\x02\u020CI\x03\x02\x02\x02\u020D\u0218" +
        "\x07\x1E\x02\x02\u020E\u0218\x07#\x02\x02\u020F\u0214\x05h5\x02\u0210" +
        "\u0211\x07\x11\x02\x02\u0211\u0213\x05h5\x02\u0212\u0210\x03\x02\x02\x02" +
        "\u0213\u0216\x03\x02\x02\x02\u0214\u0212\x03\x02\x02\x02\u0214\u0215\x03" +
        "\x02\x02\x02\u0215\u0218\x03\x02\x02\x02\u0216\u0214\x03\x02\x02\x02\u0217" +
        "\u020D\x03\x02\x02\x02\u0217\u020E\x03\x02\x02\x02\u0217\u020F\x03\x02" +
        "\x02\x02\u0218K\x03\x02\x02\x02\u0219\u021F\x07 \x02\x02\u021A\u021D\x07" +
        "\x06\x02\x02\u021B\u021E\x05l7\x02\u021C\u021E\x07 \x02\x02\u021D\u021B" +
        "\x03\x02\x02\x02\u021D\u021C\x03\x02\x02\x02\u021E\u0220\x03\x02\x02\x02" +
        "\u021F\u021A\x03\x02\x02\x02\u021F\u0220\x03\x02\x02\x02\u0220\u0223\x03" +
        "\x02\x02\x02\u0221\u0223\x05l7\x02\u0222\u0219\x03\x02\x02\x02\u0222\u0221" +
        "\x03\x02\x02\x02\u0223M\x03\x02\x02\x02\u0224\u0226\x05\x88E\x02\u0225" +
        "\u0224\x03\x02\x02\x02\u0225\u0226\x03\x02\x02\x02\u0226\u022B\x03\x02" +
        "\x02\x02\u0227\u0228\x07\x11\x02\x02\u0228\u022A\x05\x88E\x02\u0229\u0227" +
        "\x03\x02\x02\x02\u022A\u022D\x03\x02\x02\x02\u022B\u0229\x03\x02\x02\x02" +
        "\u022B\u022C\x03\x02\x02\x02\u022CO\x03\x02\x02\x02\u022D\u022B\x03\x02" +
        "\x02\x02\u022E\u022F\x07\x06\x02\x02\u022F\u0230\x05R*\x02\u0230\u0231" +
        "\x07\x06\x02\x02\u0231\u0237\x03\x02\x02\x02\u0232\u0233\x07\x18\x02\x02" +
        "\u0233\u0234\x05T+\x02\u0234\u0235\x07\x18\x02\x02\u0235\u0237\x03\x02" +
        "\x02\x02\u0236\u022E\x03\x02\x02\x02\u0236\u0232\x03\x02\x02\x02\u0237" +
        "Q\x03\x02\x02\x02\u0238\u023A\n\x04\x02\x02\u0239\u0238\x03\x02\x02\x02" +
        "\u023A\u023D\x03\x02\x02\x02\u023B\u0239\x03\x02\x02\x02\u023B\u023C\x03" +
        "\x02\x02\x02\u023CS\x03\x02\x02\x02\u023D\u023B\x03\x02\x02\x02\u023E" +
        "\u0240\n\x05\x02\x02\u023F\u023E\x03\x02\x02\x02\u0240\u0243\x03\x02\x02" +
        "\x02\u0241\u023F\x03\x02\x02\x02\u0241\u0242\x03\x02\x02\x02\u0242U\x03" +
        "\x02\x02\x02\u0243\u0241\x03\x02\x02\x02\u0244\u0246\x05^0\x02\u0245\u0247" +
        "\x05`1\x02\u0246\u0245\x03\x02\x02\x02\u0246\u0247\x03\x02\x02\x02\u0247" +
        "\u0249\x03\x02\x02\x02\u0248\u024A\x05b2\x02\u0249\u0248\x03\x02\x02\x02" +
        "\u0249\u024A\x03\x02\x02\x02\u024A\u0250\x03\x02\x02\x02\u024B\u024C\x07" +
        "-\x02\x02\u024C\u024D\x07\x04\x02\x02\u024D\u024E\x05,\x17\x02\u024E\u024F" +
        "\x07\x05\x02\x02\u024F\u0251\x03\x02\x02\x02\u0250\u024B\x03\x02\x02\x02" +
        "\u0250\u0251\x03\x02\x02\x02\u0251\u025C\x03\x02\x02\x02\u0252\u0254\x05" +
        "X-\x02\u0253\u0255\x05`1\x02\u0254\u0253\x03\x02\x02\x02\u0254\u0255\x03" +
        "\x02\x02\x02\u0255\u0256\x03\x02\x02\x02\u0256\u0257\x07-\x02\x02\u0257" +
        "\u0258\x07\x04\x02\x02\u0258\u0259\x05Z.\x02\u0259\u025A\x07\x05\x02\x02" +
        "\u025A\u025C\x03\x02\x02\x02\u025B\u0244\x03\x02\x02\x02\u025B\u0252\x03" +
        "\x02\x02\x02\u025CW\x03\x02\x02\x02\u025D\u025E\x07\f\x02\x02\u025E\u0263" +
        "\x05^0\x02\u025F\u0260\x07\x11\x02\x02\u0260\u0262\x05^0\x02\u0261\u025F" +
        "\x03\x02\x02\x02\u0262\u0265\x03\x02\x02\x02\u0263\u0261\x03\x02\x02\x02" +
        "\u0263\u0264\x03\x02\x02\x02\u0264\u0266\x03\x02\x02\x02\u0265\u0263\x03" +
        "\x02\x02\x02\u0266\u0267\x07\r\x02\x02\u0267Y\x03\x02\x02\x02\u0268\u026D" +
        "\x05\\/\x02\u0269\u026A\x07\x11\x02\x02\u026A\u026C\x05\\/\x02\u026B\u0269" +
        "\x03\x02\x02\x02\u026C\u026F\x03\x02\x02\x02\u026D\u026B\x03\x02\x02\x02" +
        "\u026D\u026E\x03\x02\x02\x02\u026E[\x03\x02\x02\x02\u026F\u026D\x03\x02" +
        "\x02\x02\u0270\u0271\x07\f\x02\x02\u0271\u0272\x07\x04\x02\x02\u0272\u0273" +
        "\x056\x1C\x02\u0273\u027B\x07\x05\x02\x02\u0274\u0275\x07\x11\x02\x02" +
        "\u0275\u0276\x07\x04\x02\x02\u0276\u0277\x056\x1C\x02\u0277\u0278\x07" +
        "\x05\x02\x02\u0278\u027A\x03\x02\x02\x02\u0279\u0274\x03\x02\x02\x02\u027A" +
        "\u027D\x03\x02\x02\x02\u027B\u0279\x03\x02\x02\x02\u027B\u027C\x03\x02" +
        "\x02\x02\u027C\u027E\x03\x02\x02\x02\u027D\u027B\x03\x02\x02\x02\u027E" +
        "\u027F\x07\r\x02\x02\u027F]\x03\x02\x02\x02\u0280\u0281\x05\x9AN\x02\u0281" +
        "_\x03\x02\x02\x02\u0282\u0283\x077\x02\x02\u0283\u0284\x07-\x02\x02\u0284" +
        "\u0285\x07\x04\x02\x02\u0285\u0286\x05&\x14\x02\u0286\u0287\x07\x05\x02" +
        "\x02\u0287a\x03\x02\x02\x02\u0288\u0289\x073\x02\x02\u0289\u028A\x07-" +
        "\x02\x02\u028A\u028B\x07\x04\x02\x02\u028B\u0291\x05&\x14\x02\u028C\u028F" +
        "\x07\x13\x02\x02\u028D\u0290\x075\x02\x02\u028E\u0290\x074\x02\x02\u028F" +
        "\u028D\x03\x02\x02\x02\u028F\u028E\x03\x02\x02\x02\u0290\u0292\x03\x02" +
        "\x02\x02\u0291\u028C\x03\x02\x02\x02\u0291\u0292\x03\x02\x02\x02\u0292" +
        "\u0295\x03\x02\x02\x02\u0293\u0294\x07\x13\x02\x02\u0294\u0296\x076\x02" +
        "\x02\u0295\u0293\x03\x02\x02\x02\u0295\u0296\x03\x02\x02\x02\u0296\u0297" +
        "\x03\x02\x02\x02\u0297\u0298\x07\x05\x02\x02\u0298c\x03\x02\x02\x02\u0299" +
        "\u029B\x07\x16\x02\x02\u029A\u029C\x07\x0E\x02\x02\u029B\u029A\x03\x02" +
        "\x02\x02\u029B\u029C\x03\x02\x02\x02\u029C\u029D\x03\x02\x02\x02\u029D" +
        "\u029E\x05\xA0Q\x02\u029E\u02A0\x07\b\x02\x02\u029F\u02A1\x07\x0F\x02" +
        "\x02\u02A0\u029F\x03\x02\x02\x02\u02A0\u02A1\x03\x02\x02\x02\u02A1\u02A2" +
        "\x03\x02\x02\x02\u02A2\u02A3\x05\xA0Q\x02\u02A3\u02A4\x07\x16\x02\x02" +
        "\u02A4\u02B8\x03\x02\x02\x02\u02A5\u02B2\x07\x16\x02\x02\u02A6\u02A8\x07" +
        "\x0E\x02\x02\u02A7\u02A9\x07\t\x02\x02\u02A8\u02A7\x03\x02\x02\x02\u02A8" +
        "\u02A9\x03\x02\x02\x02\u02A9\u02AB\x03\x02\x02\x02\u02AA\u02A6\x03\x02" +
        "\x02\x02\u02AA\u02AB\x03\x02\x02\x02\u02AB\u02B3\x03\x02\x02\x02\u02AC" +
        "\u02AE\x07\x0F\x02\x02\u02AD\u02AF\x07\t\x02\x02\u02AE\u02AD\x03\x02\x02" +
        "\x02\u02AE\u02AF\x03\x02\x02\x02\u02AF\u02B1\x03\x02\x02\x02\u02B0\u02AC" +
        "\x03\x02\x02\x02\u02B0\u02B1\x03\x02\x02\x02\u02B1\u02B3\x03\x02\x02\x02" +
        "\u02B2\u02AA\x03\x02\x02\x02\u02B2\u02B0\x03\x02\x02\x02\u02B3\u02B4\x03" +
        "\x02\x02\x02\u02B4\u02B5\x05\xA0Q\x02\u02B5\u02B6\x07\x16\x02\x02\u02B6" +
        "\u02B8\x03\x02\x02\x02\u02B7\u0299\x03\x02\x02\x02\u02B7\u02A5\x03\x02" +
        "\x02\x02\u02B8e\x03\x02\x02\x02\u02B9\u02BB\x07\x16\x02\x02\u02BA\u02BC" +
        "\x07\x0E\x02\x02\u02BB\u02BA\x03\x02\x02\x02\u02BB\u02BC\x03\x02\x02\x02" +
        "\u02BC\u02BD\x03\x02\x02\x02\u02BD\u02BE\x07\"\x02\x02\u02BE\u02C0\x07" +
        "\b\x02\x02\u02BF\u02C1\x07\x0F\x02\x02\u02C0\u02BF\x03\x02\x02\x02\u02C0" +
        "\u02C1\x03\x02\x02\x02\u02C1\u02C2\x03\x02\x02\x02\u02C2\u02C3\x07\"\x02" +
        "\x02\u02C3\u02D6\x07\x16\x02\x02\u02C4\u02D1\x07\x16\x02\x02\u02C5\u02C7" +
        "\x07\x0E\x02\x02\u02C6\u02C8\x07\t\x02\x02\u02C7\u02C6\x03\x02\x02\x02" +
        "\u02C7\u02C8\x03\x02\x02\x02\u02C8\u02CA\x03\x02\x02\x02\u02C9\u02C5\x03" +
        "\x02\x02\x02\u02C9\u02CA\x03\x02\x02\x02\u02CA\u02D2\x03\x02\x02\x02\u02CB" +
        "\u02CD\x07\x0F\x02\x02\u02CC\u02CE\x07\t\x02\x02\u02CD\u02CC\x03\x02\x02" +
        "\x02\u02CD\u02CE\x03\x02\x02\x02\u02CE\u02D0\x03\x02\x02\x02\u02CF\u02CB" +
        "\x03\x02\x02\x02\u02CF\u02D0\x03\x02\x02\x02\u02D0\u02D2\x03\x02\x02\x02" +
        "\u02D1\u02C9\x03\x02\x02\x02\u02D1\u02CF\x03\x02\x02\x02\u02D2\u02D3\x03" +
        "\x02\x02\x02\u02D3\u02D4\x07\"\x02\x02\u02D4\u02D6\x07\x16\x02\x02\u02D5" +
        "\u02B9\x03\x02\x02\x02\u02D5\u02C4\x03\x02\x02\x02\u02D6g\x03\x02\x02" +
        "\x02\u02D7\u02D9\x07\x16\x02\x02\u02D8\u02DA\x07\x0E\x02\x02\u02D9\u02D8" +
        "\x03\x02\x02\x02\u02D9\u02DA\x03\x02\x02\x02\u02DA\u02DB\x03\x02\x02\x02" +
        "\u02DB\u02DC\x07#\x02\x02\u02DC\u02DE\x07\b\x02\x02\u02DD\u02DF\x07\x0F" +
        "\x02\x02\u02DE\u02DD\x03\x02\x02\x02\u02DE\u02DF\x03\x02\x02\x02\u02DF" +
        "\u02E0\x03\x02\x02\x02\u02E0\u02E1\x07#\x02\x02\u02E1\u02F4\x07\x16\x02" +
        "\x02\u02E2\u02EF\x07\x16\x02\x02\u02E3\u02E5\x07\x0E\x02\x02\u02E4\u02E6" +
        "\x07\t\x02\x02\u02E5\u02E4\x03\x02\x02\x02\u02E5\u02E6\x03\x02\x02\x02" +
        "\u02E6\u02E8\x03\x02\x02\x02\u02E7\u02E3\x03\x02\x02\x02\u02E7\u02E8\x03" +
        "\x02\x02\x02\u02E8\u02F0\x03\x02\x02\x02\u02E9\u02EB\x07\x0F\x02\x02\u02EA" +
        "\u02EC\x07\t\x02\x02\u02EB\u02EA\x03\x02\x02\x02\u02EB\u02EC\x03\x02\x02" +
        "\x02\u02EC\u02EE\x03\x02\x02\x02\u02ED\u02E9\x03\x02\x02\x02\u02ED\u02EE" +
        "\x03\x02\x02\x02\u02EE\u02F0\x03\x02\x02\x02\u02EF\u02E7\x03\x02\x02\x02" +
        "\u02EF\u02ED\x03\x02\x02\x02\u02F0\u02F1\x03\x02\x02\x02\u02F1\u02F2\x07" +
        "#\x02\x02\u02F2\u02F4\x07\x16\x02\x02\u02F3\u02D7\x03\x02\x02\x02\u02F3" +
        "\u02E2\x03\x02\x02\x02\u02F4i\x03\x02\x02\x02\u02F5\u02F7\x07\x16\x02" +
        "\x02\u02F6\u02F8\x07\x0E\x02\x02\u02F7\u02F6\x03\x02\x02\x02\u02F7\u02F8" +
        "\x03\x02\x02\x02\u02F8\u02F9\x03\x02\x02\x02\u02F9\u02FA\x07!\x02\x02" +
        "\u02FA\u02FC\x07\b\x02\x02\u02FB\u02FD\x07\x0F\x02\x02\u02FC\u02FB\x03" +
        "\x02\x02\x02\u02FC\u02FD\x03\x02\x02\x02\u02FD\u02FE\x03\x02\x02\x02\u02FE" +
        "\u02FF\x07!\x02\x02\u02FF\u0312\x07\x16\x02\x02\u0300\u030D\x07\x16\x02" +
        "\x02\u0301\u0303\x07\x0E\x02\x02\u0302\u0304\x07\t\x02\x02\u0303\u0302" +
        "\x03\x02\x02\x02\u0303\u0304\x03\x02\x02\x02\u0304\u0306\x03\x02\x02\x02" +
        "\u0305\u0301\x03\x02\x02\x02\u0305\u0306\x03\x02\x02\x02\u0306\u030E\x03" +
        "\x02\x02\x02\u0307\u0309\x07\x0F\x02\x02\u0308\u030A\x07\t\x02\x02\u0309" +
        "\u0308\x03\x02\x02\x02\u0309\u030A\x03\x02\x02\x02\u030A\u030C\x03\x02" +
        "\x02\x02\u030B\u0307\x03\x02\x02\x02\u030B\u030C\x03\x02\x02\x02\u030C" +
        "\u030E\x03\x02\x02\x02\u030D\u0305\x03\x02\x02\x02\u030D\u030B\x03\x02" +
        "\x02\x02\u030E\u030F\x03\x02\x02\x02\u030F\u0310\x07!\x02\x02\u0310\u0312" +
        "\x07\x16\x02\x02\u0311\u02F5\x03\x02\x02\x02\u0311\u0300\x03\x02\x02\x02" +
        "\u0312k\x03\x02\x02\x02\u0313\u0315\x07\x16\x02\x02\u0314\u0316\x07\x0E" +
        "\x02\x02\u0315\u0314\x03\x02\x02\x02\u0315\u0316\x03\x02\x02\x02\u0316" +
        "\u0319\x03\x02\x02\x02\u0317\u031A\x07 \x02\x02\u0318\u031A\x07\x17\x02" +
        "\x02\u0319\u0317\x03\x02\x02\x02\u0319\u0318\x03\x02\x02\x02\u031A\u031B" +
        "\x03\x02\x02\x02\u031B\u031D\x07\b\x02\x02\u031C\u031E\x07\x0F\x02\x02" +
        "\u031D\u031C\x03\x02\x02\x02\u031D\u031E\x03\x02\x02\x02\u031E\u0321\x03" +
        "\x02\x02\x02\u031F\u0322\x07 \x02\x02\u0320\u0322\x07\x17\x02\x02\u0321" +
        "\u031F\x03\x02\x02\x02\u0321\u0320\x03\x02\x02\x02\u0322\u0323\x03\x02" +
        "\x02\x02\u0323\u0336\x07\x16\x02\x02\u0324\u0331\x07\x16\x02\x02\u0325" +
        "\u0327\x07\x0E\x02\x02\u0326\u0328\x07\t\x02\x02\u0327\u0326\x03\x02\x02" +
        "\x02\u0327\u0328\x03\x02\x02\x02\u0328\u032A\x03\x02\x02\x02\u0329\u0325" +
        "\x03\x02\x02\x02\u0329\u032A\x03\x02\x02\x02\u032A\u0332\x03\x02\x02\x02" +
        "\u032B\u032D\x07\x0F\x02\x02\u032C\u032E\x07\t\x02\x02\u032D\u032C\x03" +
        "\x02\x02\x02\u032D\u032E\x03\x02\x02\x02\u032E\u0330\x03\x02\x02\x02\u032F" +
        "\u032B\x03\x02\x02\x02\u032F\u0330\x03\x02\x02\x02\u0330\u0332\x03\x02" +
        "\x02\x02\u0331\u0329\x03\x02\x02\x02\u0331\u032F\x03\x02\x02\x02\u0332" +
        "\u0333\x03\x02\x02\x02\u0333\u0334\x07 \x02\x02\u0334\u0336\x07\x16\x02" +
        "\x02\u0335\u0313\x03\x02\x02\x02\u0335\u0324\x03\x02\x02\x02\u0336m\x03" +
        "\x02\x02\x02\u0337\u0338\x07>\x02\x02\u0338\u0339\x05t;\x02\u0339o\x03" +
        "\x02\x02\x02\u033A\u033B\x07=\x02\x02\u033B\u033C\x05t;\x02\u033Cq\x03" +
        "\x02\x02\x02\u033D\u0342\x07\x0F\x02\x02\u033E\u0343\x05|?\x02\u033F\u0343" +
        "\x05x=\x02\u0340\u0343\x05\x80A\x02\u0341\u0343\x05d3\x02\u0342\u033E" +
        "\x03\x02\x02\x02\u0342\u033F\x03\x02\x02\x02\u0342\u0340\x03\x02\x02\x02" +
        "\u0342\u0341\x03\x02\x02\x02\u0343\u0344\x03\x02\x02\x02\u0344\u0346\x07" +
        "\x0E\x02\x02\u0345\u0347\x07\x13\x02\x02\u0346\u0345\x03\x02\x02\x02\u0346" +
        "\u0347\x03\x02\x02\x02\u0347\u0360\x03\x02\x02\x02\u0348\u0349\x07\n\x02" +
        "\x02\u0349\u034A\x05\x94K\x02\u034A\u034B\x07\v\x02\x02\u034B\u034E\x03" +
        "\x02\x02\x02\u034C\u034E\x05\x94K\x02\u034D\u0348\x03\x02\x02\x02\u034D" +
        "\u034C\x03\x02\x02\x02\u034D\u034E\x03\x02\x02\x02\u034E\u034F\x03\x02" +
        "\x02\x02\u034F\u0351\x07\x0F\x02\x02\u0350\u0352\x05t;\x02\u0351\u0350" +
        "\x03\x02\x02\x02\u0351\u0352\x03\x02\x02\x02\u0352\u0353\x03\x02\x02\x02" +
        "\u0353\u0355\x07\x0E\x02\x02\u0354\u0356\x07\x13\x02\x02\u0355\u0354\x03" +
        "\x02\x02\x02\u0355\u0356\x03\x02\x02\x02\u0356\u0360\x03\x02\x02\x02\u0357" +
        "\u0358\x07\x0F\x02\x02\u0358\u0359\x05\xA0Q\x02\u0359\u035A\x07\x0E\x02" +
        "\x02\u035A\u0360\x03\x02\x02\x02\u035B\u035C\x07\x0F\x02\x02\u035C\u035D" +
        "\x05\x9CO\x02\u035D\u035E\x07\x0E\x02\x02\u035E\u0360\x03\x02\x02\x02" +
        "\u035F\u033D\x03\x02\x02\x02\u035F\u034D\x03\x02\x02\x02\u035F\u0357\x03" +
        "\x02\x02\x02\u035F\u035B\x03\x02\x02\x02\u0360s\x03\x02\x02\x02\u0361" +
        "\u0363\x05v<\x02\u0362\u0361\x03\x02\x02\x02\u0363\u0364\x03\x02\x02\x02" +
        "\u0364\u0362\x03\x02\x02\x02\u0364\u0365\x03\x02\x02\x02\u0365u\x03\x02" +
        "\x02\x02\u0366\u0367\x05\x8CG\x02\u0367\u0368\x07\t\x02\x02\u0368\u0369" +
        "\x05r:\x02\u0369w\x03\x02\x02\x02\u036A\u036F\x05z>\x02\u036B\u036C\x07" +
        "\x11\x02\x02\u036C\u036E\x05z>\x02\u036D\u036B\x03\x02\x02\x02\u036E\u0371" +
        "\x03\x02\x02\x02\u036F\u036D\x03\x02\x02\x02\u036F\u0370\x03\x02\x02\x02" +
        "\u0370y\x03\x02\x02\x02\u0371\u036F\x03\x02\x02\x02\u0372\u0373\x07\f" +
        "\x02\x02\u0373\u0374\x05\x88E\x02\u0374\u0375\x07\x03\x02\x02\u0375\u0376" +
        "\x05\x88E\x02\u0376\u0377\x07\r\x02\x02\u0377{\x03\x02\x02\x02\u0378\u037A" +
        "\x05~@\x02\u0379\u0378\x03\x02\x02\x02\u037A\u037B\x03\x02\x02\x02\u037B" +
        "\u0379\x03\x02\x02\x02\u037B\u037C\x03\x02\x02\x02\u037C}\x03\x02\x02" +
        "\x02\u037D\u037E\x07\f\x02\x02\u037E\u037F\x07D\x02\x02\u037F\u0380\x07" +
        "\r\x02\x02\u0380\u0381\x07\t\x02\x02\u0381\u0382\x05r:\x02\u0382\x7F\x03" +
        "\x02\x02\x02\u0383\u0388\x07D\x02\x02\u0384\u0385\x07\x11\x02\x02\u0385" +
        "\u0387\x07D\x02\x02\u0386\u0384\x03\x02\x02\x02\u0387\u038A\x03\x02\x02" +
        "\x02\u0388\u0386\x03\x02\x02\x02\u0388\u0389\x03\x02\x02\x02\u0389\u038D" +
        "\x03\x02\x02\x02\u038A\u0388\x03\x02\x02\x02\u038B\u038C\x07\x11\x02\x02" +
        "\u038C\u038E\x07\x07\x02\x02\u038D\u038B\x03\x02\x02\x02\u038D\u038E\x03" +
        "\x02\x02\x02\u038E\x81\x03\x02\x02\x02\u038F\u0394\x07D\x02\x02\u0390" +
        "\u0391\x07\x11\x02\x02\u0391\u0393\x07D\x02\x02\u0392\u0390\x03\x02\x02" +
        "\x02\u0393\u0396\x03\x02\x02\x02\u0394\u0392\x03\x02\x02\x02\u0394\u0395" +
        "\x03\x02\x02\x02\u0395\x83\x03\x02\x02\x02\u0396\u0394\x03\x02\x02\x02" +
        "\u0397\u039C\x05\xA0Q\x02\u0398\u0399\x07\x11\x02\x02\u0399\u039B\x05" +
        "\xA0Q\x02\u039A\u0398\x03\x02\x02\x02\u039B\u039E\x03\x02\x02\x02\u039C" +
        "\u039A\x03\x02\x02\x02\u039C\u039D\x03\x02\x02\x02\u039D\x85\x03\x02\x02" +
        "\x02\u039E\u039C\x03\x02\x02\x02\u039F\u03A4\x05\x8EH\x02\u03A0\u03A1" +
        "\x07\x11\x02\x02\u03A1\u03A3\x05\x8EH\x02\u03A2\u03A0\x03\x02\x02\x02" +
        "\u03A3\u03A6\x03\x02\x02\x02\u03A4\u03A2\x03\x02\x02\x02\u03A4\u03A5\x03" +
        "\x02\x02\x02\u03A5\x87\x03\x02\x02\x02\u03A6\u03A4\x03\x02\x02\x02\u03A7" +
        "\u03A9\x05\x8AF\x02\u03A8\u03A7\x03\x02\x02\x02\u03A9\u03AA\x03\x02\x02" +
        "\x02\u03AA\u03A8\x03\x02\x02\x02\u03AA\u03AB\x03\x02\x02\x02\u03AB\x89" +
        "\x03\x02\x02\x02\u03AC\u03B7\x05\x8CG\x02\u03AD\u03B7\x05\xA0Q\x02\u03AE" +
        "\u03B7\x07!\x02\x02\u03AF\u03B7\x07\"\x02\x02\u03B0\u03B7\x07\x10\x02" +
        "\x02\u03B1\u03B7\x07\x14\x02\x02\u03B2\u03B7\x07\n\x02\x02\u03B3\u03B7" +
        "\x07\v\x02\x02\u03B4\u03B7\x07\x12\x02\x02\u03B5\u03B7\x07\x06\x02\x02" +
        "\u03B6\u03AC\x03\x02\x02\x02\u03B6\u03AD\x03\x02\x02\x02\u03B6\u03AE\x03" +
        "\x02\x02\x02\u03B6\u03AF\x03\x02\x02\x02\u03B6\u03B0\x03\x02\x02\x02\u03B6" +
        "\u03B1\x03\x02\x02\x02\u03B6\u03B2\x03\x02\x02\x02\u03B6\u03B3\x03\x02" +
        "\x02\x02\u03B6\u03B4\x03\x02\x02\x02\u03B6\u03B5\x03\x02\x02\x02\u03B7" +
        "\x8B\x03\x02\x02\x02\u03B8\u03BB\x05\x90I\x02\u03B9\u03BB\x05\x94K\x02" +
        "\u03BA\u03B8\x03\x02\x02\x02\u03BA\u03B9\x03\x02\x02\x02\u03BB\x8D\x03" +
        "\x02\x02\x02\u03BC\u03BD\t\x06\x02\x02\u03BD\x8F\x03\x02\x02\x02\u03BE" +
        "\u03C2\x07B\x02\x02\u03BF\u03C2\x05\x96L\x02\u03C0\u03C2\x07$\x02\x02" +
        "\u03C1\u03BE\x03\x02\x02\x02\u03C1\u03BF\x03\x02\x02\x02\u03C1\u03C0\x03" +
        "\x02\x02\x02\u03C2\x91\x03\x02\x02\x02\u03C3\u03C8\x05\x94K\x02\u03C4" +
        "\u03C5\x07\x0F\x02\x02\u03C5\u03C6\x05\x94K\x02\u03C6\u03C7\x07\x0E\x02" +
        "\x02\u03C7\u03C9\x03\x02\x02\x02\u03C8\u03C4\x03\x02\x02\x02\u03C8\u03C9" +
        "\x03\x02\x02\x02\u03C9\x93\x03\x02\x02\x02\u03CA\u03CB\x07A\x02\x02\u03CB" +
        "\x95\x03\x02\x02\x02\u03CC\u03CD\t\x07\x02\x02\u03CD\x97\x03\x02\x02\x02" +
        "\u03CE\u03D0\x05\x90I\x02\u03CF\u03D1\x05\x14\v\x02\u03D0\u03CF\x03\x02" +
        "\x02\x02\u03D0\u03D1\x03\x02\x02\x02\u03D1\x99\x03\x02\x02\x02\u03D2\u03D4" +
        "\x07\x06\x02\x02\u03D3\u03D2\x03\x02\x02\x02\u03D3\u03D4\x03\x02\x02\x02" +
        "\u03D4\u03D5\x03\x02\x02\x02\u03D5\u03DA\x05\x98M\x02\u03D6\u03D7\x07" +
        "\x06\x02\x02\u03D7\u03D9\x05\x98M\x02\u03D8\u03D6\x03\x02\x02\x02\u03D9" +
        "\u03DC\x03\x02\x02\x02\u03DA\u03D8\x03\x02\x02\x02\u03DA\u03DB\x03\x02" +
        "\x02\x02\u03DB\x9B\x03\x02\x02\x02\u03DC\u03DA\x03\x02\x02\x02\u03DD\u03DE" +
        "\x05\x8CG\x02\u03DE\u03E9\x07\x12\x02\x02\u03DF\u03EA\x05\x8AF\x02\u03E0" +
        "\u03EA\x07\x15\x02\x02\u03E1\u03EA\x07\x10\x02\x02\u03E2\u03EA\x07\t\x02" +
        "\x02\u03E3\u03EA\x07\x1B\x02\x02\u03E4\u03EA\x07\x14\x02\x02\u03E5\u03EA" +
        "\x07\x06\x02\x02\u03E6\u03EA\x07\x19\x02\x02\u03E7\u03EA\x07\x13\x02\x02" +
        "\u03E8\u03EA\x07E\x02\x02\u03E9\u03DF\x03\x02\x02\x02\u03E9\u03E0\x03" +
        "\x02\x02\x02\u03E9\u03E1\x03\x02\x02\x02\u03E9\u03E2\x03\x02\x02\x02\u03E9" +
        "\u03E3\x03\x02\x02\x02\u03E9\u03E4\x03\x02\x02\x02\u03E9\u03E5\x03\x02" +
        "\x02\x02\u03E9\u03E6\x03\x02\x02\x02\u03E9\u03E7\x03\x02\x02\x02\u03E9" +
        "\u03E8\x03\x02\x02\x02\u03EA\u03EB\x03\x02\x02\x02\u03EB\u03E9\x03\x02" +
        "\x02\x02\u03EB\u03EC\x03\x02\x02\x02\u03EC\x9D\x03\x02\x02\x02\u03ED\u03F0" +
        "\x05\xA0Q\x02\u03EE\u03F0\x07\x17\x02\x02\u03EF\u03ED\x03\x02\x02\x02" +
        "\u03EF\u03EE\x03\x02\x02\x02\u03F0\x9F\x03\x02\x02\x02\u03F1\u03F3\x07" +
        "\x14\x02\x02\u03F2\u03F1\x03\x02\x02\x02\u03F2\u03F3\x03\x02\x02\x02\u03F3" +
        "\u03F4\x03\x02\x02\x02\u03F4\u03F7\x07C\x02\x02\u03F5\u03F6\x07\x10\x02" +
        "\x02\u03F6\u03F8\x07C\x02\x02\u03F7\u03F5\x03\x02\x02\x02\u03F7\u03F8" +
        "\x03\x02\x02\x02\u03F8\xA1\x03\x02\x02\x02\x9D\xA4\xA7\xAA\xAD\xB0\xB3" +
        "\xB9\xC0\xC5\xCA\xCC\xD1\xD3\xDB\xE0\xE9\xF2\xF8\xFD\u0115\u0119\u011E" +
        "\u0121\u0126\u012A\u012D\u0131\u0134\u0137\u0146\u014D\u0155\u015B\u0161" +
        "\u0163\u0168\u016D\u0174\u017E\u0183\u0188\u018D\u0192\u0197\u019C\u019F" +
        "\u01A5\u01AC\u01AF\u01B6\u01BB\u01BF\u01C5\u01C8\u01CE\u01D1\u01DB\u01E4" +
        "\u01E8\u01F0\u01F3\u01FC\u01FF\u0208\u020B\u0214\u0217\u021D\u021F\u0222" +
        "\u0225\u022B\u0236\u023B\u0241\u0246\u0249\u0250\u0254\u025B\u0263\u026D" +
        "\u027B\u028F\u0291\u0295\u029B\u02A0\u02A8\u02AA\u02AE\u02B0\u02B2\u02B7" +
        "\u02BB\u02C0\u02C7\u02C9\u02CD\u02CF\u02D1\u02D5\u02D9\u02DE\u02E5\u02E7" +
        "\u02EB\u02ED\u02EF\u02F3\u02F7\u02FC\u0303\u0305\u0309\u030B\u030D\u0311" +
        "\u0315\u0319\u031D\u0321\u0327\u0329\u032D\u032F\u0331\u0335\u0342\u0346" +
        "\u034D\u0351\u0355\u035F\u0364\u036F\u037B\u0388\u038D\u0394\u039C\u03A4" +
        "\u03AA\u03B6\u03BA\u03C1\u03C8\u03D0\u03D3\u03DA\u03E9\u03EB\u03EF\u03F2" +
        "\u03F7";
    AdlParser._serializedATN = Utils.join([
        AdlParser._serializedATNSegment0,
        AdlParser._serializedATNSegment1
    ], "");
    tslib_1.__decorate([
        Decorators_2.Override,
        Decorators_1.NotNull,
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [])
    ], AdlParser.prototype, "vocabulary", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], AdlParser.prototype, "grammarFileName", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [])
    ], AdlParser.prototype, "ruleNames", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], AdlParser.prototype, "serializedATN", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", AdlContext)
    ], AdlParser.prototype, "adl", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", AlphanumericContext)
    ], AdlParser.prototype, "alphanumeric", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ArchetypeIdContext)
    ], AdlParser.prototype, "archetypeId", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", HeaderTagContext)
    ], AdlParser.prototype, "headerTag", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", HeaderContext)
    ], AdlParser.prototype, "header", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ArchetypePropertyListContext)
    ], AdlParser.prototype, "archetypePropertyList", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ArchetypePropertyContext)
    ], AdlParser.prototype, "archetypeProperty", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ArchetypePropertyValueContext)
    ], AdlParser.prototype, "archetypePropertyValue", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ArchetypePropertyValuePartContext)
    ], AdlParser.prototype, "archetypePropertyValuePart", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", AtCodeContext)
    ], AdlParser.prototype, "atCode", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", SpecializeTagContext)
    ], AdlParser.prototype, "specializeTag", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", SpecializeContext)
    ], AdlParser.prototype, "specialize", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", LanguageContext)
    ], AdlParser.prototype, "language", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", DescriptionContext)
    ], AdlParser.prototype, "description", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", DefinitionContext)
    ], AdlParser.prototype, "definition", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", TypeConstraintContext)
    ], AdlParser.prototype, "typeConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ComplexObjectConstraintContext)
    ], AdlParser.prototype, "complexObjectConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OccurrencesContext)
    ], AdlParser.prototype, "occurrences", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OccurrenceRangeContext)
    ], AdlParser.prototype, "occurrenceRange", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", AttributeListMatcherContext)
    ], AdlParser.prototype, "attributeListMatcher", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OrderConstraintContext)
    ], AdlParser.prototype, "orderConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", MultiValueConstraintContext)
    ], AdlParser.prototype, "multiValueConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ValueConstraintContext)
    ], AdlParser.prototype, "valueConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OrdinalConstraintContext)
    ], AdlParser.prototype, "ordinalConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OrdinalItemListContext)
    ], AdlParser.prototype, "ordinalItemList", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OrdinalItemContext)
    ], AdlParser.prototype, "ordinalItem", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", PrimitiveValueConstraintContext)
    ], AdlParser.prototype, "primitiveValueConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", TerminologyCodeConstraintContext)
    ], AdlParser.prototype, "terminologyCodeConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ArchetypeSlotConstraintContext)
    ], AdlParser.prototype, "archetypeSlotConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ArchetypeSlotValueConstraintContext)
    ], AdlParser.prototype, "archetypeSlotValueConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ArchetypeSlotSingleConstraintContext)
    ], AdlParser.prototype, "archetypeSlotSingleConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ArchetypeReferenceConstraintContext)
    ], AdlParser.prototype, "archetypeReferenceConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", StringConstraintContext)
    ], AdlParser.prototype, "stringConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", NumberConstraintContext)
    ], AdlParser.prototype, "numberConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", DateTimeConstraintContext)
    ], AdlParser.prototype, "dateTimeConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", DateConstraintContext)
    ], AdlParser.prototype, "dateConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", TimeConstraintContext)
    ], AdlParser.prototype, "timeConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", DurationConstraintContext)
    ], AdlParser.prototype, "durationConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", CodeIdentifierListContext)
    ], AdlParser.prototype, "codeIdentifierList", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", RegularExpressionContext)
    ], AdlParser.prototype, "regularExpression", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", RegularExpressionInner1Context)
    ], AdlParser.prototype, "regularExpressionInner1", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", RegularExpressionInner2Context)
    ], AdlParser.prototype, "regularExpressionInner2", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", AttributeConstraintContext)
    ], AdlParser.prototype, "attributeConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", TupleAttributeIdentifierContext)
    ], AdlParser.prototype, "tupleAttributeIdentifier", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", TupleChildConstraintsContext)
    ], AdlParser.prototype, "tupleChildConstraints", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", TupleChildConstraintContext)
    ], AdlParser.prototype, "tupleChildConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", AttributeIdentifierContext)
    ], AdlParser.prototype, "attributeIdentifier", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", ExistenceContext)
    ], AdlParser.prototype, "existence", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", CardinalityContext)
    ], AdlParser.prototype, "cardinality", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", NumberIntervalConstraintContext)
    ], AdlParser.prototype, "numberIntervalConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", DateIntervalConstraintContext)
    ], AdlParser.prototype, "dateIntervalConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", TimeIntervalConstraintContext)
    ], AdlParser.prototype, "timeIntervalConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", DateTimeIntervalConstraintContext)
    ], AdlParser.prototype, "dateTimeIntervalConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", DurationIntervalConstraintContext)
    ], AdlParser.prototype, "durationIntervalConstraint", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", TerminologyContext)
    ], AdlParser.prototype, "terminology", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", AnnotationsContext)
    ], AdlParser.prototype, "annotations", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OdinValueContext)
    ], AdlParser.prototype, "odinValue", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OdinObjectValueContext)
    ], AdlParser.prototype, "odinObjectValue", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OdinObjectPropertyContext)
    ], AdlParser.prototype, "odinObjectProperty", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OdinCodePhraseValueListContext)
    ], AdlParser.prototype, "odinCodePhraseValueList", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OdinCodePhraseValueContext)
    ], AdlParser.prototype, "odinCodePhraseValue", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OdinMapValueContext)
    ], AdlParser.prototype, "odinMapValue", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OdinMapValueEntryContext)
    ], AdlParser.prototype, "odinMapValueEntry", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", OpenStringListContext)
    ], AdlParser.prototype, "openStringList", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", StringListContext)
    ], AdlParser.prototype, "stringList", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", NumberListContext)
    ], AdlParser.prototype, "numberList", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", BooleanListContext)
    ], AdlParser.prototype, "booleanList", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", CodeIdentifierContext)
    ], AdlParser.prototype, "codeIdentifier", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", CodeIdentifierPartContext)
    ], AdlParser.prototype, "codeIdentifierPart", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", IdentifierContext)
    ], AdlParser.prototype, "identifier", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", BoolContext)
    ], AdlParser.prototype, "bool", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", NameIdentifierContext)
    ], AdlParser.prototype, "nameIdentifier", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", TypeIdentifierWithGenericsContext)
    ], AdlParser.prototype, "typeIdentifierWithGenerics", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", TypeIdentifierContext)
    ], AdlParser.prototype, "typeIdentifier", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", KeywordContext)
    ], AdlParser.prototype, "keyword", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", PathSegmentContext)
    ], AdlParser.prototype, "pathSegment", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", RmPathContext)
    ], AdlParser.prototype, "rmPath", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", UrlContext)
    ], AdlParser.prototype, "url", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", NumberOrStarContext)
    ], AdlParser.prototype, "numberOrStar", null);
    tslib_1.__decorate([
        RuleVersion_1.RuleVersion(0),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", NumberContext)
    ], AdlParser.prototype, "number", null);
    return AdlParser;
}(Parser_1.Parser));
exports.AdlParser = AdlParser;
var AdlContext = /** @class */ (function (_super) {
    tslib_1.__extends(AdlContext, _super);
    function AdlContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AdlContext.prototype.header = function () {
        return this.getRuleContext(0, HeaderContext);
    };
    AdlContext.prototype.EOF = function () { return this.getToken(AdlParser.EOF, 0); };
    AdlContext.prototype.specialize = function () {
        return this.tryGetRuleContext(0, SpecializeContext);
    };
    AdlContext.prototype.language = function () {
        return this.tryGetRuleContext(0, LanguageContext);
    };
    AdlContext.prototype.description = function () {
        return this.tryGetRuleContext(0, DescriptionContext);
    };
    AdlContext.prototype.definition = function () {
        return this.tryGetRuleContext(0, DefinitionContext);
    };
    AdlContext.prototype.terminology = function () {
        return this.tryGetRuleContext(0, TerminologyContext);
    };
    AdlContext.prototype.annotations = function () {
        return this.tryGetRuleContext(0, AnnotationsContext);
    };
    Object.defineProperty(AdlContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_adl; },
        enumerable: true,
        configurable: true
    });
    AdlContext.prototype.enterRule = function (listener) {
        if (listener.enterAdl)
            listener.enterAdl(this);
    };
    AdlContext.prototype.exitRule = function (listener) {
        if (listener.exitAdl)
            listener.exitAdl(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], AdlContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AdlContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AdlContext.prototype, "exitRule", null);
    return AdlContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AdlContext = AdlContext;
var AlphanumericContext = /** @class */ (function (_super) {
    tslib_1.__extends(AlphanumericContext, _super);
    function AlphanumericContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AlphanumericContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    AlphanumericContext.prototype.INTEGER = function () { return this.tryGetToken(AdlParser.INTEGER, 0); };
    Object.defineProperty(AlphanumericContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_alphanumeric; },
        enumerable: true,
        configurable: true
    });
    AlphanumericContext.prototype.enterRule = function (listener) {
        if (listener.enterAlphanumeric)
            listener.enterAlphanumeric(this);
    };
    AlphanumericContext.prototype.exitRule = function (listener) {
        if (listener.exitAlphanumeric)
            listener.exitAlphanumeric(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], AlphanumericContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AlphanumericContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AlphanumericContext.prototype, "exitRule", null);
    return AlphanumericContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AlphanumericContext = AlphanumericContext;
var ArchetypeIdContext = /** @class */ (function (_super) {
    tslib_1.__extends(ArchetypeIdContext, _super);
    function ArchetypeIdContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArchetypeIdContext.prototype.identifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    };
    ArchetypeIdContext.prototype.alphanumeric = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AlphanumericContext);
        }
        else {
            return this.getRuleContext(i, AlphanumericContext);
        }
    };
    ArchetypeIdContext.prototype.INTEGER = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.INTEGER);
        }
        else {
            return this.getToken(AdlParser.INTEGER, i);
        }
    };
    Object.defineProperty(ArchetypeIdContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_archetypeId; },
        enumerable: true,
        configurable: true
    });
    ArchetypeIdContext.prototype.enterRule = function (listener) {
        if (listener.enterArchetypeId)
            listener.enterArchetypeId(this);
    };
    ArchetypeIdContext.prototype.exitRule = function (listener) {
        if (listener.exitArchetypeId)
            listener.exitArchetypeId(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ArchetypeIdContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypeIdContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypeIdContext.prototype, "exitRule", null);
    return ArchetypeIdContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArchetypeIdContext = ArchetypeIdContext;
var HeaderTagContext = /** @class */ (function (_super) {
    tslib_1.__extends(HeaderTagContext, _super);
    function HeaderTagContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    HeaderTagContext.prototype.ARCHETYPE = function () { return this.tryGetToken(AdlParser.ARCHETYPE, 0); };
    HeaderTagContext.prototype.TEMPLATE = function () { return this.tryGetToken(AdlParser.TEMPLATE, 0); };
    HeaderTagContext.prototype.TEMPLATE_OVERLAY = function () { return this.tryGetToken(AdlParser.TEMPLATE_OVERLAY, 0); };
    Object.defineProperty(HeaderTagContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_headerTag; },
        enumerable: true,
        configurable: true
    });
    HeaderTagContext.prototype.enterRule = function (listener) {
        if (listener.enterHeaderTag)
            listener.enterHeaderTag(this);
    };
    HeaderTagContext.prototype.exitRule = function (listener) {
        if (listener.exitHeaderTag)
            listener.exitHeaderTag(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], HeaderTagContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], HeaderTagContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], HeaderTagContext.prototype, "exitRule", null);
    return HeaderTagContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.HeaderTagContext = HeaderTagContext;
var HeaderContext = /** @class */ (function (_super) {
    tslib_1.__extends(HeaderContext, _super);
    function HeaderContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    HeaderContext.prototype.headerTag = function () {
        return this.getRuleContext(0, HeaderTagContext);
    };
    HeaderContext.prototype.archetypeId = function () {
        return this.getRuleContext(0, ArchetypeIdContext);
    };
    HeaderContext.prototype.archetypePropertyList = function () {
        return this.tryGetRuleContext(0, ArchetypePropertyListContext);
    };
    Object.defineProperty(HeaderContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_header; },
        enumerable: true,
        configurable: true
    });
    HeaderContext.prototype.enterRule = function (listener) {
        if (listener.enterHeader)
            listener.enterHeader(this);
    };
    HeaderContext.prototype.exitRule = function (listener) {
        if (listener.exitHeader)
            listener.exitHeader(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], HeaderContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], HeaderContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], HeaderContext.prototype, "exitRule", null);
    return HeaderContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.HeaderContext = HeaderContext;
var ArchetypePropertyListContext = /** @class */ (function (_super) {
    tslib_1.__extends(ArchetypePropertyListContext, _super);
    function ArchetypePropertyListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArchetypePropertyListContext.prototype.archetypeProperty = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ArchetypePropertyContext);
        }
        else {
            return this.getRuleContext(i, ArchetypePropertyContext);
        }
    };
    Object.defineProperty(ArchetypePropertyListContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_archetypePropertyList; },
        enumerable: true,
        configurable: true
    });
    ArchetypePropertyListContext.prototype.enterRule = function (listener) {
        if (listener.enterArchetypePropertyList)
            listener.enterArchetypePropertyList(this);
    };
    ArchetypePropertyListContext.prototype.exitRule = function (listener) {
        if (listener.exitArchetypePropertyList)
            listener.exitArchetypePropertyList(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ArchetypePropertyListContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypePropertyListContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypePropertyListContext.prototype, "exitRule", null);
    return ArchetypePropertyListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArchetypePropertyListContext = ArchetypePropertyListContext;
var ArchetypePropertyContext = /** @class */ (function (_super) {
    tslib_1.__extends(ArchetypePropertyContext, _super);
    function ArchetypePropertyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArchetypePropertyContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    ArchetypePropertyContext.prototype.archetypePropertyValue = function () {
        return this.tryGetRuleContext(0, ArchetypePropertyValueContext);
    };
    Object.defineProperty(ArchetypePropertyContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_archetypeProperty; },
        enumerable: true,
        configurable: true
    });
    ArchetypePropertyContext.prototype.enterRule = function (listener) {
        if (listener.enterArchetypeProperty)
            listener.enterArchetypeProperty(this);
    };
    ArchetypePropertyContext.prototype.exitRule = function (listener) {
        if (listener.exitArchetypeProperty)
            listener.exitArchetypeProperty(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ArchetypePropertyContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypePropertyContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypePropertyContext.prototype, "exitRule", null);
    return ArchetypePropertyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArchetypePropertyContext = ArchetypePropertyContext;
var ArchetypePropertyValueContext = /** @class */ (function (_super) {
    tslib_1.__extends(ArchetypePropertyValueContext, _super);
    function ArchetypePropertyValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArchetypePropertyValueContext.prototype.archetypePropertyValuePart = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ArchetypePropertyValuePartContext);
        }
        else {
            return this.getRuleContext(i, ArchetypePropertyValuePartContext);
        }
    };
    Object.defineProperty(ArchetypePropertyValueContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_archetypePropertyValue; },
        enumerable: true,
        configurable: true
    });
    ArchetypePropertyValueContext.prototype.enterRule = function (listener) {
        if (listener.enterArchetypePropertyValue)
            listener.enterArchetypePropertyValue(this);
    };
    ArchetypePropertyValueContext.prototype.exitRule = function (listener) {
        if (listener.exitArchetypePropertyValue)
            listener.exitArchetypePropertyValue(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ArchetypePropertyValueContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypePropertyValueContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypePropertyValueContext.prototype, "exitRule", null);
    return ArchetypePropertyValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArchetypePropertyValueContext = ArchetypePropertyValueContext;
var ArchetypePropertyValuePartContext = /** @class */ (function (_super) {
    tslib_1.__extends(ArchetypePropertyValuePartContext, _super);
    function ArchetypePropertyValuePartContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(ArchetypePropertyValuePartContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_archetypePropertyValuePart; },
        enumerable: true,
        configurable: true
    });
    ArchetypePropertyValuePartContext.prototype.enterRule = function (listener) {
        if (listener.enterArchetypePropertyValuePart)
            listener.enterArchetypePropertyValuePart(this);
    };
    ArchetypePropertyValuePartContext.prototype.exitRule = function (listener) {
        if (listener.exitArchetypePropertyValuePart)
            listener.exitArchetypePropertyValuePart(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ArchetypePropertyValuePartContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypePropertyValuePartContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypePropertyValuePartContext.prototype, "exitRule", null);
    return ArchetypePropertyValuePartContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArchetypePropertyValuePartContext = ArchetypePropertyValuePartContext;
var AtCodeContext = /** @class */ (function (_super) {
    tslib_1.__extends(AtCodeContext, _super);
    function AtCodeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AtCodeContext.prototype.AT_CODE_VALUE = function () { return this.getToken(AdlParser.AT_CODE_VALUE, 0); };
    Object.defineProperty(AtCodeContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_atCode; },
        enumerable: true,
        configurable: true
    });
    AtCodeContext.prototype.enterRule = function (listener) {
        if (listener.enterAtCode)
            listener.enterAtCode(this);
    };
    AtCodeContext.prototype.exitRule = function (listener) {
        if (listener.exitAtCode)
            listener.exitAtCode(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], AtCodeContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AtCodeContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AtCodeContext.prototype, "exitRule", null);
    return AtCodeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AtCodeContext = AtCodeContext;
var SpecializeTagContext = /** @class */ (function (_super) {
    tslib_1.__extends(SpecializeTagContext, _super);
    function SpecializeTagContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SpecializeTagContext.prototype.SPECIALISE = function () { return this.getToken(AdlParser.SPECIALISE, 0); };
    Object.defineProperty(SpecializeTagContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_specializeTag; },
        enumerable: true,
        configurable: true
    });
    SpecializeTagContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecializeTag)
            listener.enterSpecializeTag(this);
    };
    SpecializeTagContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecializeTag)
            listener.exitSpecializeTag(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], SpecializeTagContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], SpecializeTagContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], SpecializeTagContext.prototype, "exitRule", null);
    return SpecializeTagContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SpecializeTagContext = SpecializeTagContext;
var SpecializeContext = /** @class */ (function (_super) {
    tslib_1.__extends(SpecializeContext, _super);
    function SpecializeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    SpecializeContext.prototype.specializeTag = function () {
        return this.getRuleContext(0, SpecializeTagContext);
    };
    SpecializeContext.prototype.archetypeId = function () {
        return this.getRuleContext(0, ArchetypeIdContext);
    };
    Object.defineProperty(SpecializeContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_specialize; },
        enumerable: true,
        configurable: true
    });
    SpecializeContext.prototype.enterRule = function (listener) {
        if (listener.enterSpecialize)
            listener.enterSpecialize(this);
    };
    SpecializeContext.prototype.exitRule = function (listener) {
        if (listener.exitSpecialize)
            listener.exitSpecialize(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], SpecializeContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], SpecializeContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], SpecializeContext.prototype, "exitRule", null);
    return SpecializeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.SpecializeContext = SpecializeContext;
var LanguageContext = /** @class */ (function (_super) {
    tslib_1.__extends(LanguageContext, _super);
    function LanguageContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    LanguageContext.prototype.LANGUAGE = function () { return this.getToken(AdlParser.LANGUAGE, 0); };
    LanguageContext.prototype.odinObjectValue = function () {
        return this.getRuleContext(0, OdinObjectValueContext);
    };
    Object.defineProperty(LanguageContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_language; },
        enumerable: true,
        configurable: true
    });
    LanguageContext.prototype.enterRule = function (listener) {
        if (listener.enterLanguage)
            listener.enterLanguage(this);
    };
    LanguageContext.prototype.exitRule = function (listener) {
        if (listener.exitLanguage)
            listener.exitLanguage(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], LanguageContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], LanguageContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], LanguageContext.prototype, "exitRule", null);
    return LanguageContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.LanguageContext = LanguageContext;
var DescriptionContext = /** @class */ (function (_super) {
    tslib_1.__extends(DescriptionContext, _super);
    function DescriptionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DescriptionContext.prototype.DESCRIPTION = function () { return this.getToken(AdlParser.DESCRIPTION, 0); };
    DescriptionContext.prototype.odinObjectValue = function () {
        return this.getRuleContext(0, OdinObjectValueContext);
    };
    Object.defineProperty(DescriptionContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_description; },
        enumerable: true,
        configurable: true
    });
    DescriptionContext.prototype.enterRule = function (listener) {
        if (listener.enterDescription)
            listener.enterDescription(this);
    };
    DescriptionContext.prototype.exitRule = function (listener) {
        if (listener.exitDescription)
            listener.exitDescription(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], DescriptionContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DescriptionContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DescriptionContext.prototype, "exitRule", null);
    return DescriptionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DescriptionContext = DescriptionContext;
var DefinitionContext = /** @class */ (function (_super) {
    tslib_1.__extends(DefinitionContext, _super);
    function DefinitionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DefinitionContext.prototype.DEFINITION = function () { return this.getToken(AdlParser.DEFINITION, 0); };
    DefinitionContext.prototype.complexObjectConstraint = function () {
        return this.getRuleContext(0, ComplexObjectConstraintContext);
    };
    Object.defineProperty(DefinitionContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_definition; },
        enumerable: true,
        configurable: true
    });
    DefinitionContext.prototype.enterRule = function (listener) {
        if (listener.enterDefinition)
            listener.enterDefinition(this);
    };
    DefinitionContext.prototype.exitRule = function (listener) {
        if (listener.exitDefinition)
            listener.exitDefinition(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], DefinitionContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DefinitionContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DefinitionContext.prototype, "exitRule", null);
    return DefinitionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DefinitionContext = DefinitionContext;
var TypeConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(TypeConstraintContext, _super);
    function TypeConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeConstraintContext.prototype.complexObjectConstraint = function () {
        return this.tryGetRuleContext(0, ComplexObjectConstraintContext);
    };
    TypeConstraintContext.prototype.orderConstraint = function () {
        return this.tryGetRuleContext(0, OrderConstraintContext);
    };
    TypeConstraintContext.prototype.USE_NODE = function () { return this.tryGetToken(AdlParser.USE_NODE, 0); };
    TypeConstraintContext.prototype.typeIdentifierWithGenerics = function () {
        return this.tryGetRuleContext(0, TypeIdentifierWithGenericsContext);
    };
    TypeConstraintContext.prototype.rmPath = function () {
        return this.tryGetRuleContext(0, RmPathContext);
    };
    TypeConstraintContext.prototype.atCode = function () {
        return this.tryGetRuleContext(0, AtCodeContext);
    };
    TypeConstraintContext.prototype.occurrences = function () {
        return this.tryGetRuleContext(0, OccurrencesContext);
    };
    TypeConstraintContext.prototype.archetypeSlotConstraint = function () {
        return this.tryGetRuleContext(0, ArchetypeSlotConstraintContext);
    };
    TypeConstraintContext.prototype.archetypeReferenceConstraint = function () {
        return this.tryGetRuleContext(0, ArchetypeReferenceConstraintContext);
    };
    Object.defineProperty(TypeConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_typeConstraint; },
        enumerable: true,
        configurable: true
    });
    TypeConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeConstraint)
            listener.enterTypeConstraint(this);
    };
    TypeConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeConstraint)
            listener.exitTypeConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], TypeConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TypeConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TypeConstraintContext.prototype, "exitRule", null);
    return TypeConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeConstraintContext = TypeConstraintContext;
var ComplexObjectConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(ComplexObjectConstraintContext, _super);
    function ComplexObjectConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ComplexObjectConstraintContext.prototype.typeIdentifierWithGenerics = function () {
        return this.getRuleContext(0, TypeIdentifierWithGenericsContext);
    };
    ComplexObjectConstraintContext.prototype.atCode = function () {
        return this.tryGetRuleContext(0, AtCodeContext);
    };
    ComplexObjectConstraintContext.prototype.occurrences = function () {
        return this.tryGetRuleContext(0, OccurrencesContext);
    };
    ComplexObjectConstraintContext.prototype.attributeListMatcher = function () {
        return this.tryGetRuleContext(0, AttributeListMatcherContext);
    };
    Object.defineProperty(ComplexObjectConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_complexObjectConstraint; },
        enumerable: true,
        configurable: true
    });
    ComplexObjectConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterComplexObjectConstraint)
            listener.enterComplexObjectConstraint(this);
    };
    ComplexObjectConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitComplexObjectConstraint)
            listener.exitComplexObjectConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ComplexObjectConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ComplexObjectConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ComplexObjectConstraintContext.prototype, "exitRule", null);
    return ComplexObjectConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ComplexObjectConstraintContext = ComplexObjectConstraintContext;
var OccurrencesContext = /** @class */ (function (_super) {
    tslib_1.__extends(OccurrencesContext, _super);
    function OccurrencesContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OccurrencesContext.prototype.OCCURRENCES = function () { return this.getToken(AdlParser.OCCURRENCES, 0); };
    OccurrencesContext.prototype.MATCHES = function () { return this.getToken(AdlParser.MATCHES, 0); };
    OccurrencesContext.prototype.occurrenceRange = function () {
        return this.getRuleContext(0, OccurrenceRangeContext);
    };
    Object.defineProperty(OccurrencesContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_occurrences; },
        enumerable: true,
        configurable: true
    });
    OccurrencesContext.prototype.enterRule = function (listener) {
        if (listener.enterOccurrences)
            listener.enterOccurrences(this);
    };
    OccurrencesContext.prototype.exitRule = function (listener) {
        if (listener.exitOccurrences)
            listener.exitOccurrences(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OccurrencesContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OccurrencesContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OccurrencesContext.prototype, "exitRule", null);
    return OccurrencesContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OccurrencesContext = OccurrencesContext;
var OccurrenceRangeContext = /** @class */ (function (_super) {
    tslib_1.__extends(OccurrenceRangeContext, _super);
    function OccurrenceRangeContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OccurrenceRangeContext.prototype.INTEGER = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.INTEGER);
        }
        else {
            return this.getToken(AdlParser.INTEGER, i);
        }
    };
    Object.defineProperty(OccurrenceRangeContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_occurrenceRange; },
        enumerable: true,
        configurable: true
    });
    OccurrenceRangeContext.prototype.enterRule = function (listener) {
        if (listener.enterOccurrenceRange)
            listener.enterOccurrenceRange(this);
    };
    OccurrenceRangeContext.prototype.exitRule = function (listener) {
        if (listener.exitOccurrenceRange)
            listener.exitOccurrenceRange(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OccurrenceRangeContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OccurrenceRangeContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OccurrenceRangeContext.prototype, "exitRule", null);
    return OccurrenceRangeContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OccurrenceRangeContext = OccurrenceRangeContext;
var AttributeListMatcherContext = /** @class */ (function (_super) {
    tslib_1.__extends(AttributeListMatcherContext, _super);
    function AttributeListMatcherContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AttributeListMatcherContext.prototype.MATCHES = function () { return this.getToken(AdlParser.MATCHES, 0); };
    AttributeListMatcherContext.prototype.attributeConstraint = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AttributeConstraintContext);
        }
        else {
            return this.getRuleContext(i, AttributeConstraintContext);
        }
    };
    Object.defineProperty(AttributeListMatcherContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_attributeListMatcher; },
        enumerable: true,
        configurable: true
    });
    AttributeListMatcherContext.prototype.enterRule = function (listener) {
        if (listener.enterAttributeListMatcher)
            listener.enterAttributeListMatcher(this);
    };
    AttributeListMatcherContext.prototype.exitRule = function (listener) {
        if (listener.exitAttributeListMatcher)
            listener.exitAttributeListMatcher(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], AttributeListMatcherContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AttributeListMatcherContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AttributeListMatcherContext.prototype, "exitRule", null);
    return AttributeListMatcherContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AttributeListMatcherContext = AttributeListMatcherContext;
var OrderConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(OrderConstraintContext, _super);
    function OrderConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OrderConstraintContext.prototype.BEFORE = function () { return this.tryGetToken(AdlParser.BEFORE, 0); };
    OrderConstraintContext.prototype.atCode = function () {
        return this.getRuleContext(0, AtCodeContext);
    };
    OrderConstraintContext.prototype.AFTER = function () { return this.tryGetToken(AdlParser.AFTER, 0); };
    Object.defineProperty(OrderConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_orderConstraint; },
        enumerable: true,
        configurable: true
    });
    OrderConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterOrderConstraint)
            listener.enterOrderConstraint(this);
    };
    OrderConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitOrderConstraint)
            listener.exitOrderConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OrderConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OrderConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OrderConstraintContext.prototype, "exitRule", null);
    return OrderConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OrderConstraintContext = OrderConstraintContext;
var MultiValueConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(MultiValueConstraintContext, _super);
    function MultiValueConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    MultiValueConstraintContext.prototype.valueConstraint = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueConstraintContext);
        }
        else {
            return this.getRuleContext(i, ValueConstraintContext);
        }
    };
    Object.defineProperty(MultiValueConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_multiValueConstraint; },
        enumerable: true,
        configurable: true
    });
    MultiValueConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterMultiValueConstraint)
            listener.enterMultiValueConstraint(this);
    };
    MultiValueConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitMultiValueConstraint)
            listener.exitMultiValueConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], MultiValueConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], MultiValueConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], MultiValueConstraintContext.prototype, "exitRule", null);
    return MultiValueConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.MultiValueConstraintContext = MultiValueConstraintContext;
var ValueConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(ValueConstraintContext, _super);
    function ValueConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ValueConstraintContext.prototype.typeConstraint = function () {
        return this.tryGetRuleContext(0, TypeConstraintContext);
    };
    ValueConstraintContext.prototype.primitiveValueConstraint = function () {
        return this.tryGetRuleContext(0, PrimitiveValueConstraintContext);
    };
    ValueConstraintContext.prototype.ordinalConstraint = function () {
        return this.tryGetRuleContext(0, OrdinalConstraintContext);
    };
    Object.defineProperty(ValueConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_valueConstraint; },
        enumerable: true,
        configurable: true
    });
    ValueConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterValueConstraint)
            listener.enterValueConstraint(this);
    };
    ValueConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitValueConstraint)
            listener.exitValueConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ValueConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ValueConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ValueConstraintContext.prototype, "exitRule", null);
    return ValueConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ValueConstraintContext = ValueConstraintContext;
var OrdinalConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(OrdinalConstraintContext, _super);
    function OrdinalConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OrdinalConstraintContext.prototype.ordinalItemList = function () {
        return this.getRuleContext(0, OrdinalItemListContext);
    };
    OrdinalConstraintContext.prototype.number = function () {
        return this.tryGetRuleContext(0, NumberContext);
    };
    Object.defineProperty(OrdinalConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_ordinalConstraint; },
        enumerable: true,
        configurable: true
    });
    OrdinalConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterOrdinalConstraint)
            listener.enterOrdinalConstraint(this);
    };
    OrdinalConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitOrdinalConstraint)
            listener.exitOrdinalConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OrdinalConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OrdinalConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OrdinalConstraintContext.prototype, "exitRule", null);
    return OrdinalConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OrdinalConstraintContext = OrdinalConstraintContext;
var OrdinalItemListContext = /** @class */ (function (_super) {
    tslib_1.__extends(OrdinalItemListContext, _super);
    function OrdinalItemListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OrdinalItemListContext.prototype.ordinalItem = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(OrdinalItemContext);
        }
        else {
            return this.getRuleContext(i, OrdinalItemContext);
        }
    };
    Object.defineProperty(OrdinalItemListContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_ordinalItemList; },
        enumerable: true,
        configurable: true
    });
    OrdinalItemListContext.prototype.enterRule = function (listener) {
        if (listener.enterOrdinalItemList)
            listener.enterOrdinalItemList(this);
    };
    OrdinalItemListContext.prototype.exitRule = function (listener) {
        if (listener.exitOrdinalItemList)
            listener.exitOrdinalItemList(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OrdinalItemListContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OrdinalItemListContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OrdinalItemListContext.prototype, "exitRule", null);
    return OrdinalItemListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OrdinalItemListContext = OrdinalItemListContext;
var OrdinalItemContext = /** @class */ (function (_super) {
    tslib_1.__extends(OrdinalItemContext, _super);
    function OrdinalItemContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OrdinalItemContext.prototype.number = function () {
        return this.getRuleContext(0, NumberContext);
    };
    OrdinalItemContext.prototype.odinCodePhraseValue = function () {
        return this.getRuleContext(0, OdinCodePhraseValueContext);
    };
    Object.defineProperty(OrdinalItemContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_ordinalItem; },
        enumerable: true,
        configurable: true
    });
    OrdinalItemContext.prototype.enterRule = function (listener) {
        if (listener.enterOrdinalItem)
            listener.enterOrdinalItem(this);
    };
    OrdinalItemContext.prototype.exitRule = function (listener) {
        if (listener.exitOrdinalItem)
            listener.exitOrdinalItem(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OrdinalItemContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OrdinalItemContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OrdinalItemContext.prototype, "exitRule", null);
    return OrdinalItemContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OrdinalItemContext = OrdinalItemContext;
var PrimitiveValueConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(PrimitiveValueConstraintContext, _super);
    function PrimitiveValueConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PrimitiveValueConstraintContext.prototype.stringConstraint = function () {
        return this.tryGetRuleContext(0, StringConstraintContext);
    };
    PrimitiveValueConstraintContext.prototype.STRING = function () { return this.tryGetToken(AdlParser.STRING, 0); };
    PrimitiveValueConstraintContext.prototype.numberConstraint = function () {
        return this.tryGetRuleContext(0, NumberConstraintContext);
    };
    PrimitiveValueConstraintContext.prototype.number = function () {
        return this.tryGetRuleContext(0, NumberContext);
    };
    PrimitiveValueConstraintContext.prototype.booleanList = function () {
        return this.tryGetRuleContext(0, BooleanListContext);
    };
    PrimitiveValueConstraintContext.prototype.bool = function () {
        return this.tryGetRuleContext(0, BoolContext);
    };
    PrimitiveValueConstraintContext.prototype.dateTimeConstraint = function () {
        return this.tryGetRuleContext(0, DateTimeConstraintContext);
    };
    PrimitiveValueConstraintContext.prototype.ISO_DATE_TIME = function () { return this.tryGetToken(AdlParser.ISO_DATE_TIME, 0); };
    PrimitiveValueConstraintContext.prototype.dateConstraint = function () {
        return this.tryGetRuleContext(0, DateConstraintContext);
    };
    PrimitiveValueConstraintContext.prototype.ISO_DATE = function () { return this.tryGetToken(AdlParser.ISO_DATE, 0); };
    PrimitiveValueConstraintContext.prototype.timeConstraint = function () {
        return this.tryGetRuleContext(0, TimeConstraintContext);
    };
    PrimitiveValueConstraintContext.prototype.ISO_TIME = function () { return this.tryGetToken(AdlParser.ISO_TIME, 0); };
    PrimitiveValueConstraintContext.prototype.durationConstraint = function () {
        return this.tryGetRuleContext(0, DurationConstraintContext);
    };
    PrimitiveValueConstraintContext.prototype.DURATION = function () { return this.tryGetToken(AdlParser.DURATION, 0); };
    PrimitiveValueConstraintContext.prototype.terminologyCodeConstraint = function () {
        return this.tryGetRuleContext(0, TerminologyCodeConstraintContext);
    };
    Object.defineProperty(PrimitiveValueConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_primitiveValueConstraint; },
        enumerable: true,
        configurable: true
    });
    PrimitiveValueConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterPrimitiveValueConstraint)
            listener.enterPrimitiveValueConstraint(this);
    };
    PrimitiveValueConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitPrimitiveValueConstraint)
            listener.exitPrimitiveValueConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], PrimitiveValueConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PrimitiveValueConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PrimitiveValueConstraintContext.prototype, "exitRule", null);
    return PrimitiveValueConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PrimitiveValueConstraintContext = PrimitiveValueConstraintContext;
var TerminologyCodeConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(TerminologyCodeConstraintContext, _super);
    function TerminologyCodeConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TerminologyCodeConstraintContext.prototype.AT_CODE_VALUE = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.AT_CODE_VALUE);
        }
        else {
            return this.getToken(AdlParser.AT_CODE_VALUE, i);
        }
    };
    Object.defineProperty(TerminologyCodeConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_terminologyCodeConstraint; },
        enumerable: true,
        configurable: true
    });
    TerminologyCodeConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterTerminologyCodeConstraint)
            listener.enterTerminologyCodeConstraint(this);
    };
    TerminologyCodeConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitTerminologyCodeConstraint)
            listener.exitTerminologyCodeConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], TerminologyCodeConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TerminologyCodeConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TerminologyCodeConstraintContext.prototype, "exitRule", null);
    return TerminologyCodeConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TerminologyCodeConstraintContext = TerminologyCodeConstraintContext;
var ArchetypeSlotConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(ArchetypeSlotConstraintContext, _super);
    function ArchetypeSlotConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArchetypeSlotConstraintContext.prototype.ALLOW_ARCHETYPE = function () { return this.getToken(AdlParser.ALLOW_ARCHETYPE, 0); };
    ArchetypeSlotConstraintContext.prototype.typeIdentifierWithGenerics = function () {
        return this.getRuleContext(0, TypeIdentifierWithGenericsContext);
    };
    ArchetypeSlotConstraintContext.prototype.atCode = function () {
        return this.tryGetRuleContext(0, AtCodeContext);
    };
    ArchetypeSlotConstraintContext.prototype.occurrences = function () {
        return this.tryGetRuleContext(0, OccurrencesContext);
    };
    ArchetypeSlotConstraintContext.prototype.MATCHES = function () { return this.tryGetToken(AdlParser.MATCHES, 0); };
    ArchetypeSlotConstraintContext.prototype.archetypeSlotValueConstraint = function () {
        return this.tryGetRuleContext(0, ArchetypeSlotValueConstraintContext);
    };
    ArchetypeSlotConstraintContext.prototype.CLOSED = function () { return this.tryGetToken(AdlParser.CLOSED, 0); };
    Object.defineProperty(ArchetypeSlotConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_archetypeSlotConstraint; },
        enumerable: true,
        configurable: true
    });
    ArchetypeSlotConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterArchetypeSlotConstraint)
            listener.enterArchetypeSlotConstraint(this);
    };
    ArchetypeSlotConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitArchetypeSlotConstraint)
            listener.exitArchetypeSlotConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ArchetypeSlotConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypeSlotConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypeSlotConstraintContext.prototype, "exitRule", null);
    return ArchetypeSlotConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArchetypeSlotConstraintContext = ArchetypeSlotConstraintContext;
var ArchetypeSlotValueConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(ArchetypeSlotValueConstraintContext, _super);
    function ArchetypeSlotValueConstraintContext(parent, invokingState) {
        var _this = _super.call(this, parent, invokingState) || this;
        _this._include = [];
        _this._exclude = [];
        return _this;
    }
    ArchetypeSlotValueConstraintContext.prototype.INCLUDE = function () { return this.tryGetToken(AdlParser.INCLUDE, 0); };
    ArchetypeSlotValueConstraintContext.prototype.EXCLUDE = function () { return this.tryGetToken(AdlParser.EXCLUDE, 0); };
    ArchetypeSlotValueConstraintContext.prototype.archetypeSlotSingleConstraint = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(ArchetypeSlotSingleConstraintContext);
        }
        else {
            return this.getRuleContext(i, ArchetypeSlotSingleConstraintContext);
        }
    };
    Object.defineProperty(ArchetypeSlotValueConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_archetypeSlotValueConstraint; },
        enumerable: true,
        configurable: true
    });
    ArchetypeSlotValueConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterArchetypeSlotValueConstraint)
            listener.enterArchetypeSlotValueConstraint(this);
    };
    ArchetypeSlotValueConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitArchetypeSlotValueConstraint)
            listener.exitArchetypeSlotValueConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ArchetypeSlotValueConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypeSlotValueConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypeSlotValueConstraintContext.prototype, "exitRule", null);
    return ArchetypeSlotValueConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArchetypeSlotValueConstraintContext = ArchetypeSlotValueConstraintContext;
var ArchetypeSlotSingleConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(ArchetypeSlotSingleConstraintContext, _super);
    function ArchetypeSlotSingleConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArchetypeSlotSingleConstraintContext.prototype.rmPath = function () {
        return this.getRuleContext(0, RmPathContext);
    };
    ArchetypeSlotSingleConstraintContext.prototype.MATCHES = function () { return this.getToken(AdlParser.MATCHES, 0); };
    ArchetypeSlotSingleConstraintContext.prototype.primitiveValueConstraint = function () {
        return this.getRuleContext(0, PrimitiveValueConstraintContext);
    };
    Object.defineProperty(ArchetypeSlotSingleConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_archetypeSlotSingleConstraint; },
        enumerable: true,
        configurable: true
    });
    ArchetypeSlotSingleConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterArchetypeSlotSingleConstraint)
            listener.enterArchetypeSlotSingleConstraint(this);
    };
    ArchetypeSlotSingleConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitArchetypeSlotSingleConstraint)
            listener.exitArchetypeSlotSingleConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ArchetypeSlotSingleConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypeSlotSingleConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypeSlotSingleConstraintContext.prototype, "exitRule", null);
    return ArchetypeSlotSingleConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArchetypeSlotSingleConstraintContext = ArchetypeSlotSingleConstraintContext;
var ArchetypeReferenceConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(ArchetypeReferenceConstraintContext, _super);
    function ArchetypeReferenceConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ArchetypeReferenceConstraintContext.prototype.typeIdentifier = function () {
        return this.getRuleContext(0, TypeIdentifierContext);
    };
    ArchetypeReferenceConstraintContext.prototype.AT_CODE_VALUE = function () { return this.getToken(AdlParser.AT_CODE_VALUE, 0); };
    ArchetypeReferenceConstraintContext.prototype.archetypeId = function () {
        return this.getRuleContext(0, ArchetypeIdContext);
    };
    ArchetypeReferenceConstraintContext.prototype.USE_ARCHETYPE = function () { return this.tryGetToken(AdlParser.USE_ARCHETYPE, 0); };
    ArchetypeReferenceConstraintContext.prototype.USE_TEMPLATE = function () { return this.tryGetToken(AdlParser.USE_TEMPLATE, 0); };
    ArchetypeReferenceConstraintContext.prototype.occurrences = function () {
        return this.tryGetRuleContext(0, OccurrencesContext);
    };
    Object.defineProperty(ArchetypeReferenceConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_archetypeReferenceConstraint; },
        enumerable: true,
        configurable: true
    });
    ArchetypeReferenceConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterArchetypeReferenceConstraint)
            listener.enterArchetypeReferenceConstraint(this);
    };
    ArchetypeReferenceConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitArchetypeReferenceConstraint)
            listener.exitArchetypeReferenceConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ArchetypeReferenceConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypeReferenceConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ArchetypeReferenceConstraintContext.prototype, "exitRule", null);
    return ArchetypeReferenceConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ArchetypeReferenceConstraintContext = ArchetypeReferenceConstraintContext;
var StringConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(StringConstraintContext, _super);
    function StringConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StringConstraintContext.prototype.stringList = function () {
        return this.tryGetRuleContext(0, StringListContext);
    };
    StringConstraintContext.prototype.regularExpression = function () {
        return this.tryGetRuleContext(0, RegularExpressionContext);
    };
    Object.defineProperty(StringConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_stringConstraint; },
        enumerable: true,
        configurable: true
    });
    StringConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterStringConstraint)
            listener.enterStringConstraint(this);
    };
    StringConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitStringConstraint)
            listener.exitStringConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], StringConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], StringConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], StringConstraintContext.prototype, "exitRule", null);
    return StringConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StringConstraintContext = StringConstraintContext;
var NumberConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(NumberConstraintContext, _super);
    function NumberConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NumberConstraintContext.prototype.numberList = function () {
        return this.tryGetRuleContext(0, NumberListContext);
    };
    NumberConstraintContext.prototype.numberIntervalConstraint = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(NumberIntervalConstraintContext);
        }
        else {
            return this.getRuleContext(i, NumberIntervalConstraintContext);
        }
    };
    Object.defineProperty(NumberConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_numberConstraint; },
        enumerable: true,
        configurable: true
    });
    NumberConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterNumberConstraint)
            listener.enterNumberConstraint(this);
    };
    NumberConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitNumberConstraint)
            listener.exitNumberConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], NumberConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NumberConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NumberConstraintContext.prototype, "exitRule", null);
    return NumberConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NumberConstraintContext = NumberConstraintContext;
var DateTimeConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(DateTimeConstraintContext, _super);
    function DateTimeConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DateTimeConstraintContext.prototype.DATE_TIME_PATTERN = function () { return this.tryGetToken(AdlParser.DATE_TIME_PATTERN, 0); };
    DateTimeConstraintContext.prototype.ISO_DATE_TIME = function () { return this.tryGetToken(AdlParser.ISO_DATE_TIME, 0); };
    DateTimeConstraintContext.prototype.dateTimeIntervalConstraint = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DateTimeIntervalConstraintContext);
        }
        else {
            return this.getRuleContext(i, DateTimeIntervalConstraintContext);
        }
    };
    Object.defineProperty(DateTimeConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_dateTimeConstraint; },
        enumerable: true,
        configurable: true
    });
    DateTimeConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterDateTimeConstraint)
            listener.enterDateTimeConstraint(this);
    };
    DateTimeConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitDateTimeConstraint)
            listener.exitDateTimeConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], DateTimeConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DateTimeConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DateTimeConstraintContext.prototype, "exitRule", null);
    return DateTimeConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DateTimeConstraintContext = DateTimeConstraintContext;
var DateConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(DateConstraintContext, _super);
    function DateConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DateConstraintContext.prototype.DATE_PATTERN = function () { return this.tryGetToken(AdlParser.DATE_PATTERN, 0); };
    DateConstraintContext.prototype.ISO_DATE = function () { return this.tryGetToken(AdlParser.ISO_DATE, 0); };
    DateConstraintContext.prototype.dateIntervalConstraint = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(DateIntervalConstraintContext);
        }
        else {
            return this.getRuleContext(i, DateIntervalConstraintContext);
        }
    };
    Object.defineProperty(DateConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_dateConstraint; },
        enumerable: true,
        configurable: true
    });
    DateConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterDateConstraint)
            listener.enterDateConstraint(this);
    };
    DateConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitDateConstraint)
            listener.exitDateConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], DateConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DateConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DateConstraintContext.prototype, "exitRule", null);
    return DateConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DateConstraintContext = DateConstraintContext;
var TimeConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(TimeConstraintContext, _super);
    function TimeConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TimeConstraintContext.prototype.TIME_PATTERN = function () { return this.tryGetToken(AdlParser.TIME_PATTERN, 0); };
    TimeConstraintContext.prototype.ISO_TIME = function () { return this.tryGetToken(AdlParser.ISO_TIME, 0); };
    TimeConstraintContext.prototype.timeIntervalConstraint = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TimeIntervalConstraintContext);
        }
        else {
            return this.getRuleContext(i, TimeIntervalConstraintContext);
        }
    };
    Object.defineProperty(TimeConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_timeConstraint; },
        enumerable: true,
        configurable: true
    });
    TimeConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterTimeConstraint)
            listener.enterTimeConstraint(this);
    };
    TimeConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitTimeConstraint)
            listener.exitTimeConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], TimeConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TimeConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TimeConstraintContext.prototype, "exitRule", null);
    return TimeConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TimeConstraintContext = TimeConstraintContext;
var DurationConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(DurationConstraintContext, _super);
    function DurationConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DurationConstraintContext.prototype.DURATION = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.DURATION);
        }
        else {
            return this.getToken(AdlParser.DURATION, i);
        }
    };
    DurationConstraintContext.prototype.durationIntervalConstraint = function () {
        return this.tryGetRuleContext(0, DurationIntervalConstraintContext);
    };
    Object.defineProperty(DurationConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_durationConstraint; },
        enumerable: true,
        configurable: true
    });
    DurationConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterDurationConstraint)
            listener.enterDurationConstraint(this);
    };
    DurationConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitDurationConstraint)
            listener.exitDurationConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], DurationConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DurationConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DurationConstraintContext.prototype, "exitRule", null);
    return DurationConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DurationConstraintContext = DurationConstraintContext;
var CodeIdentifierListContext = /** @class */ (function (_super) {
    tslib_1.__extends(CodeIdentifierListContext, _super);
    function CodeIdentifierListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CodeIdentifierListContext.prototype.codeIdentifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CodeIdentifierContext);
        }
        else {
            return this.getRuleContext(i, CodeIdentifierContext);
        }
    };
    Object.defineProperty(CodeIdentifierListContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_codeIdentifierList; },
        enumerable: true,
        configurable: true
    });
    CodeIdentifierListContext.prototype.enterRule = function (listener) {
        if (listener.enterCodeIdentifierList)
            listener.enterCodeIdentifierList(this);
    };
    CodeIdentifierListContext.prototype.exitRule = function (listener) {
        if (listener.exitCodeIdentifierList)
            listener.exitCodeIdentifierList(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], CodeIdentifierListContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CodeIdentifierListContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CodeIdentifierListContext.prototype, "exitRule", null);
    return CodeIdentifierListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CodeIdentifierListContext = CodeIdentifierListContext;
var RegularExpressionContext = /** @class */ (function (_super) {
    tslib_1.__extends(RegularExpressionContext, _super);
    function RegularExpressionContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RegularExpressionContext.prototype.regularExpressionInner1 = function () {
        return this.tryGetRuleContext(0, RegularExpressionInner1Context);
    };
    RegularExpressionContext.prototype.regularExpressionInner2 = function () {
        return this.tryGetRuleContext(0, RegularExpressionInner2Context);
    };
    Object.defineProperty(RegularExpressionContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_regularExpression; },
        enumerable: true,
        configurable: true
    });
    RegularExpressionContext.prototype.enterRule = function (listener) {
        if (listener.enterRegularExpression)
            listener.enterRegularExpression(this);
    };
    RegularExpressionContext.prototype.exitRule = function (listener) {
        if (listener.exitRegularExpression)
            listener.exitRegularExpression(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], RegularExpressionContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RegularExpressionContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RegularExpressionContext.prototype, "exitRule", null);
    return RegularExpressionContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RegularExpressionContext = RegularExpressionContext;
var RegularExpressionInner1Context = /** @class */ (function (_super) {
    tslib_1.__extends(RegularExpressionInner1Context, _super);
    function RegularExpressionInner1Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(RegularExpressionInner1Context.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_regularExpressionInner1; },
        enumerable: true,
        configurable: true
    });
    RegularExpressionInner1Context.prototype.enterRule = function (listener) {
        if (listener.enterRegularExpressionInner1)
            listener.enterRegularExpressionInner1(this);
    };
    RegularExpressionInner1Context.prototype.exitRule = function (listener) {
        if (listener.exitRegularExpressionInner1)
            listener.exitRegularExpressionInner1(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], RegularExpressionInner1Context.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RegularExpressionInner1Context.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RegularExpressionInner1Context.prototype, "exitRule", null);
    return RegularExpressionInner1Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.RegularExpressionInner1Context = RegularExpressionInner1Context;
var RegularExpressionInner2Context = /** @class */ (function (_super) {
    tslib_1.__extends(RegularExpressionInner2Context, _super);
    function RegularExpressionInner2Context(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    Object.defineProperty(RegularExpressionInner2Context.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_regularExpressionInner2; },
        enumerable: true,
        configurable: true
    });
    RegularExpressionInner2Context.prototype.enterRule = function (listener) {
        if (listener.enterRegularExpressionInner2)
            listener.enterRegularExpressionInner2(this);
    };
    RegularExpressionInner2Context.prototype.exitRule = function (listener) {
        if (listener.exitRegularExpressionInner2)
            listener.exitRegularExpressionInner2(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], RegularExpressionInner2Context.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RegularExpressionInner2Context.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RegularExpressionInner2Context.prototype, "exitRule", null);
    return RegularExpressionInner2Context;
}(ParserRuleContext_1.ParserRuleContext));
exports.RegularExpressionInner2Context = RegularExpressionInner2Context;
var AttributeConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(AttributeConstraintContext, _super);
    function AttributeConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AttributeConstraintContext.prototype.attributeIdentifier = function () {
        return this.tryGetRuleContext(0, AttributeIdentifierContext);
    };
    AttributeConstraintContext.prototype.existence = function () {
        return this.tryGetRuleContext(0, ExistenceContext);
    };
    AttributeConstraintContext.prototype.cardinality = function () {
        return this.tryGetRuleContext(0, CardinalityContext);
    };
    AttributeConstraintContext.prototype.MATCHES = function () { return this.tryGetToken(AdlParser.MATCHES, 0); };
    AttributeConstraintContext.prototype.multiValueConstraint = function () {
        return this.tryGetRuleContext(0, MultiValueConstraintContext);
    };
    AttributeConstraintContext.prototype.tupleAttributeIdentifier = function () {
        return this.tryGetRuleContext(0, TupleAttributeIdentifierContext);
    };
    AttributeConstraintContext.prototype.tupleChildConstraints = function () {
        return this.tryGetRuleContext(0, TupleChildConstraintsContext);
    };
    Object.defineProperty(AttributeConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_attributeConstraint; },
        enumerable: true,
        configurable: true
    });
    AttributeConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterAttributeConstraint)
            listener.enterAttributeConstraint(this);
    };
    AttributeConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitAttributeConstraint)
            listener.exitAttributeConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], AttributeConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AttributeConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AttributeConstraintContext.prototype, "exitRule", null);
    return AttributeConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AttributeConstraintContext = AttributeConstraintContext;
var TupleAttributeIdentifierContext = /** @class */ (function (_super) {
    tslib_1.__extends(TupleAttributeIdentifierContext, _super);
    function TupleAttributeIdentifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TupleAttributeIdentifierContext.prototype.attributeIdentifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(AttributeIdentifierContext);
        }
        else {
            return this.getRuleContext(i, AttributeIdentifierContext);
        }
    };
    Object.defineProperty(TupleAttributeIdentifierContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_tupleAttributeIdentifier; },
        enumerable: true,
        configurable: true
    });
    TupleAttributeIdentifierContext.prototype.enterRule = function (listener) {
        if (listener.enterTupleAttributeIdentifier)
            listener.enterTupleAttributeIdentifier(this);
    };
    TupleAttributeIdentifierContext.prototype.exitRule = function (listener) {
        if (listener.exitTupleAttributeIdentifier)
            listener.exitTupleAttributeIdentifier(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], TupleAttributeIdentifierContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TupleAttributeIdentifierContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TupleAttributeIdentifierContext.prototype, "exitRule", null);
    return TupleAttributeIdentifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TupleAttributeIdentifierContext = TupleAttributeIdentifierContext;
var TupleChildConstraintsContext = /** @class */ (function (_super) {
    tslib_1.__extends(TupleChildConstraintsContext, _super);
    function TupleChildConstraintsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TupleChildConstraintsContext.prototype.tupleChildConstraint = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TupleChildConstraintContext);
        }
        else {
            return this.getRuleContext(i, TupleChildConstraintContext);
        }
    };
    Object.defineProperty(TupleChildConstraintsContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_tupleChildConstraints; },
        enumerable: true,
        configurable: true
    });
    TupleChildConstraintsContext.prototype.enterRule = function (listener) {
        if (listener.enterTupleChildConstraints)
            listener.enterTupleChildConstraints(this);
    };
    TupleChildConstraintsContext.prototype.exitRule = function (listener) {
        if (listener.exitTupleChildConstraints)
            listener.exitTupleChildConstraints(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], TupleChildConstraintsContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TupleChildConstraintsContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TupleChildConstraintsContext.prototype, "exitRule", null);
    return TupleChildConstraintsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TupleChildConstraintsContext = TupleChildConstraintsContext;
var TupleChildConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(TupleChildConstraintContext, _super);
    function TupleChildConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TupleChildConstraintContext.prototype.primitiveValueConstraint = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PrimitiveValueConstraintContext);
        }
        else {
            return this.getRuleContext(i, PrimitiveValueConstraintContext);
        }
    };
    Object.defineProperty(TupleChildConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_tupleChildConstraint; },
        enumerable: true,
        configurable: true
    });
    TupleChildConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterTupleChildConstraint)
            listener.enterTupleChildConstraint(this);
    };
    TupleChildConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitTupleChildConstraint)
            listener.exitTupleChildConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], TupleChildConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TupleChildConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TupleChildConstraintContext.prototype, "exitRule", null);
    return TupleChildConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TupleChildConstraintContext = TupleChildConstraintContext;
var AttributeIdentifierContext = /** @class */ (function (_super) {
    tslib_1.__extends(AttributeIdentifierContext, _super);
    function AttributeIdentifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AttributeIdentifierContext.prototype.rmPath = function () {
        return this.getRuleContext(0, RmPathContext);
    };
    Object.defineProperty(AttributeIdentifierContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_attributeIdentifier; },
        enumerable: true,
        configurable: true
    });
    AttributeIdentifierContext.prototype.enterRule = function (listener) {
        if (listener.enterAttributeIdentifier)
            listener.enterAttributeIdentifier(this);
    };
    AttributeIdentifierContext.prototype.exitRule = function (listener) {
        if (listener.exitAttributeIdentifier)
            listener.exitAttributeIdentifier(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], AttributeIdentifierContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AttributeIdentifierContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AttributeIdentifierContext.prototype, "exitRule", null);
    return AttributeIdentifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AttributeIdentifierContext = AttributeIdentifierContext;
var ExistenceContext = /** @class */ (function (_super) {
    tslib_1.__extends(ExistenceContext, _super);
    function ExistenceContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    ExistenceContext.prototype.EXISTENCE = function () { return this.getToken(AdlParser.EXISTENCE, 0); };
    ExistenceContext.prototype.MATCHES = function () { return this.getToken(AdlParser.MATCHES, 0); };
    ExistenceContext.prototype.occurrenceRange = function () {
        return this.getRuleContext(0, OccurrenceRangeContext);
    };
    Object.defineProperty(ExistenceContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_existence; },
        enumerable: true,
        configurable: true
    });
    ExistenceContext.prototype.enterRule = function (listener) {
        if (listener.enterExistence)
            listener.enterExistence(this);
    };
    ExistenceContext.prototype.exitRule = function (listener) {
        if (listener.exitExistence)
            listener.exitExistence(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], ExistenceContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ExistenceContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ExistenceContext.prototype, "exitRule", null);
    return ExistenceContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.ExistenceContext = ExistenceContext;
var CardinalityContext = /** @class */ (function (_super) {
    tslib_1.__extends(CardinalityContext, _super);
    function CardinalityContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CardinalityContext.prototype.CARDINALITY = function () { return this.getToken(AdlParser.CARDINALITY, 0); };
    CardinalityContext.prototype.MATCHES = function () { return this.getToken(AdlParser.MATCHES, 0); };
    CardinalityContext.prototype.occurrenceRange = function () {
        return this.getRuleContext(0, OccurrenceRangeContext);
    };
    CardinalityContext.prototype.ORDERED = function () { return this.tryGetToken(AdlParser.ORDERED, 0); };
    CardinalityContext.prototype.UNORDERED = function () { return this.tryGetToken(AdlParser.UNORDERED, 0); };
    CardinalityContext.prototype.UNIQUE = function () { return this.tryGetToken(AdlParser.UNIQUE, 0); };
    Object.defineProperty(CardinalityContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_cardinality; },
        enumerable: true,
        configurable: true
    });
    CardinalityContext.prototype.enterRule = function (listener) {
        if (listener.enterCardinality)
            listener.enterCardinality(this);
    };
    CardinalityContext.prototype.exitRule = function (listener) {
        if (listener.exitCardinality)
            listener.exitCardinality(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], CardinalityContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CardinalityContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CardinalityContext.prototype, "exitRule", null);
    return CardinalityContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CardinalityContext = CardinalityContext;
var NumberIntervalConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(NumberIntervalConstraintContext, _super);
    function NumberIntervalConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NumberIntervalConstraintContext.prototype.number = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(NumberContext);
        }
        else {
            return this.getRuleContext(i, NumberContext);
        }
    };
    Object.defineProperty(NumberIntervalConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_numberIntervalConstraint; },
        enumerable: true,
        configurable: true
    });
    NumberIntervalConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterNumberIntervalConstraint)
            listener.enterNumberIntervalConstraint(this);
    };
    NumberIntervalConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitNumberIntervalConstraint)
            listener.exitNumberIntervalConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], NumberIntervalConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NumberIntervalConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NumberIntervalConstraintContext.prototype, "exitRule", null);
    return NumberIntervalConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NumberIntervalConstraintContext = NumberIntervalConstraintContext;
var DateIntervalConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(DateIntervalConstraintContext, _super);
    function DateIntervalConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DateIntervalConstraintContext.prototype.ISO_DATE = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.ISO_DATE);
        }
        else {
            return this.getToken(AdlParser.ISO_DATE, i);
        }
    };
    Object.defineProperty(DateIntervalConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_dateIntervalConstraint; },
        enumerable: true,
        configurable: true
    });
    DateIntervalConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterDateIntervalConstraint)
            listener.enterDateIntervalConstraint(this);
    };
    DateIntervalConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitDateIntervalConstraint)
            listener.exitDateIntervalConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], DateIntervalConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DateIntervalConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DateIntervalConstraintContext.prototype, "exitRule", null);
    return DateIntervalConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DateIntervalConstraintContext = DateIntervalConstraintContext;
var TimeIntervalConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(TimeIntervalConstraintContext, _super);
    function TimeIntervalConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TimeIntervalConstraintContext.prototype.ISO_TIME = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.ISO_TIME);
        }
        else {
            return this.getToken(AdlParser.ISO_TIME, i);
        }
    };
    Object.defineProperty(TimeIntervalConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_timeIntervalConstraint; },
        enumerable: true,
        configurable: true
    });
    TimeIntervalConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterTimeIntervalConstraint)
            listener.enterTimeIntervalConstraint(this);
    };
    TimeIntervalConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitTimeIntervalConstraint)
            listener.exitTimeIntervalConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], TimeIntervalConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TimeIntervalConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TimeIntervalConstraintContext.prototype, "exitRule", null);
    return TimeIntervalConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TimeIntervalConstraintContext = TimeIntervalConstraintContext;
var DateTimeIntervalConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(DateTimeIntervalConstraintContext, _super);
    function DateTimeIntervalConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DateTimeIntervalConstraintContext.prototype.ISO_DATE_TIME = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.ISO_DATE_TIME);
        }
        else {
            return this.getToken(AdlParser.ISO_DATE_TIME, i);
        }
    };
    Object.defineProperty(DateTimeIntervalConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_dateTimeIntervalConstraint; },
        enumerable: true,
        configurable: true
    });
    DateTimeIntervalConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterDateTimeIntervalConstraint)
            listener.enterDateTimeIntervalConstraint(this);
    };
    DateTimeIntervalConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitDateTimeIntervalConstraint)
            listener.exitDateTimeIntervalConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], DateTimeIntervalConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DateTimeIntervalConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DateTimeIntervalConstraintContext.prototype, "exitRule", null);
    return DateTimeIntervalConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DateTimeIntervalConstraintContext = DateTimeIntervalConstraintContext;
var DurationIntervalConstraintContext = /** @class */ (function (_super) {
    tslib_1.__extends(DurationIntervalConstraintContext, _super);
    function DurationIntervalConstraintContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    DurationIntervalConstraintContext.prototype.DURATION = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.DURATION);
        }
        else {
            return this.getToken(AdlParser.DURATION, i);
        }
    };
    Object.defineProperty(DurationIntervalConstraintContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_durationIntervalConstraint; },
        enumerable: true,
        configurable: true
    });
    DurationIntervalConstraintContext.prototype.enterRule = function (listener) {
        if (listener.enterDurationIntervalConstraint)
            listener.enterDurationIntervalConstraint(this);
    };
    DurationIntervalConstraintContext.prototype.exitRule = function (listener) {
        if (listener.exitDurationIntervalConstraint)
            listener.exitDurationIntervalConstraint(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], DurationIntervalConstraintContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DurationIntervalConstraintContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DurationIntervalConstraintContext.prototype, "exitRule", null);
    return DurationIntervalConstraintContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.DurationIntervalConstraintContext = DurationIntervalConstraintContext;
var TerminologyContext = /** @class */ (function (_super) {
    tslib_1.__extends(TerminologyContext, _super);
    function TerminologyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TerminologyContext.prototype.TERMINOLOGY = function () { return this.getToken(AdlParser.TERMINOLOGY, 0); };
    TerminologyContext.prototype.odinObjectValue = function () {
        return this.getRuleContext(0, OdinObjectValueContext);
    };
    Object.defineProperty(TerminologyContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_terminology; },
        enumerable: true,
        configurable: true
    });
    TerminologyContext.prototype.enterRule = function (listener) {
        if (listener.enterTerminology)
            listener.enterTerminology(this);
    };
    TerminologyContext.prototype.exitRule = function (listener) {
        if (listener.exitTerminology)
            listener.exitTerminology(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], TerminologyContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TerminologyContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TerminologyContext.prototype, "exitRule", null);
    return TerminologyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TerminologyContext = TerminologyContext;
var AnnotationsContext = /** @class */ (function (_super) {
    tslib_1.__extends(AnnotationsContext, _super);
    function AnnotationsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    AnnotationsContext.prototype.ANNOTATIONS = function () { return this.getToken(AdlParser.ANNOTATIONS, 0); };
    AnnotationsContext.prototype.odinObjectValue = function () {
        return this.getRuleContext(0, OdinObjectValueContext);
    };
    Object.defineProperty(AnnotationsContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_annotations; },
        enumerable: true,
        configurable: true
    });
    AnnotationsContext.prototype.enterRule = function (listener) {
        if (listener.enterAnnotations)
            listener.enterAnnotations(this);
    };
    AnnotationsContext.prototype.exitRule = function (listener) {
        if (listener.exitAnnotations)
            listener.exitAnnotations(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], AnnotationsContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AnnotationsContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], AnnotationsContext.prototype, "exitRule", null);
    return AnnotationsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.AnnotationsContext = AnnotationsContext;
var OdinValueContext = /** @class */ (function (_super) {
    tslib_1.__extends(OdinValueContext, _super);
    function OdinValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OdinValueContext.prototype.odinMapValue = function () {
        return this.tryGetRuleContext(0, OdinMapValueContext);
    };
    OdinValueContext.prototype.odinCodePhraseValueList = function () {
        return this.tryGetRuleContext(0, OdinCodePhraseValueListContext);
    };
    OdinValueContext.prototype.openStringList = function () {
        return this.tryGetRuleContext(0, OpenStringListContext);
    };
    OdinValueContext.prototype.numberIntervalConstraint = function () {
        return this.tryGetRuleContext(0, NumberIntervalConstraintContext);
    };
    OdinValueContext.prototype.typeIdentifier = function () {
        return this.tryGetRuleContext(0, TypeIdentifierContext);
    };
    OdinValueContext.prototype.odinObjectValue = function () {
        return this.tryGetRuleContext(0, OdinObjectValueContext);
    };
    OdinValueContext.prototype.number = function () {
        return this.tryGetRuleContext(0, NumberContext);
    };
    OdinValueContext.prototype.url = function () {
        return this.tryGetRuleContext(0, UrlContext);
    };
    Object.defineProperty(OdinValueContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_odinValue; },
        enumerable: true,
        configurable: true
    });
    OdinValueContext.prototype.enterRule = function (listener) {
        if (listener.enterOdinValue)
            listener.enterOdinValue(this);
    };
    OdinValueContext.prototype.exitRule = function (listener) {
        if (listener.exitOdinValue)
            listener.exitOdinValue(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OdinValueContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinValueContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinValueContext.prototype, "exitRule", null);
    return OdinValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OdinValueContext = OdinValueContext;
var OdinObjectValueContext = /** @class */ (function (_super) {
    tslib_1.__extends(OdinObjectValueContext, _super);
    function OdinObjectValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OdinObjectValueContext.prototype.odinObjectProperty = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(OdinObjectPropertyContext);
        }
        else {
            return this.getRuleContext(i, OdinObjectPropertyContext);
        }
    };
    Object.defineProperty(OdinObjectValueContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_odinObjectValue; },
        enumerable: true,
        configurable: true
    });
    OdinObjectValueContext.prototype.enterRule = function (listener) {
        if (listener.enterOdinObjectValue)
            listener.enterOdinObjectValue(this);
    };
    OdinObjectValueContext.prototype.exitRule = function (listener) {
        if (listener.exitOdinObjectValue)
            listener.exitOdinObjectValue(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OdinObjectValueContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinObjectValueContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinObjectValueContext.prototype, "exitRule", null);
    return OdinObjectValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OdinObjectValueContext = OdinObjectValueContext;
var OdinObjectPropertyContext = /** @class */ (function (_super) {
    tslib_1.__extends(OdinObjectPropertyContext, _super);
    function OdinObjectPropertyContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OdinObjectPropertyContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    OdinObjectPropertyContext.prototype.odinValue = function () {
        return this.getRuleContext(0, OdinValueContext);
    };
    Object.defineProperty(OdinObjectPropertyContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_odinObjectProperty; },
        enumerable: true,
        configurable: true
    });
    OdinObjectPropertyContext.prototype.enterRule = function (listener) {
        if (listener.enterOdinObjectProperty)
            listener.enterOdinObjectProperty(this);
    };
    OdinObjectPropertyContext.prototype.exitRule = function (listener) {
        if (listener.exitOdinObjectProperty)
            listener.exitOdinObjectProperty(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OdinObjectPropertyContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinObjectPropertyContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinObjectPropertyContext.prototype, "exitRule", null);
    return OdinObjectPropertyContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OdinObjectPropertyContext = OdinObjectPropertyContext;
var OdinCodePhraseValueListContext = /** @class */ (function (_super) {
    tslib_1.__extends(OdinCodePhraseValueListContext, _super);
    function OdinCodePhraseValueListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OdinCodePhraseValueListContext.prototype.odinCodePhraseValue = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(OdinCodePhraseValueContext);
        }
        else {
            return this.getRuleContext(i, OdinCodePhraseValueContext);
        }
    };
    Object.defineProperty(OdinCodePhraseValueListContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_odinCodePhraseValueList; },
        enumerable: true,
        configurable: true
    });
    OdinCodePhraseValueListContext.prototype.enterRule = function (listener) {
        if (listener.enterOdinCodePhraseValueList)
            listener.enterOdinCodePhraseValueList(this);
    };
    OdinCodePhraseValueListContext.prototype.exitRule = function (listener) {
        if (listener.exitOdinCodePhraseValueList)
            listener.exitOdinCodePhraseValueList(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OdinCodePhraseValueListContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinCodePhraseValueListContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinCodePhraseValueListContext.prototype, "exitRule", null);
    return OdinCodePhraseValueListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OdinCodePhraseValueListContext = OdinCodePhraseValueListContext;
var OdinCodePhraseValueContext = /** @class */ (function (_super) {
    tslib_1.__extends(OdinCodePhraseValueContext, _super);
    function OdinCodePhraseValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OdinCodePhraseValueContext.prototype.codeIdentifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CodeIdentifierContext);
        }
        else {
            return this.getRuleContext(i, CodeIdentifierContext);
        }
    };
    Object.defineProperty(OdinCodePhraseValueContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_odinCodePhraseValue; },
        enumerable: true,
        configurable: true
    });
    OdinCodePhraseValueContext.prototype.enterRule = function (listener) {
        if (listener.enterOdinCodePhraseValue)
            listener.enterOdinCodePhraseValue(this);
    };
    OdinCodePhraseValueContext.prototype.exitRule = function (listener) {
        if (listener.exitOdinCodePhraseValue)
            listener.exitOdinCodePhraseValue(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OdinCodePhraseValueContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinCodePhraseValueContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinCodePhraseValueContext.prototype, "exitRule", null);
    return OdinCodePhraseValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OdinCodePhraseValueContext = OdinCodePhraseValueContext;
var OdinMapValueContext = /** @class */ (function (_super) {
    tslib_1.__extends(OdinMapValueContext, _super);
    function OdinMapValueContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OdinMapValueContext.prototype.odinMapValueEntry = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(OdinMapValueEntryContext);
        }
        else {
            return this.getRuleContext(i, OdinMapValueEntryContext);
        }
    };
    Object.defineProperty(OdinMapValueContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_odinMapValue; },
        enumerable: true,
        configurable: true
    });
    OdinMapValueContext.prototype.enterRule = function (listener) {
        if (listener.enterOdinMapValue)
            listener.enterOdinMapValue(this);
    };
    OdinMapValueContext.prototype.exitRule = function (listener) {
        if (listener.exitOdinMapValue)
            listener.exitOdinMapValue(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OdinMapValueContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinMapValueContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinMapValueContext.prototype, "exitRule", null);
    return OdinMapValueContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OdinMapValueContext = OdinMapValueContext;
var OdinMapValueEntryContext = /** @class */ (function (_super) {
    tslib_1.__extends(OdinMapValueEntryContext, _super);
    function OdinMapValueEntryContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OdinMapValueEntryContext.prototype.STRING = function () { return this.getToken(AdlParser.STRING, 0); };
    OdinMapValueEntryContext.prototype.odinValue = function () {
        return this.getRuleContext(0, OdinValueContext);
    };
    Object.defineProperty(OdinMapValueEntryContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_odinMapValueEntry; },
        enumerable: true,
        configurable: true
    });
    OdinMapValueEntryContext.prototype.enterRule = function (listener) {
        if (listener.enterOdinMapValueEntry)
            listener.enterOdinMapValueEntry(this);
    };
    OdinMapValueEntryContext.prototype.exitRule = function (listener) {
        if (listener.exitOdinMapValueEntry)
            listener.exitOdinMapValueEntry(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OdinMapValueEntryContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinMapValueEntryContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OdinMapValueEntryContext.prototype, "exitRule", null);
    return OdinMapValueEntryContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OdinMapValueEntryContext = OdinMapValueEntryContext;
var OpenStringListContext = /** @class */ (function (_super) {
    tslib_1.__extends(OpenStringListContext, _super);
    function OpenStringListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    OpenStringListContext.prototype.STRING = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.STRING);
        }
        else {
            return this.getToken(AdlParser.STRING, i);
        }
    };
    Object.defineProperty(OpenStringListContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_openStringList; },
        enumerable: true,
        configurable: true
    });
    OpenStringListContext.prototype.enterRule = function (listener) {
        if (listener.enterOpenStringList)
            listener.enterOpenStringList(this);
    };
    OpenStringListContext.prototype.exitRule = function (listener) {
        if (listener.exitOpenStringList)
            listener.exitOpenStringList(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], OpenStringListContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OpenStringListContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], OpenStringListContext.prototype, "exitRule", null);
    return OpenStringListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.OpenStringListContext = OpenStringListContext;
var StringListContext = /** @class */ (function (_super) {
    tslib_1.__extends(StringListContext, _super);
    function StringListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    StringListContext.prototype.STRING = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.STRING);
        }
        else {
            return this.getToken(AdlParser.STRING, i);
        }
    };
    Object.defineProperty(StringListContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_stringList; },
        enumerable: true,
        configurable: true
    });
    StringListContext.prototype.enterRule = function (listener) {
        if (listener.enterStringList)
            listener.enterStringList(this);
    };
    StringListContext.prototype.exitRule = function (listener) {
        if (listener.exitStringList)
            listener.exitStringList(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], StringListContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], StringListContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], StringListContext.prototype, "exitRule", null);
    return StringListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.StringListContext = StringListContext;
var NumberListContext = /** @class */ (function (_super) {
    tslib_1.__extends(NumberListContext, _super);
    function NumberListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NumberListContext.prototype.number = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(NumberContext);
        }
        else {
            return this.getRuleContext(i, NumberContext);
        }
    };
    Object.defineProperty(NumberListContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_numberList; },
        enumerable: true,
        configurable: true
    });
    NumberListContext.prototype.enterRule = function (listener) {
        if (listener.enterNumberList)
            listener.enterNumberList(this);
    };
    NumberListContext.prototype.exitRule = function (listener) {
        if (listener.exitNumberList)
            listener.exitNumberList(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], NumberListContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NumberListContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NumberListContext.prototype, "exitRule", null);
    return NumberListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NumberListContext = NumberListContext;
var BooleanListContext = /** @class */ (function (_super) {
    tslib_1.__extends(BooleanListContext, _super);
    function BooleanListContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BooleanListContext.prototype.bool = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(BoolContext);
        }
        else {
            return this.getRuleContext(i, BoolContext);
        }
    };
    Object.defineProperty(BooleanListContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_booleanList; },
        enumerable: true,
        configurable: true
    });
    BooleanListContext.prototype.enterRule = function (listener) {
        if (listener.enterBooleanList)
            listener.enterBooleanList(this);
    };
    BooleanListContext.prototype.exitRule = function (listener) {
        if (listener.exitBooleanList)
            listener.exitBooleanList(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], BooleanListContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], BooleanListContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], BooleanListContext.prototype, "exitRule", null);
    return BooleanListContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BooleanListContext = BooleanListContext;
var CodeIdentifierContext = /** @class */ (function (_super) {
    tslib_1.__extends(CodeIdentifierContext, _super);
    function CodeIdentifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CodeIdentifierContext.prototype.codeIdentifierPart = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CodeIdentifierPartContext);
        }
        else {
            return this.getRuleContext(i, CodeIdentifierPartContext);
        }
    };
    Object.defineProperty(CodeIdentifierContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_codeIdentifier; },
        enumerable: true,
        configurable: true
    });
    CodeIdentifierContext.prototype.enterRule = function (listener) {
        if (listener.enterCodeIdentifier)
            listener.enterCodeIdentifier(this);
    };
    CodeIdentifierContext.prototype.exitRule = function (listener) {
        if (listener.exitCodeIdentifier)
            listener.exitCodeIdentifier(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], CodeIdentifierContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CodeIdentifierContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CodeIdentifierContext.prototype, "exitRule", null);
    return CodeIdentifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CodeIdentifierContext = CodeIdentifierContext;
var CodeIdentifierPartContext = /** @class */ (function (_super) {
    tslib_1.__extends(CodeIdentifierPartContext, _super);
    function CodeIdentifierPartContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    CodeIdentifierPartContext.prototype.identifier = function () {
        return this.tryGetRuleContext(0, IdentifierContext);
    };
    CodeIdentifierPartContext.prototype.number = function () {
        return this.tryGetRuleContext(0, NumberContext);
    };
    CodeIdentifierPartContext.prototype.ISO_DATE_TIME = function () { return this.tryGetToken(AdlParser.ISO_DATE_TIME, 0); };
    CodeIdentifierPartContext.prototype.ISO_DATE = function () { return this.tryGetToken(AdlParser.ISO_DATE, 0); };
    Object.defineProperty(CodeIdentifierPartContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_codeIdentifierPart; },
        enumerable: true,
        configurable: true
    });
    CodeIdentifierPartContext.prototype.enterRule = function (listener) {
        if (listener.enterCodeIdentifierPart)
            listener.enterCodeIdentifierPart(this);
    };
    CodeIdentifierPartContext.prototype.exitRule = function (listener) {
        if (listener.exitCodeIdentifierPart)
            listener.exitCodeIdentifierPart(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], CodeIdentifierPartContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CodeIdentifierPartContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CodeIdentifierPartContext.prototype, "exitRule", null);
    return CodeIdentifierPartContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.CodeIdentifierPartContext = CodeIdentifierPartContext;
var IdentifierContext = /** @class */ (function (_super) {
    tslib_1.__extends(IdentifierContext, _super);
    function IdentifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    IdentifierContext.prototype.nameIdentifier = function () {
        return this.tryGetRuleContext(0, NameIdentifierContext);
    };
    IdentifierContext.prototype.typeIdentifier = function () {
        return this.tryGetRuleContext(0, TypeIdentifierContext);
    };
    Object.defineProperty(IdentifierContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_identifier; },
        enumerable: true,
        configurable: true
    });
    IdentifierContext.prototype.enterRule = function (listener) {
        if (listener.enterIdentifier)
            listener.enterIdentifier(this);
    };
    IdentifierContext.prototype.exitRule = function (listener) {
        if (listener.exitIdentifier)
            listener.exitIdentifier(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], IdentifierContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], IdentifierContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], IdentifierContext.prototype, "exitRule", null);
    return IdentifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.IdentifierContext = IdentifierContext;
var BoolContext = /** @class */ (function (_super) {
    tslib_1.__extends(BoolContext, _super);
    function BoolContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    BoolContext.prototype.TRUE = function () { return this.tryGetToken(AdlParser.TRUE, 0); };
    BoolContext.prototype.FALSE = function () { return this.tryGetToken(AdlParser.FALSE, 0); };
    Object.defineProperty(BoolContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_bool; },
        enumerable: true,
        configurable: true
    });
    BoolContext.prototype.enterRule = function (listener) {
        if (listener.enterBool)
            listener.enterBool(this);
    };
    BoolContext.prototype.exitRule = function (listener) {
        if (listener.exitBool)
            listener.exitBool(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], BoolContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], BoolContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], BoolContext.prototype, "exitRule", null);
    return BoolContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.BoolContext = BoolContext;
var NameIdentifierContext = /** @class */ (function (_super) {
    tslib_1.__extends(NameIdentifierContext, _super);
    function NameIdentifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NameIdentifierContext.prototype.NAME_IDENTIFIER = function () { return this.tryGetToken(AdlParser.NAME_IDENTIFIER, 0); };
    NameIdentifierContext.prototype.keyword = function () {
        return this.tryGetRuleContext(0, KeywordContext);
    };
    NameIdentifierContext.prototype.AT_CODE_VALUE = function () { return this.tryGetToken(AdlParser.AT_CODE_VALUE, 0); };
    Object.defineProperty(NameIdentifierContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_nameIdentifier; },
        enumerable: true,
        configurable: true
    });
    NameIdentifierContext.prototype.enterRule = function (listener) {
        if (listener.enterNameIdentifier)
            listener.enterNameIdentifier(this);
    };
    NameIdentifierContext.prototype.exitRule = function (listener) {
        if (listener.exitNameIdentifier)
            listener.exitNameIdentifier(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], NameIdentifierContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NameIdentifierContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NameIdentifierContext.prototype, "exitRule", null);
    return NameIdentifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NameIdentifierContext = NameIdentifierContext;
var TypeIdentifierWithGenericsContext = /** @class */ (function (_super) {
    tslib_1.__extends(TypeIdentifierWithGenericsContext, _super);
    function TypeIdentifierWithGenericsContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeIdentifierWithGenericsContext.prototype.typeIdentifier = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeIdentifierContext);
        }
        else {
            return this.getRuleContext(i, TypeIdentifierContext);
        }
    };
    Object.defineProperty(TypeIdentifierWithGenericsContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_typeIdentifierWithGenerics; },
        enumerable: true,
        configurable: true
    });
    TypeIdentifierWithGenericsContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeIdentifierWithGenerics)
            listener.enterTypeIdentifierWithGenerics(this);
    };
    TypeIdentifierWithGenericsContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeIdentifierWithGenerics)
            listener.exitTypeIdentifierWithGenerics(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], TypeIdentifierWithGenericsContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TypeIdentifierWithGenericsContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TypeIdentifierWithGenericsContext.prototype, "exitRule", null);
    return TypeIdentifierWithGenericsContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeIdentifierWithGenericsContext = TypeIdentifierWithGenericsContext;
var TypeIdentifierContext = /** @class */ (function (_super) {
    tslib_1.__extends(TypeIdentifierContext, _super);
    function TypeIdentifierContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    TypeIdentifierContext.prototype.TYPE_IDENTIFIER = function () { return this.getToken(AdlParser.TYPE_IDENTIFIER, 0); };
    Object.defineProperty(TypeIdentifierContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_typeIdentifier; },
        enumerable: true,
        configurable: true
    });
    TypeIdentifierContext.prototype.enterRule = function (listener) {
        if (listener.enterTypeIdentifier)
            listener.enterTypeIdentifier(this);
    };
    TypeIdentifierContext.prototype.exitRule = function (listener) {
        if (listener.exitTypeIdentifier)
            listener.exitTypeIdentifier(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], TypeIdentifierContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TypeIdentifierContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], TypeIdentifierContext.prototype, "exitRule", null);
    return TypeIdentifierContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.TypeIdentifierContext = TypeIdentifierContext;
var KeywordContext = /** @class */ (function (_super) {
    tslib_1.__extends(KeywordContext, _super);
    function KeywordContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    KeywordContext.prototype.LANGUAGE = function () { return this.tryGetToken(AdlParser.LANGUAGE, 0); };
    KeywordContext.prototype.ARCHETYPE = function () { return this.tryGetToken(AdlParser.ARCHETYPE, 0); };
    KeywordContext.prototype.DESCRIPTION = function () { return this.tryGetToken(AdlParser.DESCRIPTION, 0); };
    KeywordContext.prototype.CONCEPT = function () { return this.tryGetToken(AdlParser.CONCEPT, 0); };
    KeywordContext.prototype.TERMINOLOGY = function () { return this.tryGetToken(AdlParser.TERMINOLOGY, 0); };
    KeywordContext.prototype.DEFINITION = function () { return this.tryGetToken(AdlParser.DEFINITION, 0); };
    KeywordContext.prototype.MATCHES = function () { return this.tryGetToken(AdlParser.MATCHES, 0); };
    KeywordContext.prototype.USE_NODE = function () { return this.tryGetToken(AdlParser.USE_NODE, 0); };
    KeywordContext.prototype.OCCURRENCES = function () { return this.tryGetToken(AdlParser.OCCURRENCES, 0); };
    KeywordContext.prototype.CARDINALITY = function () { return this.tryGetToken(AdlParser.CARDINALITY, 0); };
    KeywordContext.prototype.ORDERED = function () { return this.tryGetToken(AdlParser.ORDERED, 0); };
    KeywordContext.prototype.UNORDERED = function () { return this.tryGetToken(AdlParser.UNORDERED, 0); };
    KeywordContext.prototype.EXISTENCE = function () { return this.tryGetToken(AdlParser.EXISTENCE, 0); };
    KeywordContext.prototype.CLOSED = function () { return this.tryGetToken(AdlParser.CLOSED, 0); };
    KeywordContext.prototype.ANNOTATIONS = function () { return this.tryGetToken(AdlParser.ANNOTATIONS, 0); };
    KeywordContext.prototype.TEMPLATE = function () { return this.tryGetToken(AdlParser.TEMPLATE, 0); };
    KeywordContext.prototype.TEMPLATE_OVERLAY = function () { return this.tryGetToken(AdlParser.TEMPLATE_OVERLAY, 0); };
    KeywordContext.prototype.SPECIALISE = function () { return this.tryGetToken(AdlParser.SPECIALISE, 0); };
    KeywordContext.prototype.UNIQUE = function () { return this.tryGetToken(AdlParser.UNIQUE, 0); };
    Object.defineProperty(KeywordContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_keyword; },
        enumerable: true,
        configurable: true
    });
    KeywordContext.prototype.enterRule = function (listener) {
        if (listener.enterKeyword)
            listener.enterKeyword(this);
    };
    KeywordContext.prototype.exitRule = function (listener) {
        if (listener.exitKeyword)
            listener.exitKeyword(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], KeywordContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], KeywordContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], KeywordContext.prototype, "exitRule", null);
    return KeywordContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.KeywordContext = KeywordContext;
var PathSegmentContext = /** @class */ (function (_super) {
    tslib_1.__extends(PathSegmentContext, _super);
    function PathSegmentContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    PathSegmentContext.prototype.nameIdentifier = function () {
        return this.getRuleContext(0, NameIdentifierContext);
    };
    PathSegmentContext.prototype.atCode = function () {
        return this.tryGetRuleContext(0, AtCodeContext);
    };
    Object.defineProperty(PathSegmentContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_pathSegment; },
        enumerable: true,
        configurable: true
    });
    PathSegmentContext.prototype.enterRule = function (listener) {
        if (listener.enterPathSegment)
            listener.enterPathSegment(this);
    };
    PathSegmentContext.prototype.exitRule = function (listener) {
        if (listener.exitPathSegment)
            listener.exitPathSegment(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], PathSegmentContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PathSegmentContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PathSegmentContext.prototype, "exitRule", null);
    return PathSegmentContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.PathSegmentContext = PathSegmentContext;
var RmPathContext = /** @class */ (function (_super) {
    tslib_1.__extends(RmPathContext, _super);
    function RmPathContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    RmPathContext.prototype.pathSegment = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(PathSegmentContext);
        }
        else {
            return this.getRuleContext(i, PathSegmentContext);
        }
    };
    Object.defineProperty(RmPathContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_rmPath; },
        enumerable: true,
        configurable: true
    });
    RmPathContext.prototype.enterRule = function (listener) {
        if (listener.enterRmPath)
            listener.enterRmPath(this);
    };
    RmPathContext.prototype.exitRule = function (listener) {
        if (listener.exitRmPath)
            listener.exitRmPath(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], RmPathContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RmPathContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RmPathContext.prototype, "exitRule", null);
    return RmPathContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.RmPathContext = RmPathContext;
var UrlContext = /** @class */ (function (_super) {
    tslib_1.__extends(UrlContext, _super);
    function UrlContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    UrlContext.prototype.identifier = function () {
        return this.getRuleContext(0, IdentifierContext);
    };
    UrlContext.prototype.codeIdentifierPart = function (i) {
        if (i === undefined) {
            return this.getRuleContexts(CodeIdentifierPartContext);
        }
        else {
            return this.getRuleContext(i, CodeIdentifierPartContext);
        }
    };
    UrlContext.prototype.UNICODE_CHAR = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.UNICODE_CHAR);
        }
        else {
            return this.getToken(AdlParser.UNICODE_CHAR, i);
        }
    };
    Object.defineProperty(UrlContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_url; },
        enumerable: true,
        configurable: true
    });
    UrlContext.prototype.enterRule = function (listener) {
        if (listener.enterUrl)
            listener.enterUrl(this);
    };
    UrlContext.prototype.exitRule = function (listener) {
        if (listener.exitUrl)
            listener.exitUrl(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], UrlContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], UrlContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], UrlContext.prototype, "exitRule", null);
    return UrlContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.UrlContext = UrlContext;
var NumberOrStarContext = /** @class */ (function (_super) {
    tslib_1.__extends(NumberOrStarContext, _super);
    function NumberOrStarContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NumberOrStarContext.prototype.number = function () {
        return this.tryGetRuleContext(0, NumberContext);
    };
    Object.defineProperty(NumberOrStarContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_numberOrStar; },
        enumerable: true,
        configurable: true
    });
    NumberOrStarContext.prototype.enterRule = function (listener) {
        if (listener.enterNumberOrStar)
            listener.enterNumberOrStar(this);
    };
    NumberOrStarContext.prototype.exitRule = function (listener) {
        if (listener.exitNumberOrStar)
            listener.exitNumberOrStar(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], NumberOrStarContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NumberOrStarContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NumberOrStarContext.prototype, "exitRule", null);
    return NumberOrStarContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NumberOrStarContext = NumberOrStarContext;
var NumberContext = /** @class */ (function (_super) {
    tslib_1.__extends(NumberContext, _super);
    function NumberContext(parent, invokingState) {
        return _super.call(this, parent, invokingState) || this;
    }
    NumberContext.prototype.INTEGER = function (i) {
        if (i === undefined) {
            return this.getTokens(AdlParser.INTEGER);
        }
        else {
            return this.getToken(AdlParser.INTEGER, i);
        }
    };
    Object.defineProperty(NumberContext.prototype, "ruleIndex", {
        get: function () { return AdlParser.RULE_number; },
        enumerable: true,
        configurable: true
    });
    NumberContext.prototype.enterRule = function (listener) {
        if (listener.enterNumber)
            listener.enterNumber(this);
    };
    NumberContext.prototype.exitRule = function (listener) {
        if (listener.exitNumber)
            listener.exitNumber(this);
    };
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [])
    ], NumberContext.prototype, "ruleIndex", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NumberContext.prototype, "enterRule", null);
    tslib_1.__decorate([
        Decorators_2.Override,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NumberContext.prototype, "exitRule", null);
    return NumberContext;
}(ParserRuleContext_1.ParserRuleContext));
exports.NumberContext = NumberContext;
//# sourceMappingURL=AdlParser.js.map