import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: "java"

processResources {
    filesMatching("mensagem_pt_BR.properties") {
        filter ReplaceTokens, tokens: [
                "application.version": project.version
        ]
    }
}

dependencyManagement {

    imports {
        mavenBom "fw:fw:${fwVersion}"
        mavenBom "org.jboss.spec:jboss-javaee-7.0:${orgJbossSpecJavaeeVersion}"
        mavenBom "org.wildfly.bom:wildfly-javaee7-with-tools:${orgWildflyVersion}"
    }

}

dependencies {

    // FW
    compile "fw:fw-core"
    compile "fw:fw-security"

    //Import the CDI API, we use provided scope as the API is included in WildFly
    compile "javax.enterprise:cdi-api"

    //Import the Common Annotations API (JSR-250), we use provided scope as the API is included in WildFly
    compile "org.jboss.spec.javax.annotation:jboss-annotations-api_1.2_spec"

    //Import the EJB API, we use provided scope as the API is included in WildFly
    compile "org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec"

    //Import the CDI Interceptor, we use provided scope as the API is included in WildFly
    compile "org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.2_spec"

    //Import the JAX-RS API, we use provided scope as the API is included in WildFly
    compile "org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.0_spec"

    //Import the JAX-WS API, we use provided scope as the API is included in WildFly
    compile "org.jboss.spec.javax.xml.bind:jboss-jaxb-api_2.2_spec"

    //Import the Security
    compile "org.jboss.spec.javax.security.jacc:jboss-jacc-api_1.5_spec"
    compile "org.jboss.spec.javax.security.auth.message:jboss-jaspi-api_1.1_spec"
    compile "org.picketbox:picketbox:${orgPicketboxVersion}"

    //Import the JPA API, we use provided scope as the API is included in WildFly
    compile "org.hibernate.javax.persistence:hibernate-jpa-2.1-api"

    //Bean Validation Implementation
    //Provides portable constraints such as @Email
    //Hibernate Validator is shipped in WildFly
    compile "org.hibernate:hibernate-validator"

    // Import dependencies to hibernate packages(eg. hibernate-core) depending on features you want to use like Hibernate Session used in the quickstart
    // please note that scope is provided as these jars are shipped with as7
    compile "org.hibernate:hibernate-core"
    compile "org.hibernate:hibernate-entitymanager"

    // Guava Version
    compile "com.google.guava:guava:${comGoogleGuavaVersion}"

    // Google Gson
    compile "com.google.code.gson:gson:${comGoogleCodeGsonVersion}"

    // JSR350
    compile "com.google.code.findbugs:jsr305:${comGoogleCodeFindbugsVersion}"

    // Jackson
    compile "com.fasterxml.jackson.core:jackson-core:${comFasterxmlJacksonCoreVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${comFasterxmlJacksonCoreVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${comFasterxmlJacksonCoreVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:${comFasterxmlJacksonCoreVersion}"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${comFasterxmlJacksonCoreVersion}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${comFasterxmlJacksonCoreVersion}"

    // Apache Oltu
    compile "org.apache.oltu.oauth2:org.apache.oltu.oauth2.authzserver:${orgApacheOltuVersion}"
    compile "org.apache.oltu.oauth2:org.apache.oltu.oauth2.resourceserver:${orgApacheOltuVersion}"
    compile "org.apache.oltu.oauth2:org.apache.oltu.oauth2.common:${orgApacheOltuVersion}"
    compile "org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:${orgApacheOltuVersion}"

    // OAuth JWT
    compile "com.auth0:java-jwt:${comAuth0Version}"

    //Apache Commons
    compile "commons-lang:commons-lang:${orgApacheCommonsLangVersion}"
    compile "commons-collections:commons-collections:${orgApacheCommonsCollectionsVersion}"
    compile "commons-beanutils:commons-beanutils:${orgApacheCommonsBeanutilsVersion}"

    //Logs
    compile "ch.qos.logback:logback-classic:${chQosLogbackVersion}"

    // Tests
    testCompile "junit:junit:${orgJunitVersion}"
    testCompile "org.mockito:mockito-all:${orgMockitoVersion}"
    testCompile "org.powermock:powermock-api-mockito:${orgPowermockVersion}"
    testCompile "org.powermock:powermock-module-junit4:${orgPowermockVersion}"

}
