"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CodePhrase_1 = require("./CodePhrase");
var DvMultimedia_1 = require("./datavalues/encapsulated/DvMultimedia");
var index_1 = require("./index");
var Interval_1 = require("./Interval");
var MultiplicityInterval_1 = require("./MultiplicityInterval");
var RmObjectFactory;
(function (RmObjectFactory) {
    var BASE64_MARKER = ';base64,';
    var BASE64_DATA_MARKER = 'data:';
    function createInterval(lower, upper, lowerIncluded, upperIncluded) {
        var result = new Interval_1.Interval();
        result.lower = lower;
        result.upper = upper;
        result.lowerUnbounded = lower == null;
        result.upperUnbounded = upper == null;
        result.lowerIncluded = lowerIncluded == null ? lower != null : lowerIncluded;
        result.upperIncluded = upperIncluded == null ? upper != null : upperIncluded;
        return result;
    }
    RmObjectFactory.createInterval = createInterval;
    function createMultiplicityInterval(lower, upper, lowerIncluded, upperIncluded) {
        var result = new MultiplicityInterval_1.MultiplicityInterval();
        Object.assign(result, createInterval(lower, upper, lowerIncluded, upperIncluded));
        return result;
    }
    RmObjectFactory.createMultiplicityInterval = createMultiplicityInterval;
    function createDvMultimedia(dataURI, alternateText) {
        var result = new DvMultimedia_1.DvMultimedia();
        var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
        var base64 = dataURI.substring(base64Index);
        var data;
        // noinspection TsLint
        if (typeof window === 'undefined') {
            data = Buffer.from(base64, 'base64');
        }
        else {
            var raw = window.atob(base64);
            data = toUint8Array(raw);
        }
        result.uri = new index_1.DvUri({ value: dataURI });
        result.size = data.length;
        //result.data = data;
        result.alternateText = alternateText;
        var mimeType = dataURI.substring(0, dataURI.indexOf(BASE64_MARKER)).replace(BASE64_DATA_MARKER, '');
        result.mediaType = new CodePhrase_1.CodePhrase({
            codeString: mimeType.substring(mimeType.indexOf('/') + 1),
            terminologyId: mimeType
        });
        return result;
    }
    RmObjectFactory.createDvMultimedia = createDvMultimedia;
    function toUint8Array(raw) {
        var array = new Uint8Array(new ArrayBuffer(raw.length));
        for (var i = 0; i < raw.length; i++) {
            array[i] = raw.charCodeAt(i);
        }
        return array;
    }
})(RmObjectFactory = exports.RmObjectFactory || (exports.RmObjectFactory = {}));
//# sourceMappingURL=RmObjectFactory.js.map