"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var typed_json_1 = require("../../../../typed-json");
var DvAmount_1 = require("../DvAmount");
/**
 * Represents a period of time with respect to a notional point in time, which is not specified.
 * A sign may be used to indicate the duration is backwards in time rather than forwards.
 *
 * NOTE: a deviation from ISO8601 is supported, allowing the W' designator to be mixed with other designators.
 * See assumed types section in the Support IM.
 *
 * Used for recording the duration of something in the real world, particularly when there is a need a) to represent the duration
 * in customary format, i.e. days, hours, minutes etc, and b) if it will be used in computational operations with date/time quantities,
 * i.e. additions, subtractions etc.
 *
 * Misuse: Durations cannot be used to represent points in time, or intervals of time.
 */
var DvDuration = /** @class */ (function (_super) {
    tslib_1.__extends(DvDuration, _super);
    function DvDuration(init) {
        var _this = _super.call(this) || this;
        _this.value = null;
        if (init) {
            Object.assign(_this, init);
        }
        return _this;
    }
    DvDuration.prototype.getMagnitude = function () {
        return null;
    };
    tslib_1.__decorate([
        typed_json_1.JsonMember,
        tslib_1.__metadata("design:type", String)
    ], DvDuration.prototype, "value", void 0);
    DvDuration = tslib_1.__decorate([
        typed_json_1.JsonObject({ name: 'DvDuration' }),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DvDuration);
    return DvDuration;
}(DvAmount_1.DvAmount));
exports.DvDuration = DvDuration;
//# sourceMappingURL=DvDuration.js.map