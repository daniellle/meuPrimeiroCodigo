"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs = require("fs");
require("reflect-metadata");
var SimpleArchetypeRepository_1 = require("./flattener/SimpleArchetypeRepository");
var AdlDeserializer_1 = require("./parser/AdlDeserializer");
var rm_1 = require("./rm");
var Composition_1 = require("./rm/composition/Composition");
var PartyIdentified_1 = require("./rm/PartyIdentified");
var rminfo_1 = require("./rminfo");
var FormBuilder_1 = require("./rminfo/FormBuilder");
var IFormObject_1 = require("./rminfo/spec/IFormObject");
var OperationalTemplateBuilder_1 = require("./template/OperationalTemplateBuilder");
var TemplateDeserializer_1 = require("./template/TemplateDeserializer");
var AESCryptor_1 = require("./typed-json/customizer/encryption/AESCryptor");
var RequiredValidator_1 = require("./typed-json/customizer/validator/RequiredValidator");
var Typed_json_1 = require("./typed-json/Typed-json");
var parseArchetype = function (classpathResource) {
    var adl = fs.readFileSync(classpathResource);
    return AdlDeserializer_1.AdlDeserializer.deserialize(adl.toString());
};
var parseTemplate = function (classpathResource) {
    var adl = fs.readFileSync(classpathResource);
    return TemplateDeserializer_1.TemplateDeserializer.deserialize(adl.toString());
};
var readArchetypes = function (dir) {
    var files = fs.readdirSync(dir);
    return files.map(function (file) {
        var data = fs.readFileSync(dir + "/" + file, 'utf8');
        // noinspection TsLint
        console.log(file);
        return AdlDeserializer_1.AdlDeserializer.deserialize(data);
    });
};
var readTemplates = function () {
    var dir = './src/adlt';
    var files = fs.readdirSync(dir);
    var archetypes = files.map(function (file) {
        var data = fs.readFileSync(dir + "/" + file, 'utf8');
        console.log(file);
        return TemplateDeserializer_1.TemplateDeserializer.deserialize(data.toString());
    });
    // noinspection TsLint
    console.log(JSON.stringify(archetypes, null, 4));
};
function main() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var id, archetypes, template, repository, opt, obj, creator, form, aes, jsonForm, formFrontEnd, jsonComposition, composition;
        return tslib_1.__generator(this, function (_a) {
            id = new rm_1.ArchetypeId('openEHR-EHR-ITEM_TREE.medication.v1');
            archetypes = readArchetypes('/home/leonardo/projetos/adl-archetypes/archetypes');
            template = parseTemplate('/home/leonardo/projetos/adl-archetypes/templates/' +
                'openEHR-EHR-COMPOSITION.admissional.v1.adlt');
            repository = new SimpleArchetypeRepository_1.SimpleArchetypeRepository(archetypes);
            opt = OperationalTemplateBuilder_1.OperationalTemplateBuilder.BUILD(repository, template);
            // const archetype = parseArchetype('/home/leonardo/projetos/adl2-parser/src/adl/basic.adl');
            fs.writeFileSync('opt.json', JSON.stringify(opt));
            obj = JSON.parse(JSON.stringify(opt));
            creator = new FormBuilder_1.FormBuilder(obj);
            form = creator.build(obj.definition);
            form.context = new rm_1.EventContext({
                participations: [
                    new rm_1.Participation({
                        time: new rm_1.DvInterval({
                            lower: new rm_1.DvDateTime({ value: new Date() })
                        }),
                        function: new rm_1.DvText({ value: 'teste' }),
                        performer: new PartyIdentified_1.PartyIdentified({
                            externalRef: new rm_1.PartyRef({
                                id: new rm_1.GenericId({
                                    value: '59e7d125c9d0be1f9333db9c'
                                })
                            })
                        })
                    })
                ]
            });
            aes = new AESCryptor_1.AESCryptor('secret');
            rminfo_1.RmBuilder.TRAVERSE_ELEMENT_ARCHETYPE_DETAILS(form);
            jsonForm = Typed_json_1.TypedJSON.stringify(form, { includeTags: [IFormObject_1.FORM_TAG] });
            fs.writeFileSync('form.json', jsonForm);
            formFrontEnd = Typed_json_1.TypedJSON.parse(jsonForm, Composition_1.Composition);
            jsonComposition = Typed_json_1.TypedJSON.stringify(formFrontEnd, { replacer: Typed_json_1.removeNull }, aes, new RequiredValidator_1.RequiredValidator());
            fs.writeFileSync('encrypted.json', jsonComposition);
            composition = Typed_json_1.TypedJSON.parse(jsonComposition, Composition_1.Composition, { includeTags: [IFormObject_1.FORM_TAG] }, aes);
            fs.writeFileSync('decrypted.json', Typed_json_1.TypedJSON.stringify(composition));
            return [2 /*return*/];
        });
    });
}
main().catch(function (e) {
    console.error(e);
});
//# sourceMappingURL=main.js.map