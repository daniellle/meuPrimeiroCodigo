"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var RmPath_1 = require("../flattener/RmPath");
var RmQuery_1 = require("../query/RmQuery");
var Locatable_1 = require("../rm/archetyped/Locatable");
var Element_1 = require("../rm/datastructures/Element");
var RmObjectCreator_1 = require("./RmObjectCreator");
var RmUtils_1 = require("./RmUtils");
var RmBuilder = /** @class */ (function () {
    function RmBuilder(root) {
        this.root = root;
        this.creator = new RmObjectCreator_1.RmObjectCreator();
    }
    RmBuilder.TRAVERSE_ELEMENT_ARCHETYPE_DETAILS = function (root, archetypeDetails) {
        if (root.isArchetypeRoot()) {
            archetypeDetails = root.archetypeDetails;
        }
        else if (archetypeDetails && root instanceof Element_1.Element) {
            root.archetypeDetails = _.clone(archetypeDetails);
            root.archetypeDetails.archetypeId.value = root.archetypeDetails.archetypeId.value
                .replace(/(-\d+(?=\.v(?:\d.*)))/, '').replace(/(ovl-\w*-)/, '');
        }
        try {
            for (var _a = tslib_1.__values(Object.keys(root)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var propertyKey = _b.value;
                var member = root[propertyKey];
                if (_.isArray(member)) {
                    try {
                        for (var member_1 = tslib_1.__values(member), member_1_1 = member_1.next(); !member_1_1.done; member_1_1 = member_1.next()) {
                            var el = member_1_1.value;
                            if (el instanceof Locatable_1.Locatable) {
                                this.TRAVERSE_ELEMENT_ARCHETYPE_DETAILS(el, archetypeDetails);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (member_1_1 && !member_1_1.done && (_c = member_1.return)) _c.call(member_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else if (member instanceof Locatable_1.Locatable) {
                    this.TRAVERSE_ELEMENT_ARCHETYPE_DETAILS(member, archetypeDetails);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var e_2, _d, e_1, _c;
    };
    /**
     * Add new clone element base on path
     * @param {string} path
     * @returns {any} new added element
     */
    RmBuilder.prototype.addElement = function (path) {
        var _this = this;
        return new Promise((function (resolve, reject) {
            try {
                var rmQuery = new RmQuery_1.RmQuery(_this.root);
                var rmPath = RmPath_1.RmPath.VALUE_OF(path);
                var element = rmQuery.findByAPath(path);
                if (!element) {
                    return reject(new Error("No Element found for path: " + path));
                }
                if (!element.multiple) {
                    return reject(new Error("Element is not multiple: " + path));
                }
                var newElement = RmUtils_1.RmUtils.clone(element);
                _this.walkNewDataValue(newElement);
                _this.creator.addElementToListOrSetSingleValues(element.parent, rmPath.attribute, newElement);
                resolve(newElement);
            }
            catch (e) {
                reject(e);
            }
        }));
    };
    RmBuilder.prototype.walkNewDataValue = function (obj) {
        var _this = this;
        if (obj != null && typeof obj === 'object') {
            try {
                for (var _a = tslib_1.__values(Object.keys(obj)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var prop = _b.value;
                    if (_.isArray(obj[prop])) {
                        obj[prop].forEach(function (n) {
                            if (n instanceof Element_1.Element) {
                                _this.setNewDataValue(n);
                            }
                            else {
                                _this.walkNewDataValue(n);
                            }
                        });
                    }
                    else if (obj[prop] instanceof Element_1.Element) {
                        this.setNewDataValue(obj[prop]);
                    }
                    else if (obj instanceof Element_1.Element) {
                        this.setNewDataValue(obj);
                    }
                    else {
                        this.walkNewDataValue(obj[prop]);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        var e_3, _c;
    };
    /**
     * Remove element by path
     * @param {Locatable} root
     * @param {string} path
     */
    RmBuilder.prototype.removeElement = function (path) {
        var _this = this;
        return new Promise((function (resolve, reject) {
            try {
                var rmQuery = new RmQuery_1.RmQuery(_this.root);
                var rmPath = RmPath_1.RmPath.VALUE_OF(path);
                var element = rmQuery.findByAPath(path);
                if (!element) {
                    return reject(new Error("No Element found for path: " + path));
                }
                if (!element.cloned) {
                    return reject(new Error("It is not allowed to remove uncloned element: " + path));
                }
                var parent_1 = element.parent;
                if (_.isArray(parent_1[rmPath.attribute])) {
                    _.remove(parent_1[rmPath.attribute], element);
                }
                _this.creator.traverseWithPath(parent_1);
                resolve(element);
            }
            catch (e) {
                reject(e);
            }
        }));
    };
    RmBuilder.prototype.setNewDataValue = function (element) {
        var CONSTRUCTOR = Object.getPrototypeOf(element.value).constructor;
        var newDataValue = new CONSTRUCTOR();
        var originalDataValue = element.value;
        newDataValue.aPath = originalDataValue.aPath;
        newDataValue.amPath = originalDataValue.amPath;
        if (originalDataValue.constraint != null) {
            newDataValue.constraint = originalDataValue.constraint;
        }
        element.value = newDataValue;
    };
    return RmBuilder;
}());
exports.RmBuilder = RmBuilder;
//# sourceMappingURL=RmBuilder.js.map