"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var Pathable_1 = require("../rm/archetyped/Pathable");
var RmUtils;
(function (RmUtils) {
    function addParent(parent) {
        if (parent != null && typeof parent === 'object') {
            try {
                for (var _a = tslib_1.__values(Object.keys(parent)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var prop = _b.value;
                    if (_.isArray(parent[prop])) {
                        parent[prop].forEach(function (n) {
                            if (n instanceof Pathable_1.Pathable && parent instanceof Pathable_1.Pathable) {
                                n.parent = parent;
                            }
                            addParent(n);
                        });
                    }
                    else {
                        if (parent instanceof Pathable_1.Pathable && parent[prop] instanceof Pathable_1.Pathable) {
                            parent[prop].parent = parent;
                        }
                        addParent(parent[prop]);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        var e_1, _c;
    }
    function clone(locatable) {
        var obj = _.cloneDeepWith(locatable, function (value, _key, _object, _stack) {
            //nao clona o valor ser ja foi clonado
            if (value && value.cloned) {
                return value;
            }
        });
        //recursivamente remove os objetos clonado da estrutura
        removeCloned(obj);
        obj.cloned = true;
        addParent(obj);
        return obj;
    }
    RmUtils.clone = clone;
    function removeCloned(obj) {
        if (obj != null && typeof obj === 'object') {
            try {
                for (var _a = tslib_1.__values(Object.keys(obj)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var prop = _b.value;
                    if (_.isArray(obj[prop])) {
                        _.remove(obj[prop], function (n) { return n.cloned; });
                        obj[prop].forEach(function (n) {
                            removeCloned(n);
                        });
                    }
                    else {
                        removeCloned(obj[prop]);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        var e_2, _c;
    }
})(RmUtils = exports.RmUtils || (exports.RmUtils = {}));
//# sourceMappingURL=RmUtils.js.map