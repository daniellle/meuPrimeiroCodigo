"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var rm_1 = require("../rm");
var rm_2 = require("../rm");
var rm_3 = require("../rm");
var Typed_json_1 = require("../typed-json/Typed-json");
var RmObjectCreator_1 = require("./RmObjectCreator");
var IFormObject_1 = require("./spec/IFormObject");
var TypeGuard_1 = require("./TypeGuard");
var FormBuilder = /** @class */ (function () {
    function FormBuilder(archetype) {
        var _this = this;
        this.formCustomizer = function (value, srcValue) {
            if (_.isArray(value) && _.isArray(srcValue)) {
                var newValue = [];
                var _loop_1 = function (srcEl) {
                    var formValue = value.find(function (v) { return v.archetypeNodeId === srcEl.archetypeNodeId; });
                    newValue.push(_.mergeWith({}, formValue, srcEl, _this.formCustomizer));
                };
                try {
                    for (var srcValue_1 = tslib_1.__values(srcValue), srcValue_1_1 = srcValue_1.next(); !srcValue_1_1.done; srcValue_1_1 = srcValue_1.next()) {
                        var srcEl = srcValue_1_1.value;
                        _loop_1(srcEl);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (srcValue_1_1 && !srcValue_1_1.done && (_a = srcValue_1.return)) _a.call(srcValue_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (newValue.length > value.length) {
                    try {
                        for (var _b = tslib_1.__values(newValue.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var _d = tslib_1.__read(_c.value, 2), index = _d[0], v = _d[1];
                            var nextIndex = index + 1;
                            if (nextIndex < newValue.length && newValue[nextIndex].archetypeNodeId === v.archetypeNodeId) {
                                newValue[nextIndex].cloned = true;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_e = _b.return)) _e.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                return newValue;
            }
            return undefined;
            var e_1, _a, e_2, _e;
        };
        this.archetype = archetype;
        this.creator = new RmObjectCreator_1.RmObjectCreator(archetype);
    }
    FormBuilder.prototype.merge = function (data, clazz) {
        var form = this.build(this.archetype.definition);
        var CONSTRUCUTOR = clazz || rm_2.Composition;
        var formObj = JSON.parse(Typed_json_1.TypedJSON.stringify(form, { includeTags: [IFormObject_1.FORM_TAG] }));
        var merged = _.mergeWith(formObj, data, this.formCustomizer);
        var composition = Typed_json_1.TypedJSON.parse(JSON.stringify(merged), CONSTRUCUTOR);
        new RmObjectCreator_1.RmObjectCreator().traverseWithPath(composition);
        return composition;
    };
    FormBuilder.prototype.build = function (object, path, root) {
        if (path === void 0) { path = ''; }
        var result = this.creator.create(object, root);
        if (TypeGuard_1.isCCOmplexObject(object)) {
            if (TypeGuard_1.isCArchetypeRoot(object) && result instanceof rm_1.Locatable) {
                root = result;
            }
            result.aPath = path;
            //path from achertype
            result.amPath = object.aPath;
            if (object.occurrences) {
                var required = Object.assign(new rm_3.MultiplicityInterval(), object.occurrences).isMandatory();
                var multiple = (object.occurrences.upperIncluded && object.occurrences.upper > 1) || object.occurrences.upperUnbounded;
                Object.assign(result, { multiple: multiple, required: required });
            }
            try {
                for (var _a = tslib_1.__values(object.attributes), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var attribute = _b.value;
                    var children = [];
                    try {
                        for (var _c = tslib_1.__values(attribute.children.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var _e = tslib_1.__read(_d.value, 2), childIndex = _e[0], childConstraint = _e[1];
                            if (TypeGuard_1.isCCOmplexObject(childConstraint)) {
                                var tag = path + "/" + attribute.rmAttributeName;
                                if (this.creator.isMultipleValued(result, attribute.rmAttributeName)) {
                                    tag = tag + "[" + childIndex + "]";
                                }
                                var childObject = this.build(childConstraint, tag, root);
                                if (childObject instanceof rm_1.Locatable && result instanceof rm_1.Locatable) {
                                    childObject.parent = result;
                                }
                                children.push(childObject);
                            }
                            else {
                                this.creator.setConstraint(result, attribute.rmAttributeName, childConstraint, root);
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    if (children.length > 0) {
                        this.creator.setValues(result, attribute.rmAttributeName, children);
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_g = _a.return)) _g.call(_a);
                }
                finally { if (e_4) throw e_4.error; }
            }
            try {
                for (var _h = tslib_1.__values(object.attributeTuples), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var tuples = _j.value;
                    try {
                        for (var _k = tslib_1.__values(tuples.members.entries()), _l = _k.next(); !_l.done; _l = _k.next()) {
                            var _m = tslib_1.__read(_l.value, 2), index = _m[0], members = _m[1];
                            try {
                                for (var _o = tslib_1.__values(tuples.children), _p = _o.next(); !_p.done; _p = _o.next()) {
                                    var child = _p.value;
                                    var childConstraint = child.members[index];
                                    this.creator.setConstraint(result, members.rmAttributeName, childConstraint);
                                }
                            }
                            catch (e_5_1) { e_5 = { error: e_5_1 }; }
                            finally {
                                try {
                                    if (_p && !_p.done && (_q = _o.return)) _q.call(_o);
                                }
                                finally { if (e_5) throw e_5.error; }
                            }
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (_l && !_l.done && (_r = _k.return)) _r.call(_k);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_s = _h.return)) _s.call(_h);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        return result;
        var e_4, _g, e_3, _f, e_7, _s, e_6, _r, e_5, _q;
    };
    return FormBuilder;
}());
exports.FormBuilder = FormBuilder;
//# sourceMappingURL=FormBuilder.js.map