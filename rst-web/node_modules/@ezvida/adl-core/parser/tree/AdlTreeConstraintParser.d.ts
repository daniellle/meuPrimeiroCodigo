import { Archetype } from '../../am/Archetype';
import { CComplexObject } from '../../am/CComplexObject';
import { ComplexObjectConstraintContext } from '../../grammar/AdlParser';
export declare class AdlTreeConstraintParser {
    private archetype;
    constructor(archetype: Archetype);
    parseComplexObject(ctx: ComplexObjectConstraintContext, path?: string): CComplexObject;
    private parseOccurrences(ctx);
    private parseAttributeList(target, ctx);
    private parseAttribute(ctx, path?);
    private parseCardinality(context);
    private parseMultiValue(ctx, path?);
    private parseValueConstraint(ctx, path?);
    private parseTypeDefinition(ctx, path?);
    /**
     * Internal References (Proxy Constraint Objects)
     * eg. use_node TYPE[idN] archetype_path
     */
    private parseArchetypeInternalRef(ctx, path?);
    private parseSiblingOrder(ctx);
    /**
     * External References Slot. ie. An archetype slot defines a constrained
     * compositional chaining point in an archetype at which other archetypes
     * can be inserted, if they are in the set defined by the slot constraint.
     */
    private parseArchetypeSlot(ctx, path?);
    private parseAssertions(cAssertions);
    private parseAssertion(cAssertion);
    private parseAttributeTuple(ctx);
    /**
     * @Deprecated ADL 1.4
     * @param {OdinValueContext} ctx
     * @returns {CObject}
     */
    private parseAdlValueConstraint(ctx);
    private parseCDvQuantityConstraint(ctx);
    private parseCQuantityItem(ctx);
    private parseDvQuantity(ctx);
    private parseArchetypeReference(ctx, path?);
    private parseCDvOrdinalConstraint(ctx);
    private parseOrdinalItem(ctx);
}
