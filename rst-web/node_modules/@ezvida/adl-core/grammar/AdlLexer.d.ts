import { ATN } from 'antlr4ts/atn/ATN';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { Vocabulary } from 'antlr4ts/Vocabulary';
export declare class AdlLexer extends Lexer {
    static readonly T__0: number;
    static readonly T__1: number;
    static readonly T__2: number;
    static readonly T__3: number;
    static readonly T__4: number;
    static readonly RANGE: number;
    static readonly EQUALS: number;
    static readonly PAREN_OPEN: number;
    static readonly PAREN_CLOSE: number;
    static readonly BRACKET_OPEN: number;
    static readonly BRACKET_CLOSE: number;
    static readonly GT: number;
    static readonly LT: number;
    static readonly PERIOD: number;
    static readonly COMMA: number;
    static readonly COLON: number;
    static readonly SEMICOLON: number;
    static readonly MINUS: number;
    static readonly UNDERSCORE: number;
    static readonly PIPE: number;
    static readonly ASTERISK: number;
    static readonly CARET: number;
    static readonly AMP: number;
    static readonly EXCLAMATION: number;
    static readonly QUESTION: number;
    static readonly OTHER_SYMBOL: number;
    static readonly DATE_TIME_PATTERN: number;
    static readonly TIME_PATTERN: number;
    static readonly DATE_PATTERN: number;
    static readonly DURATION: number;
    static readonly ISO_DATE_TIME: number;
    static readonly ISO_DATE: number;
    static readonly ISO_TIME: number;
    static readonly AT_CODE_VALUE: number;
    static readonly LANGUAGE: number;
    static readonly ARCHETYPE: number;
    static readonly TEMPLATE: number;
    static readonly TEMPLATE_OVERLAY: number;
    static readonly CONCEPT: number;
    static readonly DESCRIPTION: number;
    static readonly SPECIALISE: number;
    static readonly DEFINITION: number;
    static readonly MATCHES: number;
    static readonly USE_NODE: number;
    static readonly OCCURRENCES: number;
    static readonly INCLUDE: number;
    static readonly EXCLUDE: number;
    static readonly ALLOW_ARCHETYPE: number;
    static readonly CARDINALITY: number;
    static readonly UNORDERED: number;
    static readonly ORDERED: number;
    static readonly UNIQUE: number;
    static readonly EXISTENCE: number;
    static readonly BEFORE: number;
    static readonly AFTER: number;
    static readonly USE_ARCHETYPE: number;
    static readonly USE_TEMPLATE: number;
    static readonly CLOSED: number;
    static readonly ANNOTATIONS: number;
    static readonly TERMINOLOGY: number;
    static readonly TRUE: number;
    static readonly FALSE: number;
    static readonly TYPE_IDENTIFIER: number;
    static readonly NAME_IDENTIFIER: number;
    static readonly INTEGER: number;
    static readonly STRING: number;
    static readonly UNICODE_CHAR: number;
    static readonly LINE_COMMENT: number;
    static readonly WS: number;
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    readonly vocabulary: Vocabulary;
    constructor(input: CharStream);
    readonly grammarFileName: string;
    readonly ruleNames: string[];
    readonly serializedATN: string;
    readonly modeNames: string[];
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static readonly _ATN: ATN;
}
