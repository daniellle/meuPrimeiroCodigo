import { ParseTreeListener } from 'antlr4ts/tree/ParseTreeListener';
import { AdlContext } from './AdlParser';
import { AlphanumericContext } from './AdlParser';
import { ArchetypeIdContext } from './AdlParser';
import { HeaderTagContext } from './AdlParser';
import { HeaderContext } from './AdlParser';
import { ArchetypePropertyListContext } from './AdlParser';
import { ArchetypePropertyContext } from './AdlParser';
import { ArchetypePropertyValueContext } from './AdlParser';
import { ArchetypePropertyValuePartContext } from './AdlParser';
import { AtCodeContext } from './AdlParser';
import { SpecializeTagContext } from './AdlParser';
import { SpecializeContext } from './AdlParser';
import { LanguageContext } from './AdlParser';
import { DescriptionContext } from './AdlParser';
import { DefinitionContext } from './AdlParser';
import { TypeConstraintContext } from './AdlParser';
import { ComplexObjectConstraintContext } from './AdlParser';
import { OccurrencesContext } from './AdlParser';
import { OccurrenceRangeContext } from './AdlParser';
import { AttributeListMatcherContext } from './AdlParser';
import { OrderConstraintContext } from './AdlParser';
import { MultiValueConstraintContext } from './AdlParser';
import { ValueConstraintContext } from './AdlParser';
import { OrdinalConstraintContext } from './AdlParser';
import { OrdinalItemListContext } from './AdlParser';
import { OrdinalItemContext } from './AdlParser';
import { PrimitiveValueConstraintContext } from './AdlParser';
import { TerminologyCodeConstraintContext } from './AdlParser';
import { ArchetypeSlotConstraintContext } from './AdlParser';
import { ArchetypeSlotValueConstraintContext } from './AdlParser';
import { ArchetypeSlotSingleConstraintContext } from './AdlParser';
import { ArchetypeReferenceConstraintContext } from './AdlParser';
import { StringConstraintContext } from './AdlParser';
import { NumberConstraintContext } from './AdlParser';
import { DateTimeConstraintContext } from './AdlParser';
import { DateConstraintContext } from './AdlParser';
import { TimeConstraintContext } from './AdlParser';
import { DurationConstraintContext } from './AdlParser';
import { CodeIdentifierListContext } from './AdlParser';
import { RegularExpressionContext } from './AdlParser';
import { RegularExpressionInner1Context } from './AdlParser';
import { RegularExpressionInner2Context } from './AdlParser';
import { AttributeConstraintContext } from './AdlParser';
import { TupleAttributeIdentifierContext } from './AdlParser';
import { TupleChildConstraintsContext } from './AdlParser';
import { TupleChildConstraintContext } from './AdlParser';
import { AttributeIdentifierContext } from './AdlParser';
import { ExistenceContext } from './AdlParser';
import { CardinalityContext } from './AdlParser';
import { NumberIntervalConstraintContext } from './AdlParser';
import { DateIntervalConstraintContext } from './AdlParser';
import { TimeIntervalConstraintContext } from './AdlParser';
import { DateTimeIntervalConstraintContext } from './AdlParser';
import { DurationIntervalConstraintContext } from './AdlParser';
import { TerminologyContext } from './AdlParser';
import { AnnotationsContext } from './AdlParser';
import { OdinValueContext } from './AdlParser';
import { OdinObjectValueContext } from './AdlParser';
import { OdinObjectPropertyContext } from './AdlParser';
import { OdinCodePhraseValueListContext } from './AdlParser';
import { OdinCodePhraseValueContext } from './AdlParser';
import { OdinMapValueContext } from './AdlParser';
import { OdinMapValueEntryContext } from './AdlParser';
import { OpenStringListContext } from './AdlParser';
import { StringListContext } from './AdlParser';
import { NumberListContext } from './AdlParser';
import { BooleanListContext } from './AdlParser';
import { CodeIdentifierContext } from './AdlParser';
import { CodeIdentifierPartContext } from './AdlParser';
import { IdentifierContext } from './AdlParser';
import { BoolContext } from './AdlParser';
import { NameIdentifierContext } from './AdlParser';
import { TypeIdentifierWithGenericsContext } from './AdlParser';
import { TypeIdentifierContext } from './AdlParser';
import { KeywordContext } from './AdlParser';
import { PathSegmentContext } from './AdlParser';
import { RmPathContext } from './AdlParser';
import { UrlContext } from './AdlParser';
import { NumberOrStarContext } from './AdlParser';
import { NumberContext } from './AdlParser';
/**
 * This interface defines a complete listener for a parse tree produced by
 * `AdlParser`.
 */
export interface AdlListener extends ParseTreeListener {
    /**
     * Enter a parse tree produced by `AdlParser.adl`.
     * @param ctx the parse tree
     */
    enterAdl?: (ctx: AdlContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.adl`.
     * @param ctx the parse tree
     */
    exitAdl?: (ctx: AdlContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.alphanumeric`.
     * @param ctx the parse tree
     */
    enterAlphanumeric?: (ctx: AlphanumericContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.alphanumeric`.
     * @param ctx the parse tree
     */
    exitAlphanumeric?: (ctx: AlphanumericContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.archetypeId`.
     * @param ctx the parse tree
     */
    enterArchetypeId?: (ctx: ArchetypeIdContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.archetypeId`.
     * @param ctx the parse tree
     */
    exitArchetypeId?: (ctx: ArchetypeIdContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.headerTag`.
     * @param ctx the parse tree
     */
    enterHeaderTag?: (ctx: HeaderTagContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.headerTag`.
     * @param ctx the parse tree
     */
    exitHeaderTag?: (ctx: HeaderTagContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.header`.
     * @param ctx the parse tree
     */
    enterHeader?: (ctx: HeaderContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.header`.
     * @param ctx the parse tree
     */
    exitHeader?: (ctx: HeaderContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.archetypePropertyList`.
     * @param ctx the parse tree
     */
    enterArchetypePropertyList?: (ctx: ArchetypePropertyListContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.archetypePropertyList`.
     * @param ctx the parse tree
     */
    exitArchetypePropertyList?: (ctx: ArchetypePropertyListContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.archetypeProperty`.
     * @param ctx the parse tree
     */
    enterArchetypeProperty?: (ctx: ArchetypePropertyContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.archetypeProperty`.
     * @param ctx the parse tree
     */
    exitArchetypeProperty?: (ctx: ArchetypePropertyContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.archetypePropertyValue`.
     * @param ctx the parse tree
     */
    enterArchetypePropertyValue?: (ctx: ArchetypePropertyValueContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.archetypePropertyValue`.
     * @param ctx the parse tree
     */
    exitArchetypePropertyValue?: (ctx: ArchetypePropertyValueContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.archetypePropertyValuePart`.
     * @param ctx the parse tree
     */
    enterArchetypePropertyValuePart?: (ctx: ArchetypePropertyValuePartContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.archetypePropertyValuePart`.
     * @param ctx the parse tree
     */
    exitArchetypePropertyValuePart?: (ctx: ArchetypePropertyValuePartContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.atCode`.
     * @param ctx the parse tree
     */
    enterAtCode?: (ctx: AtCodeContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.atCode`.
     * @param ctx the parse tree
     */
    exitAtCode?: (ctx: AtCodeContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.specializeTag`.
     * @param ctx the parse tree
     */
    enterSpecializeTag?: (ctx: SpecializeTagContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.specializeTag`.
     * @param ctx the parse tree
     */
    exitSpecializeTag?: (ctx: SpecializeTagContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.specialize`.
     * @param ctx the parse tree
     */
    enterSpecialize?: (ctx: SpecializeContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.specialize`.
     * @param ctx the parse tree
     */
    exitSpecialize?: (ctx: SpecializeContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.language`.
     * @param ctx the parse tree
     */
    enterLanguage?: (ctx: LanguageContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.language`.
     * @param ctx the parse tree
     */
    exitLanguage?: (ctx: LanguageContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.description`.
     * @param ctx the parse tree
     */
    enterDescription?: (ctx: DescriptionContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.description`.
     * @param ctx the parse tree
     */
    exitDescription?: (ctx: DescriptionContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.definition`.
     * @param ctx the parse tree
     */
    enterDefinition?: (ctx: DefinitionContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.definition`.
     * @param ctx the parse tree
     */
    exitDefinition?: (ctx: DefinitionContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.typeConstraint`.
     * @param ctx the parse tree
     */
    enterTypeConstraint?: (ctx: TypeConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.typeConstraint`.
     * @param ctx the parse tree
     */
    exitTypeConstraint?: (ctx: TypeConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.complexObjectConstraint`.
     * @param ctx the parse tree
     */
    enterComplexObjectConstraint?: (ctx: ComplexObjectConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.complexObjectConstraint`.
     * @param ctx the parse tree
     */
    exitComplexObjectConstraint?: (ctx: ComplexObjectConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.occurrences`.
     * @param ctx the parse tree
     */
    enterOccurrences?: (ctx: OccurrencesContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.occurrences`.
     * @param ctx the parse tree
     */
    exitOccurrences?: (ctx: OccurrencesContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.occurrenceRange`.
     * @param ctx the parse tree
     */
    enterOccurrenceRange?: (ctx: OccurrenceRangeContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.occurrenceRange`.
     * @param ctx the parse tree
     */
    exitOccurrenceRange?: (ctx: OccurrenceRangeContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.attributeListMatcher`.
     * @param ctx the parse tree
     */
    enterAttributeListMatcher?: (ctx: AttributeListMatcherContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.attributeListMatcher`.
     * @param ctx the parse tree
     */
    exitAttributeListMatcher?: (ctx: AttributeListMatcherContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.orderConstraint`.
     * @param ctx the parse tree
     */
    enterOrderConstraint?: (ctx: OrderConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.orderConstraint`.
     * @param ctx the parse tree
     */
    exitOrderConstraint?: (ctx: OrderConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.multiValueConstraint`.
     * @param ctx the parse tree
     */
    enterMultiValueConstraint?: (ctx: MultiValueConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.multiValueConstraint`.
     * @param ctx the parse tree
     */
    exitMultiValueConstraint?: (ctx: MultiValueConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.valueConstraint`.
     * @param ctx the parse tree
     */
    enterValueConstraint?: (ctx: ValueConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.valueConstraint`.
     * @param ctx the parse tree
     */
    exitValueConstraint?: (ctx: ValueConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.ordinalConstraint`.
     * @param ctx the parse tree
     */
    enterOrdinalConstraint?: (ctx: OrdinalConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.ordinalConstraint`.
     * @param ctx the parse tree
     */
    exitOrdinalConstraint?: (ctx: OrdinalConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.ordinalItemList`.
     * @param ctx the parse tree
     */
    enterOrdinalItemList?: (ctx: OrdinalItemListContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.ordinalItemList`.
     * @param ctx the parse tree
     */
    exitOrdinalItemList?: (ctx: OrdinalItemListContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.ordinalItem`.
     * @param ctx the parse tree
     */
    enterOrdinalItem?: (ctx: OrdinalItemContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.ordinalItem`.
     * @param ctx the parse tree
     */
    exitOrdinalItem?: (ctx: OrdinalItemContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.primitiveValueConstraint`.
     * @param ctx the parse tree
     */
    enterPrimitiveValueConstraint?: (ctx: PrimitiveValueConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.primitiveValueConstraint`.
     * @param ctx the parse tree
     */
    exitPrimitiveValueConstraint?: (ctx: PrimitiveValueConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.terminologyCodeConstraint`.
     * @param ctx the parse tree
     */
    enterTerminologyCodeConstraint?: (ctx: TerminologyCodeConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.terminologyCodeConstraint`.
     * @param ctx the parse tree
     */
    exitTerminologyCodeConstraint?: (ctx: TerminologyCodeConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.archetypeSlotConstraint`.
     * @param ctx the parse tree
     */
    enterArchetypeSlotConstraint?: (ctx: ArchetypeSlotConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.archetypeSlotConstraint`.
     * @param ctx the parse tree
     */
    exitArchetypeSlotConstraint?: (ctx: ArchetypeSlotConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.archetypeSlotValueConstraint`.
     * @param ctx the parse tree
     */
    enterArchetypeSlotValueConstraint?: (ctx: ArchetypeSlotValueConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.archetypeSlotValueConstraint`.
     * @param ctx the parse tree
     */
    exitArchetypeSlotValueConstraint?: (ctx: ArchetypeSlotValueConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.archetypeSlotSingleConstraint`.
     * @param ctx the parse tree
     */
    enterArchetypeSlotSingleConstraint?: (ctx: ArchetypeSlotSingleConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.archetypeSlotSingleConstraint`.
     * @param ctx the parse tree
     */
    exitArchetypeSlotSingleConstraint?: (ctx: ArchetypeSlotSingleConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.archetypeReferenceConstraint`.
     * @param ctx the parse tree
     */
    enterArchetypeReferenceConstraint?: (ctx: ArchetypeReferenceConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.archetypeReferenceConstraint`.
     * @param ctx the parse tree
     */
    exitArchetypeReferenceConstraint?: (ctx: ArchetypeReferenceConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.stringConstraint`.
     * @param ctx the parse tree
     */
    enterStringConstraint?: (ctx: StringConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.stringConstraint`.
     * @param ctx the parse tree
     */
    exitStringConstraint?: (ctx: StringConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.numberConstraint`.
     * @param ctx the parse tree
     */
    enterNumberConstraint?: (ctx: NumberConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.numberConstraint`.
     * @param ctx the parse tree
     */
    exitNumberConstraint?: (ctx: NumberConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.dateTimeConstraint`.
     * @param ctx the parse tree
     */
    enterDateTimeConstraint?: (ctx: DateTimeConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.dateTimeConstraint`.
     * @param ctx the parse tree
     */
    exitDateTimeConstraint?: (ctx: DateTimeConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.dateConstraint`.
     * @param ctx the parse tree
     */
    enterDateConstraint?: (ctx: DateConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.dateConstraint`.
     * @param ctx the parse tree
     */
    exitDateConstraint?: (ctx: DateConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.timeConstraint`.
     * @param ctx the parse tree
     */
    enterTimeConstraint?: (ctx: TimeConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.timeConstraint`.
     * @param ctx the parse tree
     */
    exitTimeConstraint?: (ctx: TimeConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.durationConstraint`.
     * @param ctx the parse tree
     */
    enterDurationConstraint?: (ctx: DurationConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.durationConstraint`.
     * @param ctx the parse tree
     */
    exitDurationConstraint?: (ctx: DurationConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.codeIdentifierList`.
     * @param ctx the parse tree
     */
    enterCodeIdentifierList?: (ctx: CodeIdentifierListContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.codeIdentifierList`.
     * @param ctx the parse tree
     */
    exitCodeIdentifierList?: (ctx: CodeIdentifierListContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.regularExpression`.
     * @param ctx the parse tree
     */
    enterRegularExpression?: (ctx: RegularExpressionContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.regularExpression`.
     * @param ctx the parse tree
     */
    exitRegularExpression?: (ctx: RegularExpressionContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.regularExpressionInner1`.
     * @param ctx the parse tree
     */
    enterRegularExpressionInner1?: (ctx: RegularExpressionInner1Context) => void;
    /**
     * Exit a parse tree produced by `AdlParser.regularExpressionInner1`.
     * @param ctx the parse tree
     */
    exitRegularExpressionInner1?: (ctx: RegularExpressionInner1Context) => void;
    /**
     * Enter a parse tree produced by `AdlParser.regularExpressionInner2`.
     * @param ctx the parse tree
     */
    enterRegularExpressionInner2?: (ctx: RegularExpressionInner2Context) => void;
    /**
     * Exit a parse tree produced by `AdlParser.regularExpressionInner2`.
     * @param ctx the parse tree
     */
    exitRegularExpressionInner2?: (ctx: RegularExpressionInner2Context) => void;
    /**
     * Enter a parse tree produced by `AdlParser.attributeConstraint`.
     * @param ctx the parse tree
     */
    enterAttributeConstraint?: (ctx: AttributeConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.attributeConstraint`.
     * @param ctx the parse tree
     */
    exitAttributeConstraint?: (ctx: AttributeConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.tupleAttributeIdentifier`.
     * @param ctx the parse tree
     */
    enterTupleAttributeIdentifier?: (ctx: TupleAttributeIdentifierContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.tupleAttributeIdentifier`.
     * @param ctx the parse tree
     */
    exitTupleAttributeIdentifier?: (ctx: TupleAttributeIdentifierContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.tupleChildConstraints`.
     * @param ctx the parse tree
     */
    enterTupleChildConstraints?: (ctx: TupleChildConstraintsContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.tupleChildConstraints`.
     * @param ctx the parse tree
     */
    exitTupleChildConstraints?: (ctx: TupleChildConstraintsContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.tupleChildConstraint`.
     * @param ctx the parse tree
     */
    enterTupleChildConstraint?: (ctx: TupleChildConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.tupleChildConstraint`.
     * @param ctx the parse tree
     */
    exitTupleChildConstraint?: (ctx: TupleChildConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.attributeIdentifier`.
     * @param ctx the parse tree
     */
    enterAttributeIdentifier?: (ctx: AttributeIdentifierContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.attributeIdentifier`.
     * @param ctx the parse tree
     */
    exitAttributeIdentifier?: (ctx: AttributeIdentifierContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.existence`.
     * @param ctx the parse tree
     */
    enterExistence?: (ctx: ExistenceContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.existence`.
     * @param ctx the parse tree
     */
    exitExistence?: (ctx: ExistenceContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.cardinality`.
     * @param ctx the parse tree
     */
    enterCardinality?: (ctx: CardinalityContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.cardinality`.
     * @param ctx the parse tree
     */
    exitCardinality?: (ctx: CardinalityContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.numberIntervalConstraint`.
     * @param ctx the parse tree
     */
    enterNumberIntervalConstraint?: (ctx: NumberIntervalConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.numberIntervalConstraint`.
     * @param ctx the parse tree
     */
    exitNumberIntervalConstraint?: (ctx: NumberIntervalConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.dateIntervalConstraint`.
     * @param ctx the parse tree
     */
    enterDateIntervalConstraint?: (ctx: DateIntervalConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.dateIntervalConstraint`.
     * @param ctx the parse tree
     */
    exitDateIntervalConstraint?: (ctx: DateIntervalConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.timeIntervalConstraint`.
     * @param ctx the parse tree
     */
    enterTimeIntervalConstraint?: (ctx: TimeIntervalConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.timeIntervalConstraint`.
     * @param ctx the parse tree
     */
    exitTimeIntervalConstraint?: (ctx: TimeIntervalConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.dateTimeIntervalConstraint`.
     * @param ctx the parse tree
     */
    enterDateTimeIntervalConstraint?: (ctx: DateTimeIntervalConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.dateTimeIntervalConstraint`.
     * @param ctx the parse tree
     */
    exitDateTimeIntervalConstraint?: (ctx: DateTimeIntervalConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.durationIntervalConstraint`.
     * @param ctx the parse tree
     */
    enterDurationIntervalConstraint?: (ctx: DurationIntervalConstraintContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.durationIntervalConstraint`.
     * @param ctx the parse tree
     */
    exitDurationIntervalConstraint?: (ctx: DurationIntervalConstraintContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.terminology`.
     * @param ctx the parse tree
     */
    enterTerminology?: (ctx: TerminologyContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.terminology`.
     * @param ctx the parse tree
     */
    exitTerminology?: (ctx: TerminologyContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.annotations`.
     * @param ctx the parse tree
     */
    enterAnnotations?: (ctx: AnnotationsContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.annotations`.
     * @param ctx the parse tree
     */
    exitAnnotations?: (ctx: AnnotationsContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.odinValue`.
     * @param ctx the parse tree
     */
    enterOdinValue?: (ctx: OdinValueContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.odinValue`.
     * @param ctx the parse tree
     */
    exitOdinValue?: (ctx: OdinValueContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.odinObjectValue`.
     * @param ctx the parse tree
     */
    enterOdinObjectValue?: (ctx: OdinObjectValueContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.odinObjectValue`.
     * @param ctx the parse tree
     */
    exitOdinObjectValue?: (ctx: OdinObjectValueContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.odinObjectProperty`.
     * @param ctx the parse tree
     */
    enterOdinObjectProperty?: (ctx: OdinObjectPropertyContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.odinObjectProperty`.
     * @param ctx the parse tree
     */
    exitOdinObjectProperty?: (ctx: OdinObjectPropertyContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.odinCodePhraseValueList`.
     * @param ctx the parse tree
     */
    enterOdinCodePhraseValueList?: (ctx: OdinCodePhraseValueListContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.odinCodePhraseValueList`.
     * @param ctx the parse tree
     */
    exitOdinCodePhraseValueList?: (ctx: OdinCodePhraseValueListContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.odinCodePhraseValue`.
     * @param ctx the parse tree
     */
    enterOdinCodePhraseValue?: (ctx: OdinCodePhraseValueContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.odinCodePhraseValue`.
     * @param ctx the parse tree
     */
    exitOdinCodePhraseValue?: (ctx: OdinCodePhraseValueContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.odinMapValue`.
     * @param ctx the parse tree
     */
    enterOdinMapValue?: (ctx: OdinMapValueContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.odinMapValue`.
     * @param ctx the parse tree
     */
    exitOdinMapValue?: (ctx: OdinMapValueContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.odinMapValueEntry`.
     * @param ctx the parse tree
     */
    enterOdinMapValueEntry?: (ctx: OdinMapValueEntryContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.odinMapValueEntry`.
     * @param ctx the parse tree
     */
    exitOdinMapValueEntry?: (ctx: OdinMapValueEntryContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.openStringList`.
     * @param ctx the parse tree
     */
    enterOpenStringList?: (ctx: OpenStringListContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.openStringList`.
     * @param ctx the parse tree
     */
    exitOpenStringList?: (ctx: OpenStringListContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.stringList`.
     * @param ctx the parse tree
     */
    enterStringList?: (ctx: StringListContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.stringList`.
     * @param ctx the parse tree
     */
    exitStringList?: (ctx: StringListContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.numberList`.
     * @param ctx the parse tree
     */
    enterNumberList?: (ctx: NumberListContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.numberList`.
     * @param ctx the parse tree
     */
    exitNumberList?: (ctx: NumberListContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.booleanList`.
     * @param ctx the parse tree
     */
    enterBooleanList?: (ctx: BooleanListContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.booleanList`.
     * @param ctx the parse tree
     */
    exitBooleanList?: (ctx: BooleanListContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.codeIdentifier`.
     * @param ctx the parse tree
     */
    enterCodeIdentifier?: (ctx: CodeIdentifierContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.codeIdentifier`.
     * @param ctx the parse tree
     */
    exitCodeIdentifier?: (ctx: CodeIdentifierContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.codeIdentifierPart`.
     * @param ctx the parse tree
     */
    enterCodeIdentifierPart?: (ctx: CodeIdentifierPartContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.codeIdentifierPart`.
     * @param ctx the parse tree
     */
    exitCodeIdentifierPart?: (ctx: CodeIdentifierPartContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.identifier`.
     * @param ctx the parse tree
     */
    enterIdentifier?: (ctx: IdentifierContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.identifier`.
     * @param ctx the parse tree
     */
    exitIdentifier?: (ctx: IdentifierContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.bool`.
     * @param ctx the parse tree
     */
    enterBool?: (ctx: BoolContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.bool`.
     * @param ctx the parse tree
     */
    exitBool?: (ctx: BoolContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.nameIdentifier`.
     * @param ctx the parse tree
     */
    enterNameIdentifier?: (ctx: NameIdentifierContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.nameIdentifier`.
     * @param ctx the parse tree
     */
    exitNameIdentifier?: (ctx: NameIdentifierContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.typeIdentifierWithGenerics`.
     * @param ctx the parse tree
     */
    enterTypeIdentifierWithGenerics?: (ctx: TypeIdentifierWithGenericsContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.typeIdentifierWithGenerics`.
     * @param ctx the parse tree
     */
    exitTypeIdentifierWithGenerics?: (ctx: TypeIdentifierWithGenericsContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.typeIdentifier`.
     * @param ctx the parse tree
     */
    enterTypeIdentifier?: (ctx: TypeIdentifierContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.typeIdentifier`.
     * @param ctx the parse tree
     */
    exitTypeIdentifier?: (ctx: TypeIdentifierContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.keyword`.
     * @param ctx the parse tree
     */
    enterKeyword?: (ctx: KeywordContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.keyword`.
     * @param ctx the parse tree
     */
    exitKeyword?: (ctx: KeywordContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.pathSegment`.
     * @param ctx the parse tree
     */
    enterPathSegment?: (ctx: PathSegmentContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.pathSegment`.
     * @param ctx the parse tree
     */
    exitPathSegment?: (ctx: PathSegmentContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.rmPath`.
     * @param ctx the parse tree
     */
    enterRmPath?: (ctx: RmPathContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.rmPath`.
     * @param ctx the parse tree
     */
    exitRmPath?: (ctx: RmPathContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.url`.
     * @param ctx the parse tree
     */
    enterUrl?: (ctx: UrlContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.url`.
     * @param ctx the parse tree
     */
    exitUrl?: (ctx: UrlContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.numberOrStar`.
     * @param ctx the parse tree
     */
    enterNumberOrStar?: (ctx: NumberOrStarContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.numberOrStar`.
     * @param ctx the parse tree
     */
    exitNumberOrStar?: (ctx: NumberOrStarContext) => void;
    /**
     * Enter a parse tree produced by `AdlParser.number`.
     * @param ctx the parse tree
     */
    enterNumber?: (ctx: NumberContext) => void;
    /**
     * Exit a parse tree produced by `AdlParser.number`.
     * @param ctx the parse tree
     */
    exitNumber?: (ctx: NumberContext) => void;
}
