"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var TerminologyFlattener = /** @class */ (function () {
    function TerminologyFlattener(parent, specialized) {
        this.parent = parent;
        this.specialized = specialized;
    }
    TerminologyFlattener.prototype.flatten = function () {
        this.flattenCodeDefinitionSets(this.parent.termDefinitions, this.specialized.termDefinitions);
        this.flattenCodeDefinitionSets(this.parent.terminologyExtracts, this.specialized.terminologyExtracts);
        this.flattenTermBindingSets(this.parent.termBindings, this.specialized.termBindings);
        this.flattenValueSets(this.parent.valueSets, this.specialized.valueSets);
    };
    TerminologyFlattener.prototype.dictToMap = function (items) {
        var result = new Map();
        try {
            for (var items_1 = tslib_1.__values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var item = items_1_1.value;
                result.set(item.id, item.value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
        var e_1, _a;
    };
    TerminologyFlattener.prototype.termToMap = function (termDefinitions) {
        var result = new Map();
        try {
            for (var termDefinitions_1 = tslib_1.__values(termDefinitions), termDefinitions_1_1 = termDefinitions_1.next(); !termDefinitions_1_1.done; termDefinitions_1_1 = termDefinitions_1.next()) {
                var termDefinition = termDefinitions_1_1.value;
                result.set(termDefinition.code, termDefinition);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (termDefinitions_1_1 && !termDefinitions_1_1.done && (_a = termDefinitions_1.return)) _a.call(termDefinitions_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return result;
        var e_2, _a;
    };
    TerminologyFlattener.prototype.codeToMap = function (termDefinitions) {
        var result = new Map();
        try {
            for (var termDefinitions_2 = tslib_1.__values(termDefinitions), termDefinitions_2_1 = termDefinitions_2.next(); !termDefinitions_2_1.done; termDefinitions_2_1 = termDefinitions_2.next()) {
                var termDefinition = termDefinitions_2_1.value;
                result.set(termDefinition.language, termDefinition);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (termDefinitions_2_1 && !termDefinitions_2_1.done && (_a = termDefinitions_2.return)) _a.call(termDefinitions_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return result;
        var e_3, _a;
    };
    TerminologyFlattener.prototype.termItemToMap = function (tbs) {
        var result = new Map();
        try {
            for (var tbs_1 = tslib_1.__values(tbs), tbs_1_1 = tbs_1.next(); !tbs_1_1.done; tbs_1_1 = tbs_1.next()) {
                var termDefinition = tbs_1_1.value;
                result.set(termDefinition.code, termDefinition);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (tbs_1_1 && !tbs_1_1.done && (_a = tbs_1.return)) _a.call(tbs_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return result;
        var e_4, _a;
    };
    TerminologyFlattener.prototype.termSetToMap = function (tbs) {
        var result = new Map();
        try {
            for (var tbs_2 = tslib_1.__values(tbs), tbs_2_1 = tbs_2.next(); !tbs_2_1.done; tbs_2_1 = tbs_2.next()) {
                var termDefinition = tbs_2_1.value;
                result.set(termDefinition.terminology, termDefinition);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (tbs_2_1 && !tbs_2_1.done && (_a = tbs_2.return)) _a.call(tbs_2);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return result;
        var e_5, _a;
    };
    TerminologyFlattener.prototype.findValueSetItem = function (code) {
        return function (item) {
            return item.id === code;
        };
    };
    TerminologyFlattener.prototype.flattenValueSets = function (parent, specialized) {
        try {
            for (var parent_1 = tslib_1.__values(parent), parent_1_1 = parent_1.next(); !parent_1_1.done; parent_1_1 = parent_1.next()) {
                var parentItem = parent_1_1.value;
                var specializedItem = specialized.find(this.findValueSetItem(parentItem.id));
                if (specializedItem == null) {
                    specialized.push(parentItem);
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (parent_1_1 && !parent_1_1.done && (_a = parent_1.return)) _a.call(parent_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        var e_6, _a;
    };
    TerminologyFlattener.prototype.flattenTermBindingSets = function (parent, specialized) {
        var existing = this.termSetToMap(specialized);
        try {
            for (var parent_2 = tslib_1.__values(parent), parent_2_1 = parent_2.next(); !parent_2_1.done; parent_2_1 = parent_2.next()) {
                var parentTbs = parent_2_1.value;
                var specializedTbs = existing.get(parentTbs.terminology);
                if (specializedTbs != null) {
                    this.flattenTermBindingItems(parentTbs.items, specializedTbs.items);
                }
                else {
                    specialized.push(_.cloneDeep(parentTbs));
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (parent_2_1 && !parent_2_1.done && (_a = parent_2.return)) _a.call(parent_2);
            }
            finally { if (e_7) throw e_7.error; }
        }
        var e_7, _a;
    };
    TerminologyFlattener.prototype.flattenTermBindingItems = function (parent, specialized) {
        var existing = this.termItemToMap(specialized);
        try {
            for (var parent_3 = tslib_1.__values(parent), parent_3_1 = parent_3.next(); !parent_3_1.done; parent_3_1 = parent_3.next()) {
                var parentTbi = parent_3_1.value;
                var specializedTbi = existing.get(parentTbi.code);
                if (specializedTbi == null) {
                    specialized.push(_.cloneDeep(parentTbi));
                }
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (parent_3_1 && !parent_3_1.done && (_a = parent_3.return)) _a.call(parent_3);
            }
            finally { if (e_8) throw e_8.error; }
        }
        var e_8, _a;
    };
    TerminologyFlattener.prototype.flattenCodeDefinitionSets = function (parent, specialized) {
        var existing = this.codeToMap(specialized);
        try {
            for (var parent_4 = tslib_1.__values(parent), parent_4_1 = parent_4.next(); !parent_4_1.done; parent_4_1 = parent_4.next()) {
                var parentCds = parent_4_1.value;
                var specializedCds = existing.get(parentCds.language);
                if (specializedCds != null) {
                    this.flattenCodeDefinitionItems(parentCds.items, specializedCds.items);
                }
                else {
                    specialized.push(_.cloneDeep(parentCds));
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (parent_4_1 && !parent_4_1.done && (_a = parent_4.return)) _a.call(parent_4);
            }
            finally { if (e_9) throw e_9.error; }
        }
        var e_9, _a;
    };
    TerminologyFlattener.prototype.flattenCodeDefinitionItems = function (parent, specialized) {
        var existing = this.termToMap(specialized);
        try {
            for (var parent_5 = tslib_1.__values(parent), parent_5_1 = parent_5.next(); !parent_5_1.done; parent_5_1 = parent_5.next()) {
                var parentTerm = parent_5_1.value;
                var specializedTerm = existing.get(parentTerm.code);
                if (specializedTerm != null) {
                    this.flattenStringDictionaryItems(parentTerm.items, specializedTerm.items);
                }
                else {
                    specialized.push(_.cloneDeep(parentTerm));
                }
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (parent_5_1 && !parent_5_1.done && (_a = parent_5.return)) _a.call(parent_5);
            }
            finally { if (e_10) throw e_10.error; }
        }
        var e_10, _a;
    };
    TerminologyFlattener.prototype.flattenStringDictionaryItems = function (parent, specialized) {
        var existing = this.dictToMap(specialized);
        try {
            for (var parent_6 = tslib_1.__values(parent), parent_6_1 = parent_6.next(); !parent_6_1.done; parent_6_1 = parent_6.next()) {
                var parentItem = parent_6_1.value;
                if (!existing.has(parentItem.id)) {
                    specialized.push(_.cloneDeep(parentItem));
                }
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (parent_6_1 && !parent_6_1.done && (_a = parent_6.return)) _a.call(parent_6);
            }
            finally { if (e_11) throw e_11.error; }
        }
        var e_11, _a;
    };
    return TerminologyFlattener;
}());
exports.TerminologyFlattener = TerminologyFlattener;
//# sourceMappingURL=TerminologyFlattener.js.map