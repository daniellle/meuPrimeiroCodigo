import { ArchetypeTerm } from '../am/ArchetypeTerm';
import { ArchetypeTerminology } from '../am/ArchetypeTerminology';
import { CodeDefinitionSet } from '../am/CodeDefinitionSet';
import { StringDictionaryItem } from '../am/StringDictionaryItem';
import { TermBindingItem } from '../am/TermBindingItem';
import { TermBindingSet } from '../am/TermBindingSet';
export declare class TerminologyFlattener {
    private parent;
    private specialized;
    constructor(parent: ArchetypeTerminology, specialized: ArchetypeTerminology);
    flatten(): void;
    protected dictToMap(items: StringDictionaryItem[]): Map<string, string>;
    protected termToMap(termDefinitions: ArchetypeTerm[]): Map<String, ArchetypeTerm>;
    protected codeToMap(termDefinitions: CodeDefinitionSet[]): Map<String, CodeDefinitionSet>;
    protected termItemToMap(tbs: TermBindingItem[]): Map<String, TermBindingItem>;
    protected termSetToMap(tbs: TermBindingSet[]): Map<String, TermBindingSet>;
    private findValueSetItem(code);
    private flattenValueSets(parent, specialized);
    private flattenTermBindingSets(parent, specialized);
    private flattenTermBindingItems(parent, specialized);
    private flattenCodeDefinitionSets(parent, specialized);
    private flattenCodeDefinitionItems(parent, specialized);
    private flattenStringDictionaryItems(parent, specialized);
}
