"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ArchetypeFlattener_1 = require("../flattener/ArchetypeFlattener");
var ArchetypeRepositoryOverlay = /** @class */ (function () {
    function ArchetypeRepositoryOverlay(repository, archetypes) {
        this.delegate = repository;
        this.flattener = new ArchetypeFlattener_1.ArchetypeFlattener();
        this.overlayArchetypeMap = new Map();
        try {
            for (var archetypes_1 = tslib_1.__values(archetypes), archetypes_1_1 = archetypes_1.next(); !archetypes_1_1.done; archetypes_1_1 = archetypes_1.next()) {
                var archetype = archetypes_1_1.value;
                this.overlayArchetypeMap.set(archetype.archetypeId, archetype);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (archetypes_1_1 && !archetypes_1_1.done && (_a = archetypes_1.return)) _a.call(archetypes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    }
    ArchetypeRepositoryOverlay.prototype.getDifferentialArchetype = function (archetypeId) {
        var archetype = this.overlayArchetypeMap.get(archetypeId);
        if (archetype != null) {
            return archetype;
        }
        return this.delegate.getDifferentialArchetype(archetypeId);
    };
    ArchetypeRepositoryOverlay.prototype.getFlatArchetype = function (archetypeId) {
        var source = this.getDifferentialArchetype(archetypeId);
        var parent = null;
        if (source.parentArchetypeId != null) {
            parent = this.getFlatArchetype(source.parentArchetypeId);
        }
        return this.flattener.flatten(parent, source);
    };
    return ArchetypeRepositoryOverlay;
}());
exports.ArchetypeRepositoryOverlay = ArchetypeRepositoryOverlay;
//# sourceMappingURL=ArchetypeRepositoryOverlay.js.map