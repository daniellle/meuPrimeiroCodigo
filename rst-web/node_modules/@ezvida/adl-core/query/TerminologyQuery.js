"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var jsonpath = require("jsonpath");
var TypeGuard_1 = require("../rminfo/TypeGuard");
var DictionaryItem_1 = require("./DictionaryItem");
var RmPath_1 = require("../flattener/RmPath");
var TerminologyQuery;
(function (TerminologyQuery) {
    var Options = /** @class */ (function () {
        function Options() {
        }
        return Options;
    }());
    TerminologyQuery.Options = Options;
    function basePath(overlayId) {
        if (overlayId) {
            return ".componentTerminologies[?(@.code==='" + overlayId + "')].value";
        }
        return '.terminology';
    }
    function executeFindTermDefinition(achertype, path) {
        var result = jsonpath.query(achertype, path);
        if (!!result && result.length < 1) {
            return null;
        }
        var dictionaryItem = new DictionaryItem_1.DictionaryItem();
        try {
            for (var _a = tslib_1.__values(result[0].items), _b = _a.next(); !_b.done; _b = _a.next()) {
                var item = _b.value;
                dictionaryItem[item.id] = item.value;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return dictionaryItem;
        var e_1, _c;
    }
    function getLanguage(archetype, lang, overlayId) {
        var termDefinitions = archetype.terminology.termDefinitions;
        if (TypeGuard_1.isOperationalTemplate(archetype) && overlayId) {
            var termItem = archetype.componentTerminologies.find(function (compTermItem) {
                return compTermItem.code === overlayId;
            });
            if (termItem) {
                termDefinitions = termItem.value.termDefinitions;
            }
        }
        var definition = termDefinitions.find(function (termDefinition) {
            return termDefinition.language === lang;
        });
        var language = 'en';
        if (definition) {
            language = definition.language;
        }
        return language;
    }
    function findTermDefinitionByPath(achertype, path, options) {
        options = Object.assign(options || {}, { language: 'pt-br', matchSpecialized: true, byPath: true });
        var opt = achertype;
        var code;
        var pathTerminology = opt.paths.find(function (term) { return term.aPath === path; });
        if (pathTerminology != null) {
            options.overlayId = pathTerminology.archetypeRef;
            code = RmPath_1.RmPath.VALUE_OF(path).nodeId;
        }
        return findTermDefinition(achertype, code, options);
    }
    TerminologyQuery.findTermDefinitionByPath = findTermDefinitionByPath;
    /**
     *
     * @param {Archetype} achertype
     * @param {string} code - nodeId (options.byPath is false) or path (options.byPath is true)
     * @param {TerminologyQuery.Options} options - extras default {language: 'pt-br', matchSpecialized: true, byPath: true}
     * @returns {DictionaryItem}
     */
    function findTermDefinition(achertype, code, options) {
        options = Object.assign(options || {}, { language: 'pt-br', matchSpecialized: true, byPath: true });
        var language = getLanguage(achertype, options.language, options.overlayId);
        var condicionItem = "@.code==='" + code + "'";
        if (options.matchSpecialized) {
            condicionItem = condicionItem + " || @.code.startsWith('" + code + ".')";
        }
        if (options.matchParent) {
            condicionItem = condicionItem + " || '" + code + "'.startsWith(@.code.concat('.'))";
        }
        var path = "$" + basePath(options.overlayId) + ".termDefinitions[?(@.language==='" + language + "')].items[?(" + condicionItem + ")]";
        var dictionaryItem = executeFindTermDefinition(achertype, path);
        if (dictionaryItem) {
            dictionaryItem.language = language;
        }
        return dictionaryItem;
    }
    TerminologyQuery.findTermDefinition = findTermDefinition;
    function findValueSets(achertype, id, overlayId) {
        var result = jsonpath.query(achertype, "$" + basePath(overlayId) + ".valueSets[?(@.id==='" + id + "')]");
        if (!!result && result.length < 1) {
            return null;
        }
        return result[0].members;
    }
    TerminologyQuery.findValueSets = findValueSets;
    function findTermDefinitionByValueSet(achertype, code, overlayId) {
        var language = getLanguage(achertype, 'pt-br', overlayId);
        var condicionItem = "@.code==='" + code + "'";
        condicionItem = condicionItem + " || @.code.startsWith('" + code + ".')";
        var path = "$" + basePath(overlayId) + ".termDefinitions[?(@.language==='" + language + "')].items[?(" + condicionItem + ")]";
        var dictionaryItem = executeFindTermDefinition(achertype, path);
        if (dictionaryItem) {
            dictionaryItem.language = language;
        }
        return dictionaryItem;
    }
    TerminologyQuery.findTermDefinitionByValueSet = findTermDefinitionByValueSet;
    function findTermBinds(achertype, code, overlayId) {
        var condicionItem = "@.code==='" + code + "'";
        var path = "$" + basePath(overlayId) + ".termBindings[*].items[?(" + condicionItem + ")]";
        return jsonpath.query(achertype, path);
    }
    TerminologyQuery.findTermBinds = findTermBinds;
})(TerminologyQuery = exports.TerminologyQuery || (exports.TerminologyQuery = {}));
//# sourceMappingURL=TerminologyQuery.js.map